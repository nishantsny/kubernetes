/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg5_util "k8s.io/kubernetes/pkg/util"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	codecSelferC_UTF81234         = 1
	codecSelferC_RAW1234          = 0
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 4 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			4, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_runtime.RawExtension
		var v3 pkg1_types.UID
		var v4 pkg5_util.IntOrString
		var v5 pkg4_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				var yynn2 int = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
			}
			if yyr2 || yy2arr2 {
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yysep2 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym43 := z.DecBinary()
	_ = yym43
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl44 := r.ReadMapStart()
			if yyl44 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl44, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl44 := r.ReadArrayStart()
			if yyl44 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl44, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys45Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys45Slc
	var yyhl45 bool = l >= 0
	for yyj45 := 0; ; yyj45++ {
		if yyhl45 {
			if yyj45 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys45Slc = r.DecodeBytes(yys45Slc, true, true)
		yys45 := string(yys45Slc)
		switch yys45 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv53 := &x.CreationTimestamp
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else if yym54 {
					z.DecBinaryUnmarshal(yyv53)
				} else if !yym54 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv53)
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym56 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym56 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv59 := &x.Labels
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					z.F.DecMapStringStringX(yyv59, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv61 := &x.Annotations
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					z.F.DecMapStringStringX(yyv61, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys45)
		} // end switch yys45
	} // end for yyj45
	if !yyhl45 {
		r.ReadEnd()
	}
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv71 := &x.CreationTimestamp
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv71) {
		} else if yym72 {
			z.DecBinaryUnmarshal(yyv71)
		} else if !yym72 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv71)
		} else {
			z.DecFallback(yyv71, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym74 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym74 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv77 := &x.Labels
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			z.F.DecMapStringStringX(yyv77, false, d)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv79 := &x.Annotations
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			z.F.DecMapStringStringX(yyv79, false, d)
		}
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	r.ReadEnd()
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [17]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq82[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq82[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq82[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq82[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq82[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq82[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq82[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq82[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq82[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq82[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq82[12] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq82[13] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq82[14] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq82[15] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq82[16] = x.VolumeSource.FC != nil && x.FC != nil
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(17)
			} else {
				var yynn82 int = 1
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
			}
			if yyr82 || yy2arr82 {
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym85 := z.EncBinary()
				_ = yym85
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn86 bool
			if x.VolumeSource.HostPath == nil {
				yyn86 = true
				goto LABEL86
			}
		LABEL86:
			if yyr82 || yy2arr82 {
				if yyn86 {
					r.EncodeNil()
				} else {
					if yyq82[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yyn86 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn87 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn87 = true
				goto LABEL87
			}
		LABEL87:
			if yyr82 || yy2arr82 {
				if yyn87 {
					r.EncodeNil()
				} else {
					if yyq82[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[2] {
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if yyn87 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn88 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn88 = true
				goto LABEL88
			}
		LABEL88:
			if yyr82 || yy2arr82 {
				if yyn88 {
					r.EncodeNil()
				} else {
					if yyq82[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[3] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yyn88 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn89 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn89 = true
				goto LABEL89
			}
		LABEL89:
			if yyr82 || yy2arr82 {
				if yyn89 {
					r.EncodeNil()
				} else {
					if yyq82[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[4] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yyn89 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn90 bool
			if x.VolumeSource.GitRepo == nil {
				yyn90 = true
				goto LABEL90
			}
		LABEL90:
			if yyr82 || yy2arr82 {
				if yyn90 {
					r.EncodeNil()
				} else {
					if yyq82[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[5] {
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if yyn90 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn91 bool
			if x.VolumeSource.Secret == nil {
				yyn91 = true
				goto LABEL91
			}
		LABEL91:
			if yyr82 || yy2arr82 {
				if yyn91 {
					r.EncodeNil()
				} else {
					if yyq82[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[6] {
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if yyn91 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn92 bool
			if x.VolumeSource.NFS == nil {
				yyn92 = true
				goto LABEL92
			}
		LABEL92:
			if yyr82 || yy2arr82 {
				if yyn92 {
					r.EncodeNil()
				} else {
					if yyq82[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[7] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yyn92 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn93 bool
			if x.VolumeSource.ISCSI == nil {
				yyn93 = true
				goto LABEL93
			}
		LABEL93:
			if yyr82 || yy2arr82 {
				if yyn93 {
					r.EncodeNil()
				} else {
					if yyq82[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[8] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yyn93 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn94 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn94 = true
				goto LABEL94
			}
		LABEL94:
			if yyr82 || yy2arr82 {
				if yyn94 {
					r.EncodeNil()
				} else {
					if yyq82[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[9] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yyn94 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn95 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn95 = true
				goto LABEL95
			}
		LABEL95:
			if yyr82 || yy2arr82 {
				if yyn95 {
					r.EncodeNil()
				} else {
					if yyq82[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[10] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if yyn95 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn96 bool
			if x.VolumeSource.RBD == nil {
				yyn96 = true
				goto LABEL96
			}
		LABEL96:
			if yyr82 || yy2arr82 {
				if yyn96 {
					r.EncodeNil()
				} else {
					if yyq82[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[11] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yyn96 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn97 bool
			if x.VolumeSource.Cinder == nil {
				yyn97 = true
				goto LABEL97
			}
		LABEL97:
			if yyr82 || yy2arr82 {
				if yyn97 {
					r.EncodeNil()
				} else {
					if yyq82[12] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[12] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yyn97 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn98 bool
			if x.VolumeSource.CephFS == nil {
				yyn98 = true
				goto LABEL98
			}
		LABEL98:
			if yyr82 || yy2arr82 {
				if yyn98 {
					r.EncodeNil()
				} else {
					if yyq82[13] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[13] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yyn98 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn99 bool
			if x.VolumeSource.Flocker == nil {
				yyn99 = true
				goto LABEL99
			}
		LABEL99:
			if yyr82 || yy2arr82 {
				if yyn99 {
					r.EncodeNil()
				} else {
					if yyq82[14] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[14] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if yyn99 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn100 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr82 || yy2arr82 {
				if yyn100 {
					r.EncodeNil()
				} else {
					if yyq82[15] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[15] {
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.FC == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr82 || yy2arr82 {
				if yyn101 {
					r.EncodeNil()
				} else {
					if yyq82[16] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[16] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yysep82 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym102 := z.DecBinary()
	_ = yym102
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl103 := r.ReadMapStart()
			if yyl103 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl103, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl103 := r.ReadArrayStart()
			if yyl103 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl103, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys104Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys104Slc
	var yyhl104 bool = l >= 0
	for yyj104 := 0; ; yyj104++ {
		if yyhl104 {
			if yyj104 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys104Slc = r.DecodeBytes(yys104Slc, true, true)
		yys104 := string(yys104Slc)
		switch yys104 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys104)
		} // end switch yys104
	} // end for yyj104
	if !yyhl104 {
		r.ReadEnd()
	}
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj122 int
	var yyb122 bool
	var yyhl122 bool = l >= 0
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj122++
		if yyhl122 {
			yyb122 = yyj122 > l
		} else {
			yyb122 = r.CheckBreak()
		}
		if yyb122 {
			break
		}
		z.DecStructFieldNotFound(yyj122-1, "")
	}
	r.ReadEnd()
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym140 := z.EncBinary()
		_ = yym140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep141 := !z.EncBinary()
			yy2arr141 := z.EncBasicHandle().StructToArray
			var yyq141 [16]bool
			_, _, _ = yysep141, yyq141, yy2arr141
			const yyr141 bool = false
			yyq141[0] = x.HostPath != nil
			yyq141[1] = x.EmptyDir != nil
			yyq141[2] = x.GCEPersistentDisk != nil
			yyq141[3] = x.AWSElasticBlockStore != nil
			yyq141[4] = x.GitRepo != nil
			yyq141[5] = x.Secret != nil
			yyq141[6] = x.NFS != nil
			yyq141[7] = x.ISCSI != nil
			yyq141[8] = x.Glusterfs != nil
			yyq141[9] = x.PersistentVolumeClaim != nil
			yyq141[10] = x.RBD != nil
			yyq141[11] = x.Cinder != nil
			yyq141[12] = x.CephFS != nil
			yyq141[13] = x.Flocker != nil
			yyq141[14] = x.DownwardAPI != nil
			yyq141[15] = x.FC != nil
			if yyr141 || yy2arr141 {
				r.EncodeArrayStart(16)
			} else {
				var yynn141 int = 0
				for _, b := range yyq141 {
					if b {
						yynn141++
					}
				}
				r.EncodeMapStart(yynn141)
			}
			if yyr141 || yy2arr141 {
				if yyq141[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[1] {
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[2] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[3] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[4] {
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[5] {
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[6] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[7] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[8] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[9] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[10] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[11] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[11] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[12] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[12] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[13] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[13] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[14] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[14] {
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[15] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[15] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yysep141 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym158 := z.DecBinary()
	_ = yym158
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl159 := r.ReadMapStart()
			if yyl159 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl159, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl159 := r.ReadArrayStart()
			if yyl159 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl159, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys160Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys160Slc
	var yyhl160 bool = l >= 0
	for yyj160 := 0; ; yyj160++ {
		if yyhl160 {
			if yyj160 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys160Slc = r.DecodeBytes(yys160Slc, true, true)
		yys160 := string(yys160Slc)
		switch yys160 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys160)
		} // end switch yys160
	} // end for yyj160
	if !yyhl160 {
		r.ReadEnd()
	}
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj177 int
	var yyb177 bool
	var yyhl177 bool = l >= 0
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj177++
		if yyhl177 {
			yyb177 = yyj177 > l
		} else {
			yyb177 = r.CheckBreak()
		}
		if yyb177 {
			break
		}
		z.DecStructFieldNotFound(yyj177-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym194 := z.EncBinary()
		_ = yym194
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep195 := !z.EncBinary()
			yy2arr195 := z.EncBasicHandle().StructToArray
			var yyq195 [2]bool
			_, _, _ = yysep195, yyq195, yy2arr195
			const yyr195 bool = false
			yyq195[1] = x.ReadOnly != false
			if yyr195 || yy2arr195 {
				r.EncodeArrayStart(2)
			} else {
				var yynn195 int = 1
				for _, b := range yyq195 {
					if b {
						yynn195++
					}
				}
				r.EncodeMapStart(yynn195)
			}
			if yyr195 || yy2arr195 {
				yym197 := z.EncBinary()
				_ = yym197
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				yym198 := z.EncBinary()
				_ = yym198
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[1] {
					yym200 := z.EncBinary()
					_ = yym200
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq195[1] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym201 := z.EncBinary()
					_ = yym201
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep195 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym202 := z.DecBinary()
	_ = yym202
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl203 := r.ReadMapStart()
			if yyl203 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl203, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl203 := r.ReadArrayStart()
			if yyl203 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl203, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys204Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys204Slc
	var yyhl204 bool = l >= 0
	for yyj204 := 0; ; yyj204++ {
		if yyhl204 {
			if yyj204 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys204Slc = r.DecodeBytes(yys204Slc, true, true)
		yys204 := string(yys204Slc)
		switch yys204 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys204)
		} // end switch yys204
	} // end for yyj204
	if !yyhl204 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj207 int
	var yyb207 bool
	var yyhl207 bool = l >= 0
	yyj207++
	if yyhl207 {
		yyb207 = yyj207 > l
	} else {
		yyb207 = r.CheckBreak()
	}
	if yyb207 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj207++
	if yyhl207 {
		yyb207 = yyj207 > l
	} else {
		yyb207 = r.CheckBreak()
	}
	if yyb207 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj207++
		if yyhl207 {
			yyb207 = yyj207 > l
		} else {
			yyb207 = r.CheckBreak()
		}
		if yyb207 {
			break
		}
		z.DecStructFieldNotFound(yyj207-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym210 := z.EncBinary()
		_ = yym210
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep211 := !z.EncBinary()
			yy2arr211 := z.EncBasicHandle().StructToArray
			var yyq211 [11]bool
			_, _, _ = yysep211, yyq211, yy2arr211
			const yyr211 bool = false
			yyq211[0] = x.GCEPersistentDisk != nil
			yyq211[1] = x.AWSElasticBlockStore != nil
			yyq211[2] = x.HostPath != nil
			yyq211[3] = x.Glusterfs != nil
			yyq211[4] = x.NFS != nil
			yyq211[5] = x.RBD != nil
			yyq211[6] = x.ISCSI != nil
			yyq211[7] = x.Cinder != nil
			yyq211[8] = x.CephFS != nil
			yyq211[9] = x.FC != nil
			yyq211[10] = x.Flocker != nil
			if yyr211 || yy2arr211 {
				r.EncodeArrayStart(11)
			} else {
				var yynn211 int = 0
				for _, b := range yyq211 {
					if b {
						yynn211++
					}
				}
				r.EncodeMapStart(yynn211)
			}
			if yyr211 || yy2arr211 {
				if yyq211[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[0] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[1] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[2] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[3] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[4] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[5] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[6] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[7] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[8] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[9] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[10] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yysep211 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym223 := z.DecBinary()
	_ = yym223
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl224 := r.ReadMapStart()
			if yyl224 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl224, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl224 := r.ReadArrayStart()
			if yyl224 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl224, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys225Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys225Slc
	var yyhl225 bool = l >= 0
	for yyj225 := 0; ; yyj225++ {
		if yyhl225 {
			if yyj225 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys225Slc = r.DecodeBytes(yys225Slc, true, true)
		yys225 := string(yys225Slc)
		switch yys225 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys225)
		} // end switch yys225
	} // end for yyj225
	if !yyhl225 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj237 int
	var yyb237 bool
	var yyhl237 bool = l >= 0
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	for {
		yyj237++
		if yyhl237 {
			yyb237 = yyj237 > l
		} else {
			yyb237 = r.CheckBreak()
		}
		if yyb237 {
			break
		}
		z.DecStructFieldNotFound(yyj237-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym249 := z.EncBinary()
		_ = yym249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep250 := !z.EncBinary()
			yy2arr250 := z.EncBasicHandle().StructToArray
			var yyq250 [5]bool
			_, _, _ = yysep250, yyq250, yy2arr250
			const yyr250 bool = false
			yyq250[0] = x.Kind != ""
			yyq250[1] = x.APIVersion != ""
			yyq250[2] = true
			yyq250[3] = true
			yyq250[4] = true
			if yyr250 || yy2arr250 {
				r.EncodeArrayStart(5)
			} else {
				var yynn250 int = 0
				for _, b := range yyq250 {
					if b {
						yynn250++
					}
				}
				r.EncodeMapStart(yynn250)
			}
			if yyr250 || yy2arr250 {
				if yyq250[0] {
					yym252 := z.EncBinary()
					_ = yym252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym253 := z.EncBinary()
					_ = yym253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[1] {
					yym255 := z.EncBinary()
					_ = yym255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym256 := z.EncBinary()
					_ = yym256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[2] {
					yy258 := &x.ObjectMeta
					yy258.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy259 := &x.ObjectMeta
					yy259.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[3] {
					yy261 := &x.Spec
					yy261.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy262 := &x.Spec
					yy262.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[4] {
					yy264 := &x.Status
					yy264.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy265 := &x.Status
					yy265.CodecEncodeSelf(e)
				}
			}
			if yysep250 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym266 := z.DecBinary()
	_ = yym266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl267 := r.ReadMapStart()
			if yyl267 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl267, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl267 := r.ReadArrayStart()
			if yyl267 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl267, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys268Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys268Slc
	var yyhl268 bool = l >= 0
	for yyj268 := 0; ; yyj268++ {
		if yyhl268 {
			if yyj268 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys268Slc = r.DecodeBytes(yys268Slc, true, true)
		yys268 := string(yys268Slc)
		switch yys268 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv271 := &x.ObjectMeta
				yyv271.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv272 := &x.Spec
				yyv272.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv273 := &x.Status
				yyv273.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys268)
		} // end switch yys268
	} // end for yyj268
	if !yyhl268 {
		r.ReadEnd()
	}
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj274 int
	var yyb274 bool
	var yyhl274 bool = l >= 0
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv277 := &x.ObjectMeta
		yyv277.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv278 := &x.Spec
		yyv278.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv279 := &x.Status
		yyv279.CodecDecodeSelf(d)
	}
	for {
		yyj274++
		if yyhl274 {
			yyb274 = yyj274 > l
		} else {
			yyb274 = r.CheckBreak()
		}
		if yyb274 {
			break
		}
		z.DecStructFieldNotFound(yyj274-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym280 := z.EncBinary()
		_ = yym280
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep281 := !z.EncBinary()
			yy2arr281 := z.EncBasicHandle().StructToArray
			var yyq281 [15]bool
			_, _, _ = yysep281, yyq281, yy2arr281
			const yyr281 bool = false
			yyq281[0] = len(x.Capacity) != 0
			yyq281[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq281[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq281[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq281[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq281[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq281[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq281[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq281[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq281[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq281[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq281[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq281[12] = len(x.AccessModes) != 0
			yyq281[13] = x.ClaimRef != nil
			yyq281[14] = x.PersistentVolumeReclaimPolicy != ""
			if yyr281 || yy2arr281 {
				r.EncodeArrayStart(15)
			} else {
				var yynn281 int = 0
				for _, b := range yyq281 {
					if b {
						yynn281++
					}
				}
				r.EncodeMapStart(yynn281)
			}
			if yyr281 || yy2arr281 {
				if yyq281[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			var yyn283 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn283 = true
				goto LABEL283
			}
		LABEL283:
			if yyr281 || yy2arr281 {
				if yyn283 {
					r.EncodeNil()
				} else {
					if yyq281[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[1] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yyn283 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn284 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn284 = true
				goto LABEL284
			}
		LABEL284:
			if yyr281 || yy2arr281 {
				if yyn284 {
					r.EncodeNil()
				} else {
					if yyq281[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[2] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yyn284 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn285 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn285 = true
				goto LABEL285
			}
		LABEL285:
			if yyr281 || yy2arr281 {
				if yyn285 {
					r.EncodeNil()
				} else {
					if yyq281[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[3] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yyn285 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn286 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn286 = true
				goto LABEL286
			}
		LABEL286:
			if yyr281 || yy2arr281 {
				if yyn286 {
					r.EncodeNil()
				} else {
					if yyq281[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[4] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yyn286 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn287 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn287 = true
				goto LABEL287
			}
		LABEL287:
			if yyr281 || yy2arr281 {
				if yyn287 {
					r.EncodeNil()
				} else {
					if yyq281[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[5] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yyn287 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn288 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn288 = true
				goto LABEL288
			}
		LABEL288:
			if yyr281 || yy2arr281 {
				if yyn288 {
					r.EncodeNil()
				} else {
					if yyq281[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[6] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yyn288 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn289 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn289 = true
				goto LABEL289
			}
		LABEL289:
			if yyr281 || yy2arr281 {
				if yyn289 {
					r.EncodeNil()
				} else {
					if yyq281[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[7] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yyn289 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn290 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn290 = true
				goto LABEL290
			}
		LABEL290:
			if yyr281 || yy2arr281 {
				if yyn290 {
					r.EncodeNil()
				} else {
					if yyq281[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[8] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yyn290 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn291 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn291 = true
				goto LABEL291
			}
		LABEL291:
			if yyr281 || yy2arr281 {
				if yyn291 {
					r.EncodeNil()
				} else {
					if yyq281[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[9] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yyn291 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn292 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn292 = true
				goto LABEL292
			}
		LABEL292:
			if yyr281 || yy2arr281 {
				if yyn292 {
					r.EncodeNil()
				} else {
					if yyq281[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[10] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if yyn292 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn293 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn293 = true
				goto LABEL293
			}
		LABEL293:
			if yyr281 || yy2arr281 {
				if yyn293 {
					r.EncodeNil()
				} else {
					if yyq281[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[11] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if yyn293 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[12] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym295 := z.EncBinary()
						_ = yym295
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[12] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym296 := z.EncBinary()
						_ = yym296
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[13] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[13] {
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[14] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq281[14] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yysep281 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym299 := z.DecBinary()
	_ = yym299
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl300 := r.ReadMapStart()
			if yyl300 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl300, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl300 := r.ReadArrayStart()
			if yyl300 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl300, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys301Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys301Slc
	var yyhl301 bool = l >= 0
	for yyj301 := 0; ; yyj301++ {
		if yyhl301 {
			if yyj301 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys301Slc = r.DecodeBytes(yys301Slc, true, true)
		yys301 := string(yys301Slc)
		switch yys301 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv302 := &x.Capacity
				yyv302.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv314 := &x.AccessModes
				yym315 := z.DecBinary()
				_ = yym315
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv314), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys301)
		} // end switch yys301
	} // end for yyj301
	if !yyhl301 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj318 int
	var yyb318 bool
	var yyhl318 bool = l >= 0
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv319 := &x.Capacity
		yyv319.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv331 := &x.AccessModes
		yym332 := z.DecBinary()
		_ = yym332
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv331), d)
		}
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj318++
		if yyhl318 {
			yyb318 = yyj318 > l
		} else {
			yyb318 = r.CheckBreak()
		}
		if yyb318 {
			break
		}
		z.DecStructFieldNotFound(yyj318-1, "")
	}
	r.ReadEnd()
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym335 := z.EncBinary()
	_ = yym335
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym336 := z.DecBinary()
	_ = yym336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym337 := z.EncBinary()
		_ = yym337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep338 := !z.EncBinary()
			yy2arr338 := z.EncBasicHandle().StructToArray
			var yyq338 [3]bool
			_, _, _ = yysep338, yyq338, yy2arr338
			const yyr338 bool = false
			yyq338[0] = x.Phase != ""
			yyq338[1] = x.Message != ""
			yyq338[2] = x.Reason != ""
			if yyr338 || yy2arr338 {
				r.EncodeArrayStart(3)
			} else {
				var yynn338 int = 0
				for _, b := range yyq338 {
					if b {
						yynn338++
					}
				}
				r.EncodeMapStart(yynn338)
			}
			if yyr338 || yy2arr338 {
				if yyq338[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr338 || yy2arr338 {
				if yyq338[1] {
					yym341 := z.EncBinary()
					_ = yym341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[1] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym342 := z.EncBinary()
					_ = yym342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr338 || yy2arr338 {
				if yyq338[2] {
					yym344 := z.EncBinary()
					_ = yym344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym345 := z.EncBinary()
					_ = yym345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yysep338 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym346 := z.DecBinary()
	_ = yym346
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl347 := r.ReadMapStart()
			if yyl347 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl347, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl347 := r.ReadArrayStart()
			if yyl347 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl347, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys348Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys348Slc
	var yyhl348 bool = l >= 0
	for yyj348 := 0; ; yyj348++ {
		if yyhl348 {
			if yyj348 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys348Slc = r.DecodeBytes(yys348Slc, true, true)
		yys348 := string(yys348Slc)
		switch yys348 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys348)
		} // end switch yys348
	} // end for yyj348
	if !yyhl348 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj352 int
	var yyb352 bool
	var yyhl352 bool = l >= 0
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj352++
		if yyhl352 {
			yyb352 = yyj352 > l
		} else {
			yyb352 = r.CheckBreak()
		}
		if yyb352 {
			break
		}
		z.DecStructFieldNotFound(yyj352-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym356 := z.EncBinary()
		_ = yym356
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep357 := !z.EncBinary()
			yy2arr357 := z.EncBasicHandle().StructToArray
			var yyq357 [4]bool
			_, _, _ = yysep357, yyq357, yy2arr357
			const yyr357 bool = false
			yyq357[0] = x.Kind != ""
			yyq357[1] = x.APIVersion != ""
			yyq357[2] = true
			if yyr357 || yy2arr357 {
				r.EncodeArrayStart(4)
			} else {
				var yynn357 int = 1
				for _, b := range yyq357 {
					if b {
						yynn357++
					}
				}
				r.EncodeMapStart(yynn357)
			}
			if yyr357 || yy2arr357 {
				if yyq357[0] {
					yym359 := z.EncBinary()
					_ = yym359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym360 := z.EncBinary()
					_ = yym360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr357 || yy2arr357 {
				if yyq357[1] {
					yym362 := z.EncBinary()
					_ = yym362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym363 := z.EncBinary()
					_ = yym363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr357 || yy2arr357 {
				if yyq357[2] {
					yy365 := &x.ListMeta
					yym366 := z.EncBinary()
					_ = yym366
					if false {
					} else if z.HasExtensions() && z.EncExt(yy365) {
					} else {
						z.EncFallback(yy365)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq357[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy367 := &x.ListMeta
					yym368 := z.EncBinary()
					_ = yym368
					if false {
					} else if z.HasExtensions() && z.EncExt(yy367) {
					} else {
						z.EncFallback(yy367)
					}
				}
			}
			if yyr357 || yy2arr357 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym370 := z.EncBinary()
					_ = yym370
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yysep357 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym372 := z.DecBinary()
	_ = yym372
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl373 := r.ReadMapStart()
			if yyl373 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl373, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl373 := r.ReadArrayStart()
			if yyl373 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl373, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys374Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys374Slc
	var yyhl374 bool = l >= 0
	for yyj374 := 0; ; yyj374++ {
		if yyhl374 {
			if yyj374 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys374Slc = r.DecodeBytes(yys374Slc, true, true)
		yys374 := string(yys374Slc)
		switch yys374 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv377 := &x.ListMeta
				yym378 := z.DecBinary()
				_ = yym378
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv377) {
				} else {
					z.DecFallback(yyv377, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv379 := &x.Items
				yym380 := z.DecBinary()
				_ = yym380
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv379), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys374)
		} // end switch yys374
	} // end for yyj374
	if !yyhl374 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj381 int
	var yyb381 bool
	var yyhl381 bool = l >= 0
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv384 := &x.ListMeta
		yym385 := z.DecBinary()
		_ = yym385
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv384) {
		} else {
			z.DecFallback(yyv384, false)
		}
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv386 := &x.Items
		yym387 := z.DecBinary()
		_ = yym387
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv386), d)
		}
	}
	for {
		yyj381++
		if yyhl381 {
			yyb381 = yyj381 > l
		} else {
			yyb381 = r.CheckBreak()
		}
		if yyb381 {
			break
		}
		z.DecStructFieldNotFound(yyj381-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym388 := z.EncBinary()
		_ = yym388
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep389 := !z.EncBinary()
			yy2arr389 := z.EncBasicHandle().StructToArray
			var yyq389 [5]bool
			_, _, _ = yysep389, yyq389, yy2arr389
			const yyr389 bool = false
			yyq389[0] = x.Kind != ""
			yyq389[1] = x.APIVersion != ""
			yyq389[2] = true
			yyq389[3] = true
			yyq389[4] = true
			if yyr389 || yy2arr389 {
				r.EncodeArrayStart(5)
			} else {
				var yynn389 int = 0
				for _, b := range yyq389 {
					if b {
						yynn389++
					}
				}
				r.EncodeMapStart(yynn389)
			}
			if yyr389 || yy2arr389 {
				if yyq389[0] {
					yym391 := z.EncBinary()
					_ = yym391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym392 := z.EncBinary()
					_ = yym392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[1] {
					yym394 := z.EncBinary()
					_ = yym394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[2] {
					yy397 := &x.ObjectMeta
					yy397.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy398 := &x.ObjectMeta
					yy398.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[3] {
					yy400 := &x.Spec
					yy400.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy401 := &x.Spec
					yy401.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[4] {
					yy403 := &x.Status
					yy403.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy404 := &x.Status
					yy404.CodecEncodeSelf(e)
				}
			}
			if yysep389 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym405 := z.DecBinary()
	_ = yym405
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl406 := r.ReadMapStart()
			if yyl406 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl406, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl406 := r.ReadArrayStart()
			if yyl406 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl406, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys407Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys407Slc
	var yyhl407 bool = l >= 0
	for yyj407 := 0; ; yyj407++ {
		if yyhl407 {
			if yyj407 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys407Slc = r.DecodeBytes(yys407Slc, true, true)
		yys407 := string(yys407Slc)
		switch yys407 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv410 := &x.ObjectMeta
				yyv410.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv411 := &x.Spec
				yyv411.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv412 := &x.Status
				yyv412.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys407)
		} // end switch yys407
	} // end for yyj407
	if !yyhl407 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj413 int
	var yyb413 bool
	var yyhl413 bool = l >= 0
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv416 := &x.ObjectMeta
		yyv416.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv417 := &x.Spec
		yyv417.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv418 := &x.Status
		yyv418.CodecDecodeSelf(d)
	}
	for {
		yyj413++
		if yyhl413 {
			yyb413 = yyj413 > l
		} else {
			yyb413 = r.CheckBreak()
		}
		if yyb413 {
			break
		}
		z.DecStructFieldNotFound(yyj413-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym419 := z.EncBinary()
		_ = yym419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep420 := !z.EncBinary()
			yy2arr420 := z.EncBasicHandle().StructToArray
			var yyq420 [4]bool
			_, _, _ = yysep420, yyq420, yy2arr420
			const yyr420 bool = false
			yyq420[0] = x.Kind != ""
			yyq420[1] = x.APIVersion != ""
			yyq420[2] = true
			if yyr420 || yy2arr420 {
				r.EncodeArrayStart(4)
			} else {
				var yynn420 int = 1
				for _, b := range yyq420 {
					if b {
						yynn420++
					}
				}
				r.EncodeMapStart(yynn420)
			}
			if yyr420 || yy2arr420 {
				if yyq420[0] {
					yym422 := z.EncBinary()
					_ = yym422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym423 := z.EncBinary()
					_ = yym423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr420 || yy2arr420 {
				if yyq420[1] {
					yym425 := z.EncBinary()
					_ = yym425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr420 || yy2arr420 {
				if yyq420[2] {
					yy428 := &x.ListMeta
					yym429 := z.EncBinary()
					_ = yym429
					if false {
					} else if z.HasExtensions() && z.EncExt(yy428) {
					} else {
						z.EncFallback(yy428)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq420[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy430 := &x.ListMeta
					yym431 := z.EncBinary()
					_ = yym431
					if false {
					} else if z.HasExtensions() && z.EncExt(yy430) {
					} else {
						z.EncFallback(yy430)
					}
				}
			}
			if yyr420 || yy2arr420 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym433 := z.EncBinary()
					_ = yym433
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yysep420 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym435 := z.DecBinary()
	_ = yym435
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl436 := r.ReadMapStart()
			if yyl436 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl436, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl436 := r.ReadArrayStart()
			if yyl436 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl436, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys437Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys437Slc
	var yyhl437 bool = l >= 0
	for yyj437 := 0; ; yyj437++ {
		if yyhl437 {
			if yyj437 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys437Slc = r.DecodeBytes(yys437Slc, true, true)
		yys437 := string(yys437Slc)
		switch yys437 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv440 := &x.ListMeta
				yym441 := z.DecBinary()
				_ = yym441
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv440) {
				} else {
					z.DecFallback(yyv440, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv442 := &x.Items
				yym443 := z.DecBinary()
				_ = yym443
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv442), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys437)
		} // end switch yys437
	} // end for yyj437
	if !yyhl437 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj444 int
	var yyb444 bool
	var yyhl444 bool = l >= 0
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv447 := &x.ListMeta
		yym448 := z.DecBinary()
		_ = yym448
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv447) {
		} else {
			z.DecFallback(yyv447, false)
		}
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv449 := &x.Items
		yym450 := z.DecBinary()
		_ = yym450
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv449), d)
		}
	}
	for {
		yyj444++
		if yyhl444 {
			yyb444 = yyj444 > l
		} else {
			yyb444 = r.CheckBreak()
		}
		if yyb444 {
			break
		}
		z.DecStructFieldNotFound(yyj444-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym451 := z.EncBinary()
		_ = yym451
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep452 := !z.EncBinary()
			yy2arr452 := z.EncBasicHandle().StructToArray
			var yyq452 [3]bool
			_, _, _ = yysep452, yyq452, yy2arr452
			const yyr452 bool = false
			yyq452[0] = len(x.AccessModes) != 0
			yyq452[1] = true
			yyq452[2] = x.VolumeName != ""
			if yyr452 || yy2arr452 {
				r.EncodeArrayStart(3)
			} else {
				var yynn452 int = 0
				for _, b := range yyq452 {
					if b {
						yynn452++
					}
				}
				r.EncodeMapStart(yynn452)
			}
			if yyr452 || yy2arr452 {
				if yyq452[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym454 := z.EncBinary()
						_ = yym454
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[0] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym455 := z.EncBinary()
						_ = yym455
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr452 || yy2arr452 {
				if yyq452[1] {
					yy457 := &x.Resources
					yy457.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[1] {
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					yy458 := &x.Resources
					yy458.CodecEncodeSelf(e)
				}
			}
			if yyr452 || yy2arr452 {
				if yyq452[2] {
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq452[2] {
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					yym461 := z.EncBinary()
					_ = yym461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yysep452 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym462 := z.DecBinary()
	_ = yym462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl463 := r.ReadMapStart()
			if yyl463 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl463, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl463 := r.ReadArrayStart()
			if yyl463 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl463, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys464Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys464Slc
	var yyhl464 bool = l >= 0
	for yyj464 := 0; ; yyj464++ {
		if yyhl464 {
			if yyj464 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys464Slc = r.DecodeBytes(yys464Slc, true, true)
		yys464 := string(yys464Slc)
		switch yys464 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv465 := &x.AccessModes
				yym466 := z.DecBinary()
				_ = yym466
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv465), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv467 := &x.Resources
				yyv467.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys464)
		} // end switch yys464
	} // end for yyj464
	if !yyhl464 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj469 int
	var yyb469 bool
	var yyhl469 bool = l >= 0
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv470 := &x.AccessModes
		yym471 := z.DecBinary()
		_ = yym471
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv470), d)
		}
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv472 := &x.Resources
		yyv472.CodecDecodeSelf(d)
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj469++
		if yyhl469 {
			yyb469 = yyj469 > l
		} else {
			yyb469 = r.CheckBreak()
		}
		if yyb469 {
			break
		}
		z.DecStructFieldNotFound(yyj469-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym474 := z.EncBinary()
		_ = yym474
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep475 := !z.EncBinary()
			yy2arr475 := z.EncBasicHandle().StructToArray
			var yyq475 [3]bool
			_, _, _ = yysep475, yyq475, yy2arr475
			const yyr475 bool = false
			yyq475[0] = x.Phase != ""
			yyq475[1] = len(x.AccessModes) != 0
			yyq475[2] = len(x.Capacity) != 0
			if yyr475 || yy2arr475 {
				r.EncodeArrayStart(3)
			} else {
				var yynn475 int = 0
				for _, b := range yyq475 {
					if b {
						yynn475++
					}
				}
				r.EncodeMapStart(yynn475)
			}
			if yyr475 || yy2arr475 {
				if yyq475[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq475[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr475 || yy2arr475 {
				if yyq475[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym478 := z.EncBinary()
						_ = yym478
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[1] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym479 := z.EncBinary()
						_ = yym479
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr475 || yy2arr475 {
				if yyq475[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[2] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yysep475 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym481 := z.DecBinary()
	_ = yym481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl482 := r.ReadMapStart()
			if yyl482 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl482, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl482 := r.ReadArrayStart()
			if yyl482 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys483Slc
	var yyhl483 bool = l >= 0
	for yyj483 := 0; ; yyj483++ {
		if yyhl483 {
			if yyj483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys483Slc = r.DecodeBytes(yys483Slc, true, true)
		yys483 := string(yys483Slc)
		switch yys483 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv485 := &x.AccessModes
				yym486 := z.DecBinary()
				_ = yym486
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv485), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv487 := &x.Capacity
				yyv487.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys483)
		} // end switch yys483
	} // end for yyj483
	if !yyhl483 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj488 int
	var yyb488 bool
	var yyhl488 bool = l >= 0
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv490 := &x.AccessModes
		yym491 := z.DecBinary()
		_ = yym491
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv490), d)
		}
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv492 := &x.Capacity
		yyv492.CodecDecodeSelf(d)
	}
	for {
		yyj488++
		if yyhl488 {
			yyb488 = yyj488 > l
		} else {
			yyb488 = r.CheckBreak()
		}
		if yyb488 {
			break
		}
		z.DecStructFieldNotFound(yyj488-1, "")
	}
	r.ReadEnd()
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym493 := z.EncBinary()
	_ = yym493
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym494 := z.DecBinary()
	_ = yym494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym495 := z.EncBinary()
	_ = yym495
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym496 := z.DecBinary()
	_ = yym496
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym497 := z.EncBinary()
	_ = yym497
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym498 := z.DecBinary()
	_ = yym498
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym499 := z.EncBinary()
		_ = yym499
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep500 := !z.EncBinary()
			yy2arr500 := z.EncBasicHandle().StructToArray
			var yyq500 [1]bool
			_, _, _ = yysep500, yyq500, yy2arr500
			const yyr500 bool = false
			if yyr500 || yy2arr500 {
				r.EncodeArrayStart(1)
			} else {
				var yynn500 int = 1
				for _, b := range yyq500 {
					if b {
						yynn500++
					}
				}
				r.EncodeMapStart(yynn500)
			}
			if yyr500 || yy2arr500 {
				yym502 := z.EncBinary()
				_ = yym502
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym503 := z.EncBinary()
				_ = yym503
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yysep500 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym504 := z.DecBinary()
	_ = yym504
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl505 := r.ReadMapStart()
			if yyl505 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl505, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl505 := r.ReadArrayStart()
			if yyl505 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl505, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys506Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys506Slc
	var yyhl506 bool = l >= 0
	for yyj506 := 0; ; yyj506++ {
		if yyhl506 {
			if yyj506 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys506Slc = r.DecodeBytes(yys506Slc, true, true)
		yys506 := string(yys506Slc)
		switch yys506 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys506)
		} // end switch yys506
	} // end for yyj506
	if !yyhl506 {
		r.ReadEnd()
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj508 int
	var yyb508 bool
	var yyhl508 bool = l >= 0
	yyj508++
	if yyhl508 {
		yyb508 = yyj508 > l
	} else {
		yyb508 = r.CheckBreak()
	}
	if yyb508 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj508++
		if yyhl508 {
			yyb508 = yyj508 > l
		} else {
			yyb508 = r.CheckBreak()
		}
		if yyb508 {
			break
		}
		z.DecStructFieldNotFound(yyj508-1, "")
	}
	r.ReadEnd()
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym510 := z.EncBinary()
		_ = yym510
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep511 := !z.EncBinary()
			yy2arr511 := z.EncBasicHandle().StructToArray
			var yyq511 [1]bool
			_, _, _ = yysep511, yyq511, yy2arr511
			const yyr511 bool = false
			yyq511[0] = x.Medium != ""
			if yyr511 || yy2arr511 {
				r.EncodeArrayStart(1)
			} else {
				var yynn511 int = 0
				for _, b := range yyq511 {
					if b {
						yynn511++
					}
				}
				r.EncodeMapStart(yynn511)
			}
			if yyr511 || yy2arr511 {
				if yyq511[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq511[0] {
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yysep511 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym513 := z.DecBinary()
	_ = yym513
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl514 := r.ReadMapStart()
			if yyl514 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl514, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl514 := r.ReadArrayStart()
			if yyl514 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl514, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys515Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys515Slc
	var yyhl515 bool = l >= 0
	for yyj515 := 0; ; yyj515++ {
		if yyhl515 {
			if yyj515 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys515Slc = r.DecodeBytes(yys515Slc, true, true)
		yys515 := string(yys515Slc)
		switch yys515 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys515)
		} // end switch yys515
	} // end for yyj515
	if !yyhl515 {
		r.ReadEnd()
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj517 int
	var yyb517 bool
	var yyhl517 bool = l >= 0
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj517++
		if yyhl517 {
			yyb517 = yyj517 > l
		} else {
			yyb517 = r.CheckBreak()
		}
		if yyb517 {
			break
		}
		z.DecStructFieldNotFound(yyj517-1, "")
	}
	r.ReadEnd()
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym519 := z.EncBinary()
		_ = yym519
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep520 := !z.EncBinary()
			yy2arr520 := z.EncBasicHandle().StructToArray
			var yyq520 [3]bool
			_, _, _ = yysep520, yyq520, yy2arr520
			const yyr520 bool = false
			yyq520[2] = x.ReadOnly != false
			if yyr520 || yy2arr520 {
				r.EncodeArrayStart(3)
			} else {
				var yynn520 int = 2
				for _, b := range yyq520 {
					if b {
						yynn520++
					}
				}
				r.EncodeMapStart(yynn520)
			}
			if yyr520 || yy2arr520 {
				yym522 := z.EncBinary()
				_ = yym522
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				yym523 := z.EncBinary()
				_ = yym523
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr520 || yy2arr520 {
				yym525 := z.EncBinary()
				_ = yym525
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym526 := z.EncBinary()
				_ = yym526
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr520 || yy2arr520 {
				if yyq520[2] {
					yym528 := z.EncBinary()
					_ = yym528
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq520[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym529 := z.EncBinary()
					_ = yym529
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep520 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym530 := z.DecBinary()
	_ = yym530
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl531 := r.ReadMapStart()
			if yyl531 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl531, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl531 := r.ReadArrayStart()
			if yyl531 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl531, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys532Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys532Slc
	var yyhl532 bool = l >= 0
	for yyj532 := 0; ; yyj532++ {
		if yyhl532 {
			if yyj532 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys532Slc = r.DecodeBytes(yys532Slc, true, true)
		yys532 := string(yys532Slc)
		switch yys532 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys532)
		} // end switch yys532
	} // end for yyj532
	if !yyhl532 {
		r.ReadEnd()
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj536 int
	var yyb536 bool
	var yyhl536 bool = l >= 0
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj536++
		if yyhl536 {
			yyb536 = yyj536 > l
		} else {
			yyb536 = r.CheckBreak()
		}
		if yyb536 {
			break
		}
		z.DecStructFieldNotFound(yyj536-1, "")
	}
	r.ReadEnd()
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym540 := z.EncBinary()
	_ = yym540
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym541 := z.DecBinary()
	_ = yym541
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym542 := z.EncBinary()
		_ = yym542
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep543 := !z.EncBinary()
			yy2arr543 := z.EncBasicHandle().StructToArray
			var yyq543 [8]bool
			_, _, _ = yysep543, yyq543, yy2arr543
			const yyr543 bool = false
			yyq543[2] = x.FSType != ""
			yyq543[7] = x.ReadOnly != false
			if yyr543 || yy2arr543 {
				r.EncodeArrayStart(8)
			} else {
				var yynn543 int = 6
				for _, b := range yyq543 {
					if b {
						yynn543++
					}
				}
				r.EncodeMapStart(yynn543)
			}
			if yyr543 || yy2arr543 {
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym545 := z.EncBinary()
					_ = yym545
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym546 := z.EncBinary()
					_ = yym546
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr543 || yy2arr543 {
				yym548 := z.EncBinary()
				_ = yym548
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym549 := z.EncBinary()
				_ = yym549
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr543 || yy2arr543 {
				if yyq543[2] {
					yym551 := z.EncBinary()
					_ = yym551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq543[2] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym552 := z.EncBinary()
					_ = yym552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr543 || yy2arr543 {
				yym554 := z.EncBinary()
				_ = yym554
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				yym555 := z.EncBinary()
				_ = yym555
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr543 || yy2arr543 {
				yym557 := z.EncBinary()
				_ = yym557
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				yym558 := z.EncBinary()
				_ = yym558
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr543 || yy2arr543 {
				yym560 := z.EncBinary()
				_ = yym560
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				yym561 := z.EncBinary()
				_ = yym561
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr543 || yy2arr543 {
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr543 || yy2arr543 {
				if yyq543[7] {
					yym564 := z.EncBinary()
					_ = yym564
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq543[7] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym565 := z.EncBinary()
					_ = yym565
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep543 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym566 := z.DecBinary()
	_ = yym566
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl567 := r.ReadMapStart()
			if yyl567 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl567, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl567 := r.ReadArrayStart()
			if yyl567 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl567, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys568Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys568Slc
	var yyhl568 bool = l >= 0
	for yyj568 := 0; ; yyj568++ {
		if yyhl568 {
			if yyj568 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys568Slc = r.DecodeBytes(yys568Slc, true, true)
		yys568 := string(yys568Slc)
		switch yys568 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv569 := &x.CephMonitors
				yym570 := z.DecBinary()
				_ = yym570
				if false {
				} else {
					z.F.DecSliceStringX(yyv569, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys568)
		} // end switch yys568
	} // end for yyj568
	if !yyhl568 {
		r.ReadEnd()
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj578 int
	var yyb578 bool
	var yyhl578 bool = l >= 0
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv579 := &x.CephMonitors
		yym580 := z.DecBinary()
		_ = yym580
		if false {
		} else {
			z.F.DecSliceStringX(yyv579, false, d)
		}
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj578++
		if yyhl578 {
			yyb578 = yyj578 > l
		} else {
			yyb578 = r.CheckBreak()
		}
		if yyb578 {
			break
		}
		z.DecStructFieldNotFound(yyj578-1, "")
	}
	r.ReadEnd()
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym588 := z.EncBinary()
		_ = yym588
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep589 := !z.EncBinary()
			yy2arr589 := z.EncBasicHandle().StructToArray
			var yyq589 [3]bool
			_, _, _ = yysep589, yyq589, yy2arr589
			const yyr589 bool = false
			yyq589[1] = x.FSType != ""
			yyq589[2] = x.ReadOnly != false
			if yyr589 || yy2arr589 {
				r.EncodeArrayStart(3)
			} else {
				var yynn589 int = 1
				for _, b := range yyq589 {
					if b {
						yynn589++
					}
				}
				r.EncodeMapStart(yynn589)
			}
			if yyr589 || yy2arr589 {
				yym591 := z.EncBinary()
				_ = yym591
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				yym592 := z.EncBinary()
				_ = yym592
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr589 || yy2arr589 {
				if yyq589[1] {
					yym594 := z.EncBinary()
					_ = yym594
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq589[1] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym595 := z.EncBinary()
					_ = yym595
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr589 || yy2arr589 {
				if yyq589[2] {
					yym597 := z.EncBinary()
					_ = yym597
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq589[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym598 := z.EncBinary()
					_ = yym598
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep589 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym599 := z.DecBinary()
	_ = yym599
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl600 := r.ReadMapStart()
			if yyl600 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl600, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl600 := r.ReadArrayStart()
			if yyl600 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl600, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys601Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys601Slc
	var yyhl601 bool = l >= 0
	for yyj601 := 0; ; yyj601++ {
		if yyhl601 {
			if yyj601 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys601Slc = r.DecodeBytes(yys601Slc, true, true)
		yys601 := string(yys601Slc)
		switch yys601 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys601)
		} // end switch yys601
	} // end for yyj601
	if !yyhl601 {
		r.ReadEnd()
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj605 int
	var yyb605 bool
	var yyhl605 bool = l >= 0
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj605++
		if yyhl605 {
			yyb605 = yyj605 > l
		} else {
			yyb605 = r.CheckBreak()
		}
		if yyb605 {
			break
		}
		z.DecStructFieldNotFound(yyj605-1, "")
	}
	r.ReadEnd()
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym609 := z.EncBinary()
		_ = yym609
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep610 := !z.EncBinary()
			yy2arr610 := z.EncBasicHandle().StructToArray
			var yyq610 [5]bool
			_, _, _ = yysep610, yyq610, yy2arr610
			const yyr610 bool = false
			yyq610[1] = x.User != ""
			yyq610[2] = x.SecretFile != ""
			yyq610[3] = x.SecretRef != nil
			yyq610[4] = x.ReadOnly != false
			if yyr610 || yy2arr610 {
				r.EncodeArrayStart(5)
			} else {
				var yynn610 int = 1
				for _, b := range yyq610 {
					if b {
						yynn610++
					}
				}
				r.EncodeMapStart(yynn610)
			}
			if yyr610 || yy2arr610 {
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym612 := z.EncBinary()
					_ = yym612
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym613 := z.EncBinary()
					_ = yym613
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yyq610[1] {
					yym615 := z.EncBinary()
					_ = yym615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq610[1] {
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					yym616 := z.EncBinary()
					_ = yym616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yyq610[2] {
					yym618 := z.EncBinary()
					_ = yym618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq610[2] {
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yyq610[3] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq610[3] {
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yyq610[4] {
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq610[4] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym623 := z.EncBinary()
					_ = yym623
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep610 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym624 := z.DecBinary()
	_ = yym624
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl625 := r.ReadMapStart()
			if yyl625 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl625, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl625 := r.ReadArrayStart()
			if yyl625 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl625, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys626Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys626Slc
	var yyhl626 bool = l >= 0
	for yyj626 := 0; ; yyj626++ {
		if yyhl626 {
			if yyj626 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys626Slc = r.DecodeBytes(yys626Slc, true, true)
		yys626 := string(yys626Slc)
		switch yys626 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv627 := &x.Monitors
				yym628 := z.DecBinary()
				_ = yym628
				if false {
				} else {
					z.F.DecSliceStringX(yyv627, false, d)
				}
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys626)
		} // end switch yys626
	} // end for yyj626
	if !yyhl626 {
		r.ReadEnd()
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj633 int
	var yyb633 bool
	var yyhl633 bool = l >= 0
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv634 := &x.Monitors
		yym635 := z.DecBinary()
		_ = yym635
		if false {
		} else {
			z.F.DecSliceStringX(yyv634, false, d)
		}
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj633++
		if yyhl633 {
			yyb633 = yyj633 > l
		} else {
			yyb633 = r.CheckBreak()
		}
		if yyb633 {
			break
		}
		z.DecStructFieldNotFound(yyj633-1, "")
	}
	r.ReadEnd()
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym640 := z.EncBinary()
		_ = yym640
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep641 := !z.EncBinary()
			yy2arr641 := z.EncBasicHandle().StructToArray
			var yyq641 [1]bool
			_, _, _ = yysep641, yyq641, yy2arr641
			const yyr641 bool = false
			if yyr641 || yy2arr641 {
				r.EncodeArrayStart(1)
			} else {
				var yynn641 int = 1
				for _, b := range yyq641 {
					if b {
						yynn641++
					}
				}
				r.EncodeMapStart(yynn641)
			}
			if yyr641 || yy2arr641 {
				yym643 := z.EncBinary()
				_ = yym643
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				yym644 := z.EncBinary()
				_ = yym644
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yysep641 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym645 := z.DecBinary()
	_ = yym645
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl646 := r.ReadMapStart()
			if yyl646 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl646, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl646 := r.ReadArrayStart()
			if yyl646 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl646, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys647Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys647Slc
	var yyhl647 bool = l >= 0
	for yyj647 := 0; ; yyj647++ {
		if yyhl647 {
			if yyj647 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys647Slc = r.DecodeBytes(yys647Slc, true, true)
		yys647 := string(yys647Slc)
		switch yys647 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys647)
		} // end switch yys647
	} // end for yyj647
	if !yyhl647 {
		r.ReadEnd()
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj649 int
	var yyb649 bool
	var yyhl649 bool = l >= 0
	yyj649++
	if yyhl649 {
		yyb649 = yyj649 > l
	} else {
		yyb649 = r.CheckBreak()
	}
	if yyb649 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj649++
		if yyhl649 {
			yyb649 = yyj649 > l
		} else {
			yyb649 = r.CheckBreak()
		}
		if yyb649 {
			break
		}
		z.DecStructFieldNotFound(yyj649-1, "")
	}
	r.ReadEnd()
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym651 := z.EncBinary()
	_ = yym651
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym652 := z.DecBinary()
	_ = yym652
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym653 := z.EncBinary()
		_ = yym653
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep654 := !z.EncBinary()
			yy2arr654 := z.EncBasicHandle().StructToArray
			var yyq654 [4]bool
			_, _, _ = yysep654, yyq654, yy2arr654
			const yyr654 bool = false
			yyq654[2] = x.Partition != 0
			yyq654[3] = x.ReadOnly != false
			if yyr654 || yy2arr654 {
				r.EncodeArrayStart(4)
			} else {
				var yynn654 int = 2
				for _, b := range yyq654 {
					if b {
						yynn654++
					}
				}
				r.EncodeMapStart(yynn654)
			}
			if yyr654 || yy2arr654 {
				yym656 := z.EncBinary()
				_ = yym656
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				yym657 := z.EncBinary()
				_ = yym657
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr654 || yy2arr654 {
				yym659 := z.EncBinary()
				_ = yym659
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym660 := z.EncBinary()
				_ = yym660
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr654 || yy2arr654 {
				if yyq654[2] {
					yym662 := z.EncBinary()
					_ = yym662
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq654[2] {
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					yym663 := z.EncBinary()
					_ = yym663
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr654 || yy2arr654 {
				if yyq654[3] {
					yym665 := z.EncBinary()
					_ = yym665
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq654[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym666 := z.EncBinary()
					_ = yym666
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep654 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym667 := z.DecBinary()
	_ = yym667
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl668 := r.ReadMapStart()
			if yyl668 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl668, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl668 := r.ReadArrayStart()
			if yyl668 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl668, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys669Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys669Slc
	var yyhl669 bool = l >= 0
	for yyj669 := 0; ; yyj669++ {
		if yyhl669 {
			if yyj669 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys669Slc = r.DecodeBytes(yys669Slc, true, true)
		yys669 := string(yys669Slc)
		switch yys669 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys669)
		} // end switch yys669
	} // end for yyj669
	if !yyhl669 {
		r.ReadEnd()
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj674 int
	var yyb674 bool
	var yyhl674 bool = l >= 0
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj674++
		if yyhl674 {
			yyb674 = yyj674 > l
		} else {
			yyb674 = r.CheckBreak()
		}
		if yyb674 {
			break
		}
		z.DecStructFieldNotFound(yyj674-1, "")
	}
	r.ReadEnd()
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym679 := z.EncBinary()
		_ = yym679
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep680 := !z.EncBinary()
			yy2arr680 := z.EncBasicHandle().StructToArray
			var yyq680 [4]bool
			_, _, _ = yysep680, yyq680, yy2arr680
			const yyr680 bool = false
			yyq680[2] = x.Partition != 0
			yyq680[3] = x.ReadOnly != false
			if yyr680 || yy2arr680 {
				r.EncodeArrayStart(4)
			} else {
				var yynn680 int = 2
				for _, b := range yyq680 {
					if b {
						yynn680++
					}
				}
				r.EncodeMapStart(yynn680)
			}
			if yyr680 || yy2arr680 {
				yym682 := z.EncBinary()
				_ = yym682
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				yym683 := z.EncBinary()
				_ = yym683
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr680 || yy2arr680 {
				yym685 := z.EncBinary()
				_ = yym685
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym686 := z.EncBinary()
				_ = yym686
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr680 || yy2arr680 {
				if yyq680[2] {
					yym688 := z.EncBinary()
					_ = yym688
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq680[2] {
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					yym689 := z.EncBinary()
					_ = yym689
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr680 || yy2arr680 {
				if yyq680[3] {
					yym691 := z.EncBinary()
					_ = yym691
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq680[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym692 := z.EncBinary()
					_ = yym692
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep680 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym693 := z.DecBinary()
	_ = yym693
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl694 := r.ReadMapStart()
			if yyl694 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl694, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl694 := r.ReadArrayStart()
			if yyl694 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl694, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys695Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys695Slc
	var yyhl695 bool = l >= 0
	for yyj695 := 0; ; yyj695++ {
		if yyhl695 {
			if yyj695 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys695Slc = r.DecodeBytes(yys695Slc, true, true)
		yys695 := string(yys695Slc)
		switch yys695 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys695)
		} // end switch yys695
	} // end for yyj695
	if !yyhl695 {
		r.ReadEnd()
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj700 int
	var yyb700 bool
	var yyhl700 bool = l >= 0
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj700++
		if yyhl700 {
			yyb700 = yyj700 > l
		} else {
			yyb700 = r.CheckBreak()
		}
		if yyb700 {
			break
		}
		z.DecStructFieldNotFound(yyj700-1, "")
	}
	r.ReadEnd()
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym705 := z.EncBinary()
		_ = yym705
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep706 := !z.EncBinary()
			yy2arr706 := z.EncBasicHandle().StructToArray
			var yyq706 [2]bool
			_, _, _ = yysep706, yyq706, yy2arr706
			const yyr706 bool = false
			if yyr706 || yy2arr706 {
				r.EncodeArrayStart(2)
			} else {
				var yynn706 int = 2
				for _, b := range yyq706 {
					if b {
						yynn706++
					}
				}
				r.EncodeMapStart(yynn706)
			}
			if yyr706 || yy2arr706 {
				yym708 := z.EncBinary()
				_ = yym708
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				yym709 := z.EncBinary()
				_ = yym709
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr706 || yy2arr706 {
				yym711 := z.EncBinary()
				_ = yym711
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("revision"))
				yym712 := z.EncBinary()
				_ = yym712
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			}
			if yysep706 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym713 := z.DecBinary()
	_ = yym713
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl714 := r.ReadMapStart()
			if yyl714 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl714, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl714 := r.ReadArrayStart()
			if yyl714 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl714, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys715Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys715Slc
	var yyhl715 bool = l >= 0
	for yyj715 := 0; ; yyj715++ {
		if yyhl715 {
			if yyj715 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys715Slc = r.DecodeBytes(yys715Slc, true, true)
		yys715 := string(yys715Slc)
		switch yys715 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys715)
		} // end switch yys715
	} // end for yyj715
	if !yyhl715 {
		r.ReadEnd()
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj718 int
	var yyb718 bool
	var yyhl718 bool = l >= 0
	yyj718++
	if yyhl718 {
		yyb718 = yyj718 > l
	} else {
		yyb718 = r.CheckBreak()
	}
	if yyb718 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj718++
	if yyhl718 {
		yyb718 = yyj718 > l
	} else {
		yyb718 = r.CheckBreak()
	}
	if yyb718 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	for {
		yyj718++
		if yyhl718 {
			yyb718 = yyj718 > l
		} else {
			yyb718 = r.CheckBreak()
		}
		if yyb718 {
			break
		}
		z.DecStructFieldNotFound(yyj718-1, "")
	}
	r.ReadEnd()
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym721 := z.EncBinary()
		_ = yym721
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep722 := !z.EncBinary()
			yy2arr722 := z.EncBasicHandle().StructToArray
			var yyq722 [1]bool
			_, _, _ = yysep722, yyq722, yy2arr722
			const yyr722 bool = false
			if yyr722 || yy2arr722 {
				r.EncodeArrayStart(1)
			} else {
				var yynn722 int = 1
				for _, b := range yyq722 {
					if b {
						yynn722++
					}
				}
				r.EncodeMapStart(yynn722)
			}
			if yyr722 || yy2arr722 {
				yym724 := z.EncBinary()
				_ = yym724
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				yym725 := z.EncBinary()
				_ = yym725
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yysep722 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym726 := z.DecBinary()
	_ = yym726
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl727 := r.ReadMapStart()
			if yyl727 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl727, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl727 := r.ReadArrayStart()
			if yyl727 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl727, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys728Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys728Slc
	var yyhl728 bool = l >= 0
	for yyj728 := 0; ; yyj728++ {
		if yyhl728 {
			if yyj728 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys728Slc = r.DecodeBytes(yys728Slc, true, true)
		yys728 := string(yys728Slc)
		switch yys728 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys728)
		} // end switch yys728
	} // end for yyj728
	if !yyhl728 {
		r.ReadEnd()
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj730 int
	var yyb730 bool
	var yyhl730 bool = l >= 0
	yyj730++
	if yyhl730 {
		yyb730 = yyj730 > l
	} else {
		yyb730 = r.CheckBreak()
	}
	if yyb730 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj730++
		if yyhl730 {
			yyb730 = yyj730 > l
		} else {
			yyb730 = r.CheckBreak()
		}
		if yyb730 {
			break
		}
		z.DecStructFieldNotFound(yyj730-1, "")
	}
	r.ReadEnd()
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym732 := z.EncBinary()
		_ = yym732
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep733 := !z.EncBinary()
			yy2arr733 := z.EncBasicHandle().StructToArray
			var yyq733 [3]bool
			_, _, _ = yysep733, yyq733, yy2arr733
			const yyr733 bool = false
			yyq733[2] = x.ReadOnly != false
			if yyr733 || yy2arr733 {
				r.EncodeArrayStart(3)
			} else {
				var yynn733 int = 2
				for _, b := range yyq733 {
					if b {
						yynn733++
					}
				}
				r.EncodeMapStart(yynn733)
			}
			if yyr733 || yy2arr733 {
				yym735 := z.EncBinary()
				_ = yym735
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				yym736 := z.EncBinary()
				_ = yym736
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr733 || yy2arr733 {
				yym738 := z.EncBinary()
				_ = yym738
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym739 := z.EncBinary()
				_ = yym739
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr733 || yy2arr733 {
				if yyq733[2] {
					yym741 := z.EncBinary()
					_ = yym741
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq733[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym742 := z.EncBinary()
					_ = yym742
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep733 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym743 := z.DecBinary()
	_ = yym743
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl744 := r.ReadMapStart()
			if yyl744 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl744, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl744 := r.ReadArrayStart()
			if yyl744 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl744, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys745Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys745Slc
	var yyhl745 bool = l >= 0
	for yyj745 := 0; ; yyj745++ {
		if yyhl745 {
			if yyj745 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys745Slc = r.DecodeBytes(yys745Slc, true, true)
		yys745 := string(yys745Slc)
		switch yys745 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys745)
		} // end switch yys745
	} // end for yyj745
	if !yyhl745 {
		r.ReadEnd()
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj749 int
	var yyb749 bool
	var yyhl749 bool = l >= 0
	yyj749++
	if yyhl749 {
		yyb749 = yyj749 > l
	} else {
		yyb749 = r.CheckBreak()
	}
	if yyb749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj749++
	if yyhl749 {
		yyb749 = yyj749 > l
	} else {
		yyb749 = r.CheckBreak()
	}
	if yyb749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj749++
	if yyhl749 {
		yyb749 = yyj749 > l
	} else {
		yyb749 = r.CheckBreak()
	}
	if yyb749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj749++
		if yyhl749 {
			yyb749 = yyj749 > l
		} else {
			yyb749 = r.CheckBreak()
		}
		if yyb749 {
			break
		}
		z.DecStructFieldNotFound(yyj749-1, "")
	}
	r.ReadEnd()
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym753 := z.EncBinary()
		_ = yym753
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep754 := !z.EncBinary()
			yy2arr754 := z.EncBasicHandle().StructToArray
			var yyq754 [5]bool
			_, _, _ = yysep754, yyq754, yy2arr754
			const yyr754 bool = false
			yyq754[4] = x.ReadOnly != false
			if yyr754 || yy2arr754 {
				r.EncodeArrayStart(5)
			} else {
				var yynn754 int = 4
				for _, b := range yyq754 {
					if b {
						yynn754++
					}
				}
				r.EncodeMapStart(yynn754)
			}
			if yyr754 || yy2arr754 {
				yym756 := z.EncBinary()
				_ = yym756
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				yym757 := z.EncBinary()
				_ = yym757
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr754 || yy2arr754 {
				yym759 := z.EncBinary()
				_ = yym759
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				yym760 := z.EncBinary()
				_ = yym760
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr754 || yy2arr754 {
				yym762 := z.EncBinary()
				_ = yym762
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				yym763 := z.EncBinary()
				_ = yym763
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr754 || yy2arr754 {
				yym765 := z.EncBinary()
				_ = yym765
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym766 := z.EncBinary()
				_ = yym766
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr754 || yy2arr754 {
				if yyq754[4] {
					yym768 := z.EncBinary()
					_ = yym768
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq754[4] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym769 := z.EncBinary()
					_ = yym769
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep754 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym770 := z.DecBinary()
	_ = yym770
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl771 := r.ReadMapStart()
			if yyl771 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl771, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl771 := r.ReadArrayStart()
			if yyl771 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl771, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys772Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys772Slc
	var yyhl772 bool = l >= 0
	for yyj772 := 0; ; yyj772++ {
		if yyhl772 {
			if yyj772 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys772Slc = r.DecodeBytes(yys772Slc, true, true)
		yys772 := string(yys772Slc)
		switch yys772 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys772)
		} // end switch yys772
	} // end for yyj772
	if !yyhl772 {
		r.ReadEnd()
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj778 int
	var yyb778 bool
	var yyhl778 bool = l >= 0
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj778++
		if yyhl778 {
			yyb778 = yyj778 > l
		} else {
			yyb778 = r.CheckBreak()
		}
		if yyb778 {
			break
		}
		z.DecStructFieldNotFound(yyj778-1, "")
	}
	r.ReadEnd()
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym784 := z.EncBinary()
		_ = yym784
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep785 := !z.EncBinary()
			yy2arr785 := z.EncBasicHandle().StructToArray
			var yyq785 [4]bool
			_, _, _ = yysep785, yyq785, yy2arr785
			const yyr785 bool = false
			yyq785[3] = x.ReadOnly != false
			if yyr785 || yy2arr785 {
				r.EncodeArrayStart(4)
			} else {
				var yynn785 int = 3
				for _, b := range yyq785 {
					if b {
						yynn785++
					}
				}
				r.EncodeMapStart(yynn785)
			}
			if yyr785 || yy2arr785 {
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym787 := z.EncBinary()
					_ = yym787
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym788 := z.EncBinary()
					_ = yym788
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr785 || yy2arr785 {
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy790 := *x.Lun
					yym791 := z.EncBinary()
					_ = yym791
					if false {
					} else {
						r.EncodeInt(int64(yy790))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy792 := *x.Lun
					yym793 := z.EncBinary()
					_ = yym793
					if false {
					} else {
						r.EncodeInt(int64(yy792))
					}
				}
			}
			if yyr785 || yy2arr785 {
				yym795 := z.EncBinary()
				_ = yym795
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym796 := z.EncBinary()
				_ = yym796
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr785 || yy2arr785 {
				if yyq785[3] {
					yym798 := z.EncBinary()
					_ = yym798
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq785[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym799 := z.EncBinary()
					_ = yym799
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep785 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym800 := z.DecBinary()
	_ = yym800
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl801 := r.ReadMapStart()
			if yyl801 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl801, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl801 := r.ReadArrayStart()
			if yyl801 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl801, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys802Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys802Slc
	var yyhl802 bool = l >= 0
	for yyj802 := 0; ; yyj802++ {
		if yyhl802 {
			if yyj802 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys802Slc = r.DecodeBytes(yys802Slc, true, true)
		yys802 := string(yys802Slc)
		switch yys802 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv803 := &x.TargetWWNs
				yym804 := z.DecBinary()
				_ = yym804
				if false {
				} else {
					z.F.DecSliceStringX(yyv803, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int)
				}
				yym806 := z.DecBinary()
				_ = yym806
				if false {
				} else {
					*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys802)
		} // end switch yys802
	} // end for yyj802
	if !yyhl802 {
		r.ReadEnd()
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj809 int
	var yyb809 bool
	var yyhl809 bool = l >= 0
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv810 := &x.TargetWWNs
		yym811 := z.DecBinary()
		_ = yym811
		if false {
		} else {
			z.F.DecSliceStringX(yyv810, false, d)
		}
	}
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int)
		}
		yym813 := z.DecBinary()
		_ = yym813
		if false {
		} else {
			*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj809++
		if yyhl809 {
			yyb809 = yyj809 > l
		} else {
			yyb809 = r.CheckBreak()
		}
		if yyb809 {
			break
		}
		z.DecStructFieldNotFound(yyj809-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym816 := z.EncBinary()
		_ = yym816
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep817 := !z.EncBinary()
			yy2arr817 := z.EncBasicHandle().StructToArray
			var yyq817 [5]bool
			_, _, _ = yysep817, yyq817, yy2arr817
			const yyr817 bool = false
			yyq817[0] = x.Name != ""
			yyq817[1] = x.HostPort != 0
			yyq817[3] = x.Protocol != ""
			yyq817[4] = x.HostIP != ""
			if yyr817 || yy2arr817 {
				r.EncodeArrayStart(5)
			} else {
				var yynn817 int = 1
				for _, b := range yyq817 {
					if b {
						yynn817++
					}
				}
				r.EncodeMapStart(yynn817)
			}
			if yyr817 || yy2arr817 {
				if yyq817[0] {
					yym819 := z.EncBinary()
					_ = yym819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq817[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym820 := z.EncBinary()
					_ = yym820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr817 || yy2arr817 {
				if yyq817[1] {
					yym822 := z.EncBinary()
					_ = yym822
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq817[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					yym823 := z.EncBinary()
					_ = yym823
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr817 || yy2arr817 {
				yym825 := z.EncBinary()
				_ = yym825
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				yym826 := z.EncBinary()
				_ = yym826
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr817 || yy2arr817 {
				if yyq817[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq817[3] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr817 || yy2arr817 {
				if yyq817[4] {
					yym829 := z.EncBinary()
					_ = yym829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq817[4] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					yym830 := z.EncBinary()
					_ = yym830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yysep817 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym831 := z.DecBinary()
	_ = yym831
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl832 := r.ReadMapStart()
			if yyl832 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl832, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl832 := r.ReadArrayStart()
			if yyl832 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl832, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys833Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys833Slc
	var yyhl833 bool = l >= 0
	for yyj833 := 0; ; yyj833++ {
		if yyhl833 {
			if yyj833 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys833Slc = r.DecodeBytes(yys833Slc, true, true)
		yys833 := string(yys833Slc)
		switch yys833 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys833)
		} // end switch yys833
	} // end for yyj833
	if !yyhl833 {
		r.ReadEnd()
	}
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj839 int
	var yyb839 bool
	var yyhl839 bool = l >= 0
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj839++
		if yyhl839 {
			yyb839 = yyj839 > l
		} else {
			yyb839 = r.CheckBreak()
		}
		if yyb839 {
			break
		}
		z.DecStructFieldNotFound(yyj839-1, "")
	}
	r.ReadEnd()
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym845 := z.EncBinary()
		_ = yym845
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep846 := !z.EncBinary()
			yy2arr846 := z.EncBasicHandle().StructToArray
			var yyq846 [3]bool
			_, _, _ = yysep846, yyq846, yy2arr846
			const yyr846 bool = false
			yyq846[1] = x.ReadOnly != false
			if yyr846 || yy2arr846 {
				r.EncodeArrayStart(3)
			} else {
				var yynn846 int = 2
				for _, b := range yyq846 {
					if b {
						yynn846++
					}
				}
				r.EncodeMapStart(yynn846)
			}
			if yyr846 || yy2arr846 {
				yym848 := z.EncBinary()
				_ = yym848
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym849 := z.EncBinary()
				_ = yym849
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr846 || yy2arr846 {
				if yyq846[1] {
					yym851 := z.EncBinary()
					_ = yym851
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq846[1] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym852 := z.EncBinary()
					_ = yym852
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr846 || yy2arr846 {
				yym854 := z.EncBinary()
				_ = yym854
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				yym855 := z.EncBinary()
				_ = yym855
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yysep846 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym856 := z.DecBinary()
	_ = yym856
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl857 := r.ReadMapStart()
			if yyl857 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl857, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl857 := r.ReadArrayStart()
			if yyl857 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl857, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys858Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys858Slc
	var yyhl858 bool = l >= 0
	for yyj858 := 0; ; yyj858++ {
		if yyhl858 {
			if yyj858 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys858Slc = r.DecodeBytes(yys858Slc, true, true)
		yys858 := string(yys858Slc)
		switch yys858 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys858)
		} // end switch yys858
	} // end for yyj858
	if !yyhl858 {
		r.ReadEnd()
	}
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj862 int
	var yyb862 bool
	var yyhl862 bool = l >= 0
	yyj862++
	if yyhl862 {
		yyb862 = yyj862 > l
	} else {
		yyb862 = r.CheckBreak()
	}
	if yyb862 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj862++
	if yyhl862 {
		yyb862 = yyj862 > l
	} else {
		yyb862 = r.CheckBreak()
	}
	if yyb862 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj862++
	if yyhl862 {
		yyb862 = yyj862 > l
	} else {
		yyb862 = r.CheckBreak()
	}
	if yyb862 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj862++
		if yyhl862 {
			yyb862 = yyj862 > l
		} else {
			yyb862 = r.CheckBreak()
		}
		if yyb862 {
			break
		}
		z.DecStructFieldNotFound(yyj862-1, "")
	}
	r.ReadEnd()
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym866 := z.EncBinary()
		_ = yym866
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep867 := !z.EncBinary()
			yy2arr867 := z.EncBasicHandle().StructToArray
			var yyq867 [3]bool
			_, _, _ = yysep867, yyq867, yy2arr867
			const yyr867 bool = false
			yyq867[1] = x.Value != ""
			yyq867[2] = x.ValueFrom != nil
			if yyr867 || yy2arr867 {
				r.EncodeArrayStart(3)
			} else {
				var yynn867 int = 1
				for _, b := range yyq867 {
					if b {
						yynn867++
					}
				}
				r.EncodeMapStart(yynn867)
			}
			if yyr867 || yy2arr867 {
				yym869 := z.EncBinary()
				_ = yym869
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym870 := z.EncBinary()
				_ = yym870
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr867 || yy2arr867 {
				if yyq867[1] {
					yym872 := z.EncBinary()
					_ = yym872
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq867[1] {
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					yym873 := z.EncBinary()
					_ = yym873
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr867 || yy2arr867 {
				if yyq867[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq867[2] {
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yysep867 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym875 := z.DecBinary()
	_ = yym875
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl876 := r.ReadMapStart()
			if yyl876 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl876, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl876 := r.ReadArrayStart()
			if yyl876 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl876, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys877Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys877Slc
	var yyhl877 bool = l >= 0
	for yyj877 := 0; ; yyj877++ {
		if yyhl877 {
			if yyj877 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys877Slc = r.DecodeBytes(yys877Slc, true, true)
		yys877 := string(yys877Slc)
		switch yys877 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys877)
		} // end switch yys877
	} // end for yyj877
	if !yyhl877 {
		r.ReadEnd()
	}
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj881 int
	var yyb881 bool
	var yyhl881 bool = l >= 0
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj881++
		if yyhl881 {
			yyb881 = yyj881 > l
		} else {
			yyb881 = r.CheckBreak()
		}
		if yyb881 {
			break
		}
		z.DecStructFieldNotFound(yyj881-1, "")
	}
	r.ReadEnd()
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym885 := z.EncBinary()
		_ = yym885
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep886 := !z.EncBinary()
			yy2arr886 := z.EncBasicHandle().StructToArray
			var yyq886 [1]bool
			_, _, _ = yysep886, yyq886, yy2arr886
			const yyr886 bool = false
			if yyr886 || yy2arr886 {
				r.EncodeArrayStart(1)
			} else {
				var yynn886 int = 1
				for _, b := range yyq886 {
					if b {
						yynn886++
					}
				}
				r.EncodeMapStart(yynn886)
			}
			if yyr886 || yy2arr886 {
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			}
			if yysep886 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym888 := z.DecBinary()
	_ = yym888
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl889 := r.ReadMapStart()
			if yyl889 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl889, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl889 := r.ReadArrayStart()
			if yyl889 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl889, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys890Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys890Slc
	var yyhl890 bool = l >= 0
	for yyj890 := 0; ; yyj890++ {
		if yyhl890 {
			if yyj890 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys890Slc = r.DecodeBytes(yys890Slc, true, true)
		yys890 := string(yys890Slc)
		switch yys890 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys890)
		} // end switch yys890
	} // end for yyj890
	if !yyhl890 {
		r.ReadEnd()
	}
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj892 int
	var yyb892 bool
	var yyhl892 bool = l >= 0
	yyj892++
	if yyhl892 {
		yyb892 = yyj892 > l
	} else {
		yyb892 = r.CheckBreak()
	}
	if yyb892 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj892++
		if yyhl892 {
			yyb892 = yyj892 > l
		} else {
			yyb892 = r.CheckBreak()
		}
		if yyb892 {
			break
		}
		z.DecStructFieldNotFound(yyj892-1, "")
	}
	r.ReadEnd()
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym894 := z.EncBinary()
		_ = yym894
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep895 := !z.EncBinary()
			yy2arr895 := z.EncBasicHandle().StructToArray
			var yyq895 [2]bool
			_, _, _ = yysep895, yyq895, yy2arr895
			const yyr895 bool = false
			yyq895[0] = x.APIVersion != ""
			if yyr895 || yy2arr895 {
				r.EncodeArrayStart(2)
			} else {
				var yynn895 int = 1
				for _, b := range yyq895 {
					if b {
						yynn895++
					}
				}
				r.EncodeMapStart(yynn895)
			}
			if yyr895 || yy2arr895 {
				if yyq895[0] {
					yym897 := z.EncBinary()
					_ = yym897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq895[0] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym898 := z.EncBinary()
					_ = yym898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr895 || yy2arr895 {
				yym900 := z.EncBinary()
				_ = yym900
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				yym901 := z.EncBinary()
				_ = yym901
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yysep895 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym902 := z.DecBinary()
	_ = yym902
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl903 := r.ReadMapStart()
			if yyl903 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl903, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl903 := r.ReadArrayStart()
			if yyl903 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl903, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys904Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys904Slc
	var yyhl904 bool = l >= 0
	for yyj904 := 0; ; yyj904++ {
		if yyhl904 {
			if yyj904 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys904Slc = r.DecodeBytes(yys904Slc, true, true)
		yys904 := string(yys904Slc)
		switch yys904 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys904)
		} // end switch yys904
	} // end for yyj904
	if !yyhl904 {
		r.ReadEnd()
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj907 int
	var yyb907 bool
	var yyhl907 bool = l >= 0
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj907++
		if yyhl907 {
			yyb907 = yyj907 > l
		} else {
			yyb907 = r.CheckBreak()
		}
		if yyb907 {
			break
		}
		z.DecStructFieldNotFound(yyj907-1, "")
	}
	r.ReadEnd()
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym910 := z.EncBinary()
		_ = yym910
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep911 := !z.EncBinary()
			yy2arr911 := z.EncBasicHandle().StructToArray
			var yyq911 [4]bool
			_, _, _ = yysep911, yyq911, yy2arr911
			const yyr911 bool = false
			yyq911[0] = x.Path != ""
			yyq911[2] = x.Host != ""
			yyq911[3] = x.Scheme != ""
			if yyr911 || yy2arr911 {
				r.EncodeArrayStart(4)
			} else {
				var yynn911 int = 1
				for _, b := range yyq911 {
					if b {
						yynn911++
					}
				}
				r.EncodeMapStart(yynn911)
			}
			if yyr911 || yy2arr911 {
				if yyq911[0] {
					yym913 := z.EncBinary()
					_ = yym913
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq911[0] {
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					yym914 := z.EncBinary()
					_ = yym914
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr911 || yy2arr911 {
				yy916 := &x.Port
				yym917 := z.EncBinary()
				_ = yym917
				if false {
				} else if z.HasExtensions() && z.EncExt(yy916) {
				} else if !yym917 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy916)
				} else {
					z.EncFallback(yy916)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yy918 := &x.Port
				yym919 := z.EncBinary()
				_ = yym919
				if false {
				} else if z.HasExtensions() && z.EncExt(yy918) {
				} else if !yym919 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy918)
				} else {
					z.EncFallback(yy918)
				}
			}
			if yyr911 || yy2arr911 {
				if yyq911[2] {
					yym921 := z.EncBinary()
					_ = yym921
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq911[2] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym922 := z.EncBinary()
					_ = yym922
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr911 || yy2arr911 {
				if yyq911[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq911[3] {
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yysep911 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym924 := z.DecBinary()
	_ = yym924
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl925 := r.ReadMapStart()
			if yyl925 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl925, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl925 := r.ReadArrayStart()
			if yyl925 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl925, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys926Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys926Slc
	var yyhl926 bool = l >= 0
	for yyj926 := 0; ; yyj926++ {
		if yyhl926 {
			if yyj926 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys926Slc = r.DecodeBytes(yys926Slc, true, true)
		yys926 := string(yys926Slc)
		switch yys926 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_util.IntOrString{}
			} else {
				yyv928 := &x.Port
				yym929 := z.DecBinary()
				_ = yym929
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv928) {
				} else if !yym929 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv928)
				} else {
					z.DecFallback(yyv928, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys926)
		} // end switch yys926
	} // end for yyj926
	if !yyhl926 {
		r.ReadEnd()
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj932 int
	var yyb932 bool
	var yyhl932 bool = l >= 0
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg5_util.IntOrString{}
	} else {
		yyv934 := &x.Port
		yym935 := z.DecBinary()
		_ = yym935
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv934) {
		} else if !yym935 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv934)
		} else {
			z.DecFallback(yyv934, false)
		}
	}
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	for {
		yyj932++
		if yyhl932 {
			yyb932 = yyj932 > l
		} else {
			yyb932 = r.CheckBreak()
		}
		if yyb932 {
			break
		}
		z.DecStructFieldNotFound(yyj932-1, "")
	}
	r.ReadEnd()
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym938 := z.EncBinary()
	_ = yym938
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym939 := z.DecBinary()
	_ = yym939
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym940 := z.EncBinary()
		_ = yym940
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep941 := !z.EncBinary()
			yy2arr941 := z.EncBasicHandle().StructToArray
			var yyq941 [1]bool
			_, _, _ = yysep941, yyq941, yy2arr941
			const yyr941 bool = false
			if yyr941 || yy2arr941 {
				r.EncodeArrayStart(1)
			} else {
				var yynn941 int = 1
				for _, b := range yyq941 {
					if b {
						yynn941++
					}
				}
				r.EncodeMapStart(yynn941)
			}
			if yyr941 || yy2arr941 {
				yy943 := &x.Port
				yym944 := z.EncBinary()
				_ = yym944
				if false {
				} else if z.HasExtensions() && z.EncExt(yy943) {
				} else if !yym944 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy943)
				} else {
					z.EncFallback(yy943)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yy945 := &x.Port
				yym946 := z.EncBinary()
				_ = yym946
				if false {
				} else if z.HasExtensions() && z.EncExt(yy945) {
				} else if !yym946 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy945)
				} else {
					z.EncFallback(yy945)
				}
			}
			if yysep941 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym947 := z.DecBinary()
	_ = yym947
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl948 := r.ReadMapStart()
			if yyl948 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl948, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl948 := r.ReadArrayStart()
			if yyl948 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl948, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys949Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys949Slc
	var yyhl949 bool = l >= 0
	for yyj949 := 0; ; yyj949++ {
		if yyhl949 {
			if yyj949 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys949Slc = r.DecodeBytes(yys949Slc, true, true)
		yys949 := string(yys949Slc)
		switch yys949 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_util.IntOrString{}
			} else {
				yyv950 := &x.Port
				yym951 := z.DecBinary()
				_ = yym951
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv950) {
				} else if !yym951 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv950)
				} else {
					z.DecFallback(yyv950, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys949)
		} // end switch yys949
	} // end for yyj949
	if !yyhl949 {
		r.ReadEnd()
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj952 int
	var yyb952 bool
	var yyhl952 bool = l >= 0
	yyj952++
	if yyhl952 {
		yyb952 = yyj952 > l
	} else {
		yyb952 = r.CheckBreak()
	}
	if yyb952 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg5_util.IntOrString{}
	} else {
		yyv953 := &x.Port
		yym954 := z.DecBinary()
		_ = yym954
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv953) {
		} else if !yym954 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv953)
		} else {
			z.DecFallback(yyv953, false)
		}
	}
	for {
		yyj952++
		if yyhl952 {
			yyb952 = yyj952 > l
		} else {
			yyb952 = r.CheckBreak()
		}
		if yyb952 {
			break
		}
		z.DecStructFieldNotFound(yyj952-1, "")
	}
	r.ReadEnd()
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym955 := z.EncBinary()
		_ = yym955
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep956 := !z.EncBinary()
			yy2arr956 := z.EncBasicHandle().StructToArray
			var yyq956 [1]bool
			_, _, _ = yysep956, yyq956, yy2arr956
			const yyr956 bool = false
			yyq956[0] = len(x.Command) != 0
			if yyr956 || yy2arr956 {
				r.EncodeArrayStart(1)
			} else {
				var yynn956 int = 0
				for _, b := range yyq956 {
					if b {
						yynn956++
					}
				}
				r.EncodeMapStart(yynn956)
			}
			if yyr956 || yy2arr956 {
				if yyq956[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym958 := z.EncBinary()
						_ = yym958
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq956[0] {
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym959 := z.EncBinary()
						_ = yym959
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yysep956 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym960 := z.DecBinary()
	_ = yym960
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl961 := r.ReadMapStart()
			if yyl961 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl961, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl961 := r.ReadArrayStart()
			if yyl961 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl961, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys962Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys962Slc
	var yyhl962 bool = l >= 0
	for yyj962 := 0; ; yyj962++ {
		if yyhl962 {
			if yyj962 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys962Slc = r.DecodeBytes(yys962Slc, true, true)
		yys962 := string(yys962Slc)
		switch yys962 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv963 := &x.Command
				yym964 := z.DecBinary()
				_ = yym964
				if false {
				} else {
					z.F.DecSliceStringX(yyv963, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys962)
		} // end switch yys962
	} // end for yyj962
	if !yyhl962 {
		r.ReadEnd()
	}
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj965 int
	var yyb965 bool
	var yyhl965 bool = l >= 0
	yyj965++
	if yyhl965 {
		yyb965 = yyj965 > l
	} else {
		yyb965 = r.CheckBreak()
	}
	if yyb965 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv966 := &x.Command
		yym967 := z.DecBinary()
		_ = yym967
		if false {
		} else {
			z.F.DecSliceStringX(yyv966, false, d)
		}
	}
	for {
		yyj965++
		if yyhl965 {
			yyb965 = yyj965 > l
		} else {
			yyb965 = r.CheckBreak()
		}
		if yyb965 {
			break
		}
		z.DecStructFieldNotFound(yyj965-1, "")
	}
	r.ReadEnd()
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym968 := z.EncBinary()
		_ = yym968
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep969 := !z.EncBinary()
			yy2arr969 := z.EncBasicHandle().StructToArray
			var yyq969 [8]bool
			_, _, _ = yysep969, yyq969, yy2arr969
			const yyr969 bool = false
			yyq969[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq969[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq969[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq969[3] = x.InitialDelaySeconds != 0
			yyq969[4] = x.TimeoutSeconds != 0
			yyq969[5] = x.PeriodSeconds != 0
			yyq969[6] = x.SuccessThreshold != 0
			yyq969[7] = x.FailureThreshold != 0
			if yyr969 || yy2arr969 {
				r.EncodeArrayStart(8)
			} else {
				var yynn969 int = 0
				for _, b := range yyq969 {
					if b {
						yynn969++
					}
				}
				r.EncodeMapStart(yynn969)
			}
			var yyn970 bool
			if x.Handler.Exec == nil {
				yyn970 = true
				goto LABEL970
			}
		LABEL970:
			if yyr969 || yy2arr969 {
				if yyn970 {
					r.EncodeNil()
				} else {
					if yyq969[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq969[0] {
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if yyn970 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn971 bool
			if x.Handler.HTTPGet == nil {
				yyn971 = true
				goto LABEL971
			}
		LABEL971:
			if yyr969 || yy2arr969 {
				if yyn971 {
					r.EncodeNil()
				} else {
					if yyq969[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq969[1] {
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if yyn971 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn972 bool
			if x.Handler.TCPSocket == nil {
				yyn972 = true
				goto LABEL972
			}
		LABEL972:
			if yyr969 || yy2arr969 {
				if yyn972 {
					r.EncodeNil()
				} else {
					if yyq969[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq969[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if yyn972 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr969 || yy2arr969 {
				if yyq969[3] {
					yym974 := z.EncBinary()
					_ = yym974
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq969[3] {
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					yym975 := z.EncBinary()
					_ = yym975
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr969 || yy2arr969 {
				if yyq969[4] {
					yym977 := z.EncBinary()
					_ = yym977
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq969[4] {
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					yym978 := z.EncBinary()
					_ = yym978
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr969 || yy2arr969 {
				if yyq969[5] {
					yym980 := z.EncBinary()
					_ = yym980
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq969[5] {
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					yym981 := z.EncBinary()
					_ = yym981
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr969 || yy2arr969 {
				if yyq969[6] {
					yym983 := z.EncBinary()
					_ = yym983
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq969[6] {
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					yym984 := z.EncBinary()
					_ = yym984
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr969 || yy2arr969 {
				if yyq969[7] {
					yym986 := z.EncBinary()
					_ = yym986
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq969[7] {
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					yym987 := z.EncBinary()
					_ = yym987
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yysep969 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym988 := z.DecBinary()
	_ = yym988
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl989 := r.ReadMapStart()
			if yyl989 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl989, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl989 := r.ReadArrayStart()
			if yyl989 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl989, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys990Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys990Slc
	var yyhl990 bool = l >= 0
	for yyj990 := 0; ; yyj990++ {
		if yyhl990 {
			if yyj990 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys990Slc = r.DecodeBytes(yys990Slc, true, true)
		yys990 := string(yys990Slc)
		switch yys990 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int64(r.DecodeInt(64))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int64(r.DecodeInt(64))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int64(r.DecodeInt(64))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys990)
		} // end switch yys990
	} // end for yyj990
	if !yyhl990 {
		r.ReadEnd()
	}
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj999 int
	var yyb999 bool
	var yyhl999 bool = l >= 0
	yyj999++
	if yyhl999 {
		yyb999 = yyj999 > l
	} else {
		yyb999 = r.CheckBreak()
	}
	if yyb999 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj999++
	if yyhl999 {
		yyb999 = yyj999 > l
	} else {
		yyb999 = r.CheckBreak()
	}
	if yyb999 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj999++
	if yyhl999 {
		yyb999 = yyj999 > l
	} else {
		yyb999 = r.CheckBreak()
	}
	if yyb999 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj999++
	if yyhl999 {
		yyb999 = yyj999 > l
	} else {
		yyb999 = r.CheckBreak()
	}
	if yyb999 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int64(r.DecodeInt(64))
	}
	yyj999++
	if yyhl999 {
		yyb999 = yyj999 > l
	} else {
		yyb999 = r.CheckBreak()
	}
	if yyb999 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int64(r.DecodeInt(64))
	}
	yyj999++
	if yyhl999 {
		yyb999 = yyj999 > l
	} else {
		yyb999 = r.CheckBreak()
	}
	if yyb999 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int64(r.DecodeInt(64))
	}
	yyj999++
	if yyhl999 {
		yyb999 = yyj999 > l
	} else {
		yyb999 = r.CheckBreak()
	}
	if yyb999 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj999++
	if yyhl999 {
		yyb999 = yyj999 > l
	} else {
		yyb999 = r.CheckBreak()
	}
	if yyb999 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj999++
		if yyhl999 {
			yyb999 = yyj999 > l
		} else {
			yyb999 = r.CheckBreak()
		}
		if yyb999 {
			break
		}
		z.DecStructFieldNotFound(yyj999-1, "")
	}
	r.ReadEnd()
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1008 := z.EncBinary()
	_ = yym1008
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1009 := z.DecBinary()
	_ = yym1009
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1010 := z.EncBinary()
	_ = yym1010
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1011 := z.DecBinary()
	_ = yym1011
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1012 := z.EncBinary()
		_ = yym1012
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1013 := !z.EncBinary()
			yy2arr1013 := z.EncBasicHandle().StructToArray
			var yyq1013 [2]bool
			_, _, _ = yysep1013, yyq1013, yy2arr1013
			const yyr1013 bool = false
			yyq1013[0] = len(x.Add) != 0
			yyq1013[1] = len(x.Drop) != 0
			if yyr1013 || yy2arr1013 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1013 int = 0
				for _, b := range yyq1013 {
					if b {
						yynn1013++
					}
				}
				r.EncodeMapStart(yynn1013)
			}
			if yyr1013 || yy2arr1013 {
				if yyq1013[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1015 := z.EncBinary()
						_ = yym1015
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1013[0] {
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1016 := z.EncBinary()
						_ = yym1016
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1013 || yy2arr1013 {
				if yyq1013[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1018 := z.EncBinary()
						_ = yym1018
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1013[1] {
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1019 := z.EncBinary()
						_ = yym1019
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yysep1013 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1020 := z.DecBinary()
	_ = yym1020
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1021 := r.ReadMapStart()
			if yyl1021 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1021, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1021 := r.ReadArrayStart()
			if yyl1021 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1021, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1022Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1022Slc
	var yyhl1022 bool = l >= 0
	for yyj1022 := 0; ; yyj1022++ {
		if yyhl1022 {
			if yyj1022 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1022Slc = r.DecodeBytes(yys1022Slc, true, true)
		yys1022 := string(yys1022Slc)
		switch yys1022 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1023 := &x.Add
				yym1024 := z.DecBinary()
				_ = yym1024
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1023), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1025 := &x.Drop
				yym1026 := z.DecBinary()
				_ = yym1026
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1025), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1022)
		} // end switch yys1022
	} // end for yyj1022
	if !yyhl1022 {
		r.ReadEnd()
	}
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1027 int
	var yyb1027 bool
	var yyhl1027 bool = l >= 0
	yyj1027++
	if yyhl1027 {
		yyb1027 = yyj1027 > l
	} else {
		yyb1027 = r.CheckBreak()
	}
	if yyb1027 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1028 := &x.Add
		yym1029 := z.DecBinary()
		_ = yym1029
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1028), d)
		}
	}
	yyj1027++
	if yyhl1027 {
		yyb1027 = yyj1027 > l
	} else {
		yyb1027 = r.CheckBreak()
	}
	if yyb1027 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1030 := &x.Drop
		yym1031 := z.DecBinary()
		_ = yym1031
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1030), d)
		}
	}
	for {
		yyj1027++
		if yyhl1027 {
			yyb1027 = yyj1027 > l
		} else {
			yyb1027 = r.CheckBreak()
		}
		if yyb1027 {
			break
		}
		z.DecStructFieldNotFound(yyj1027-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1032 := z.EncBinary()
		_ = yym1032
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1033 := !z.EncBinary()
			yy2arr1033 := z.EncBasicHandle().StructToArray
			var yyq1033 [2]bool
			_, _, _ = yysep1033, yyq1033, yy2arr1033
			const yyr1033 bool = false
			yyq1033[0] = len(x.Limits) != 0
			yyq1033[1] = len(x.Requests) != 0
			if yyr1033 || yy2arr1033 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1033 int = 0
				for _, b := range yyq1033 {
					if b {
						yynn1033++
					}
				}
				r.EncodeMapStart(yynn1033)
			}
			if yyr1033 || yy2arr1033 {
				if yyq1033[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1033[0] {
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1033 || yy2arr1033 {
				if yyq1033[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1033[1] {
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1033 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1036 := z.DecBinary()
	_ = yym1036
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1037 := r.ReadMapStart()
			if yyl1037 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1037, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1037 := r.ReadArrayStart()
			if yyl1037 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1037, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1038Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1038Slc
	var yyhl1038 bool = l >= 0
	for yyj1038 := 0; ; yyj1038++ {
		if yyhl1038 {
			if yyj1038 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1038Slc = r.DecodeBytes(yys1038Slc, true, true)
		yys1038 := string(yys1038Slc)
		switch yys1038 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1039 := &x.Limits
				yyv1039.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1040 := &x.Requests
				yyv1040.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1038)
		} // end switch yys1038
	} // end for yyj1038
	if !yyhl1038 {
		r.ReadEnd()
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1041 int
	var yyb1041 bool
	var yyhl1041 bool = l >= 0
	yyj1041++
	if yyhl1041 {
		yyb1041 = yyj1041 > l
	} else {
		yyb1041 = r.CheckBreak()
	}
	if yyb1041 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1042 := &x.Limits
		yyv1042.CodecDecodeSelf(d)
	}
	yyj1041++
	if yyhl1041 {
		yyb1041 = yyj1041 > l
	} else {
		yyb1041 = r.CheckBreak()
	}
	if yyb1041 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1043 := &x.Requests
		yyv1043.CodecDecodeSelf(d)
	}
	for {
		yyj1041++
		if yyhl1041 {
			yyb1041 = yyj1041 > l
		} else {
			yyb1041 = r.CheckBreak()
		}
		if yyb1041 {
			break
		}
		z.DecStructFieldNotFound(yyj1041-1, "")
	}
	r.ReadEnd()
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1044 := z.EncBinary()
		_ = yym1044
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1045 := !z.EncBinary()
			yy2arr1045 := z.EncBasicHandle().StructToArray
			var yyq1045 [19]bool
			_, _, _ = yysep1045, yyq1045, yy2arr1045
			const yyr1045 bool = false
			yyq1045[1] = x.Image != ""
			yyq1045[2] = len(x.Command) != 0
			yyq1045[3] = len(x.Args) != 0
			yyq1045[4] = x.WorkingDir != ""
			yyq1045[5] = len(x.Ports) != 0
			yyq1045[6] = len(x.Env) != 0
			yyq1045[7] = true
			yyq1045[8] = len(x.VolumeMounts) != 0
			yyq1045[9] = x.LivenessProbe != nil
			yyq1045[10] = x.ReadinessProbe != nil
			yyq1045[11] = x.Lifecycle != nil
			yyq1045[12] = x.TerminationMessagePath != ""
			yyq1045[13] = x.ImagePullPolicy != ""
			yyq1045[14] = x.SecurityContext != nil
			yyq1045[15] = x.Stdin != false
			yyq1045[16] = x.StdinOnce != false
			yyq1045[17] = x.TTY != false
			yyq1045[18] = x.Fraud != ""
			if yyr1045 || yy2arr1045 {
				r.EncodeArrayStart(19)
			} else {
				var yynn1045 int = 1
				for _, b := range yyq1045 {
					if b {
						yynn1045++
					}
				}
				r.EncodeMapStart(yynn1045)
			}
			if yyr1045 || yy2arr1045 {
				yym1047 := z.EncBinary()
				_ = yym1047
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1048 := z.EncBinary()
				_ = yym1048
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1045 || yy2arr1045 {
				if yyq1045[1] {
					yym1050 := z.EncBinary()
					_ = yym1050
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1045[1] {
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					yym1051 := z.EncBinary()
					_ = yym1051
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr1045 || yy2arr1045 {
				if yyq1045[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1053 := z.EncBinary()
						_ = yym1053
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1045[2] {
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1054 := z.EncBinary()
						_ = yym1054
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1045 || yy2arr1045 {
				if yyq1045[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1056 := z.EncBinary()
						_ = yym1056
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1045[3] {
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1057 := z.EncBinary()
						_ = yym1057
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1045 || yy2arr1045 {
				if yyq1045[4] {
					yym1059 := z.EncBinary()
					_ = yym1059
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1045[4] {
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					yym1060 := z.EncBinary()
					_ = yym1060
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1045 || yy2arr1045 {
				if yyq1045[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1062 := z.EncBinary()
						_ = yym1062
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1045[5] {
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1063 := z.EncBinary()
						_ = yym1063
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1045 || yy2arr1045 {
				if yyq1045[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1065 := z.EncBinary()
						_ = yym1065
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1045[6] {
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1066 := z.EncBinary()
						_ = yym1066
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1045 || yy2arr1045 {
				if yyq1045[7] {
					yy1068 := &x.Resources
					yy1068.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1045[7] {
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					yy1069 := &x.Resources
					yy1069.CodecEncodeSelf(e)
				}
			}
			if yyr1045 || yy2arr1045 {
				if yyq1045[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1071 := z.EncBinary()
						_ = yym1071
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1045[8] {
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1072 := z.EncBinary()
						_ = yym1072
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1045 || yy2arr1045 {
				if yyq1045[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1045[9] {
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1045 || yy2arr1045 {
				if yyq1045[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1045[10] {
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1045 || yy2arr1045 {
				if yyq1045[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1045[11] {
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1045 || yy2arr1045 {
				if yyq1045[12] {
					yym1077 := z.EncBinary()
					_ = yym1077
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1045[12] {
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					yym1078 := z.EncBinary()
					_ = yym1078
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1045 || yy2arr1045 {
				if yyq1045[13] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1045[13] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1045 || yy2arr1045 {
				if yyq1045[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1045[14] {
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1045 || yy2arr1045 {
				if yyq1045[15] {
					yym1082 := z.EncBinary()
					_ = yym1082
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1045[15] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym1083 := z.EncBinary()
					_ = yym1083
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1045 || yy2arr1045 {
				if yyq1045[16] {
					yym1085 := z.EncBinary()
					_ = yym1085
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1045[16] {
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					yym1086 := z.EncBinary()
					_ = yym1086
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1045 || yy2arr1045 {
				if yyq1045[17] {
					yym1088 := z.EncBinary()
					_ = yym1088
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1045[17] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym1089 := z.EncBinary()
					_ = yym1089
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1045 || yy2arr1045 {
				if yyq1045[18] {
					yym1091 := z.EncBinary()
					_ = yym1091
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Fraud))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1045[18] {
					r.EncodeString(codecSelferC_UTF81234, string("fraud"))
					yym1092 := z.EncBinary()
					_ = yym1092
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Fraud))
					}
				}
			}
			if yysep1045 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1093 := z.DecBinary()
	_ = yym1093
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1094 := r.ReadMapStart()
			if yyl1094 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1094, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1094 := r.ReadArrayStart()
			if yyl1094 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1094, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1095Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1095Slc
	var yyhl1095 bool = l >= 0
	for yyj1095 := 0; ; yyj1095++ {
		if yyhl1095 {
			if yyj1095 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1095Slc = r.DecodeBytes(yys1095Slc, true, true)
		yys1095 := string(yys1095Slc)
		switch yys1095 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1098 := &x.Command
				yym1099 := z.DecBinary()
				_ = yym1099
				if false {
				} else {
					z.F.DecSliceStringX(yyv1098, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1100 := &x.Args
				yym1101 := z.DecBinary()
				_ = yym1101
				if false {
				} else {
					z.F.DecSliceStringX(yyv1100, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1103 := &x.Ports
				yym1104 := z.DecBinary()
				_ = yym1104
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1103), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1105 := &x.Env
				yym1106 := z.DecBinary()
				_ = yym1106
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1105), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1107 := &x.Resources
				yyv1107.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1108 := &x.VolumeMounts
				yym1109 := z.DecBinary()
				_ = yym1109
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1108), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "fraud":
			if r.TryDecodeAsNil() {
				x.Fraud = ""
			} else {
				x.Fraud = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1095)
		} // end switch yys1095
	} // end for yyj1095
	if !yyhl1095 {
		r.ReadEnd()
	}
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1120 int
	var yyb1120 bool
	var yyhl1120 bool = l >= 0
	yyj1120++
	if yyhl1120 {
		yyb1120 = yyj1120 > l
	} else {
		yyb1120 = r.CheckBreak()
	}
	if yyb1120 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1120++
	if yyhl1120 {
		yyb1120 = yyj1120 > l
	} else {
		yyb1120 = r.CheckBreak()
	}
	if yyb1120 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1120++
	if yyhl1120 {
		yyb1120 = yyj1120 > l
	} else {
		yyb1120 = r.CheckBreak()
	}
	if yyb1120 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1123 := &x.Command
		yym1124 := z.DecBinary()
		_ = yym1124
		if false {
		} else {
			z.F.DecSliceStringX(yyv1123, false, d)
		}
	}
	yyj1120++
	if yyhl1120 {
		yyb1120 = yyj1120 > l
	} else {
		yyb1120 = r.CheckBreak()
	}
	if yyb1120 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1125 := &x.Args
		yym1126 := z.DecBinary()
		_ = yym1126
		if false {
		} else {
			z.F.DecSliceStringX(yyv1125, false, d)
		}
	}
	yyj1120++
	if yyhl1120 {
		yyb1120 = yyj1120 > l
	} else {
		yyb1120 = r.CheckBreak()
	}
	if yyb1120 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1120++
	if yyhl1120 {
		yyb1120 = yyj1120 > l
	} else {
		yyb1120 = r.CheckBreak()
	}
	if yyb1120 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1128 := &x.Ports
		yym1129 := z.DecBinary()
		_ = yym1129
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1128), d)
		}
	}
	yyj1120++
	if yyhl1120 {
		yyb1120 = yyj1120 > l
	} else {
		yyb1120 = r.CheckBreak()
	}
	if yyb1120 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1130 := &x.Env
		yym1131 := z.DecBinary()
		_ = yym1131
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1130), d)
		}
	}
	yyj1120++
	if yyhl1120 {
		yyb1120 = yyj1120 > l
	} else {
		yyb1120 = r.CheckBreak()
	}
	if yyb1120 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1132 := &x.Resources
		yyv1132.CodecDecodeSelf(d)
	}
	yyj1120++
	if yyhl1120 {
		yyb1120 = yyj1120 > l
	} else {
		yyb1120 = r.CheckBreak()
	}
	if yyb1120 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1133 := &x.VolumeMounts
		yym1134 := z.DecBinary()
		_ = yym1134
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1133), d)
		}
	}
	yyj1120++
	if yyhl1120 {
		yyb1120 = yyj1120 > l
	} else {
		yyb1120 = r.CheckBreak()
	}
	if yyb1120 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1120++
	if yyhl1120 {
		yyb1120 = yyj1120 > l
	} else {
		yyb1120 = r.CheckBreak()
	}
	if yyb1120 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1120++
	if yyhl1120 {
		yyb1120 = yyj1120 > l
	} else {
		yyb1120 = r.CheckBreak()
	}
	if yyb1120 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1120++
	if yyhl1120 {
		yyb1120 = yyj1120 > l
	} else {
		yyb1120 = r.CheckBreak()
	}
	if yyb1120 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1120++
	if yyhl1120 {
		yyb1120 = yyj1120 > l
	} else {
		yyb1120 = r.CheckBreak()
	}
	if yyb1120 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1120++
	if yyhl1120 {
		yyb1120 = yyj1120 > l
	} else {
		yyb1120 = r.CheckBreak()
	}
	if yyb1120 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1120++
	if yyhl1120 {
		yyb1120 = yyj1120 > l
	} else {
		yyb1120 = r.CheckBreak()
	}
	if yyb1120 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1120++
	if yyhl1120 {
		yyb1120 = yyj1120 > l
	} else {
		yyb1120 = r.CheckBreak()
	}
	if yyb1120 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1120++
	if yyhl1120 {
		yyb1120 = yyj1120 > l
	} else {
		yyb1120 = r.CheckBreak()
	}
	if yyb1120 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj1120++
	if yyhl1120 {
		yyb1120 = yyj1120 > l
	} else {
		yyb1120 = r.CheckBreak()
	}
	if yyb1120 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Fraud = ""
	} else {
		x.Fraud = string(r.DecodeString())
	}
	for {
		yyj1120++
		if yyhl1120 {
			yyb1120 = yyj1120 > l
		} else {
			yyb1120 = r.CheckBreak()
		}
		if yyb1120 {
			break
		}
		z.DecStructFieldNotFound(yyj1120-1, "")
	}
	r.ReadEnd()
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1145 := z.EncBinary()
		_ = yym1145
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1146 := !z.EncBinary()
			yy2arr1146 := z.EncBasicHandle().StructToArray
			var yyq1146 [3]bool
			_, _, _ = yysep1146, yyq1146, yy2arr1146
			const yyr1146 bool = false
			yyq1146[0] = x.Exec != nil
			yyq1146[1] = x.HTTPGet != nil
			yyq1146[2] = x.TCPSocket != nil
			if yyr1146 || yy2arr1146 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1146 int = 0
				for _, b := range yyq1146 {
					if b {
						yynn1146++
					}
				}
				r.EncodeMapStart(yynn1146)
			}
			if yyr1146 || yy2arr1146 {
				if yyq1146[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1146[0] {
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1146 || yy2arr1146 {
				if yyq1146[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1146[1] {
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1146 || yy2arr1146 {
				if yyq1146[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1146[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1146 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1150 := z.DecBinary()
	_ = yym1150
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1151 := r.ReadMapStart()
			if yyl1151 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1151, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1151 := r.ReadArrayStart()
			if yyl1151 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1151, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1152Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1152Slc
	var yyhl1152 bool = l >= 0
	for yyj1152 := 0; ; yyj1152++ {
		if yyhl1152 {
			if yyj1152 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1152Slc = r.DecodeBytes(yys1152Slc, true, true)
		yys1152 := string(yys1152Slc)
		switch yys1152 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1152)
		} // end switch yys1152
	} // end for yyj1152
	if !yyhl1152 {
		r.ReadEnd()
	}
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1156 int
	var yyb1156 bool
	var yyhl1156 bool = l >= 0
	yyj1156++
	if yyhl1156 {
		yyb1156 = yyj1156 > l
	} else {
		yyb1156 = r.CheckBreak()
	}
	if yyb1156 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1156++
	if yyhl1156 {
		yyb1156 = yyj1156 > l
	} else {
		yyb1156 = r.CheckBreak()
	}
	if yyb1156 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1156++
	if yyhl1156 {
		yyb1156 = yyj1156 > l
	} else {
		yyb1156 = r.CheckBreak()
	}
	if yyb1156 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1156++
		if yyhl1156 {
			yyb1156 = yyj1156 > l
		} else {
			yyb1156 = r.CheckBreak()
		}
		if yyb1156 {
			break
		}
		z.DecStructFieldNotFound(yyj1156-1, "")
	}
	r.ReadEnd()
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1160 := z.EncBinary()
		_ = yym1160
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1161 := !z.EncBinary()
			yy2arr1161 := z.EncBasicHandle().StructToArray
			var yyq1161 [2]bool
			_, _, _ = yysep1161, yyq1161, yy2arr1161
			const yyr1161 bool = false
			yyq1161[0] = x.PostStart != nil
			yyq1161[1] = x.PreStop != nil
			if yyr1161 || yy2arr1161 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1161 int = 0
				for _, b := range yyq1161 {
					if b {
						yynn1161++
					}
				}
				r.EncodeMapStart(yynn1161)
			}
			if yyr1161 || yy2arr1161 {
				if yyq1161[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1161[0] {
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1161 || yy2arr1161 {
				if yyq1161[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1161[1] {
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1161 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1164 := z.DecBinary()
	_ = yym1164
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1165 := r.ReadMapStart()
			if yyl1165 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1165, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1165 := r.ReadArrayStart()
			if yyl1165 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1165, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1166Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1166Slc
	var yyhl1166 bool = l >= 0
	for yyj1166 := 0; ; yyj1166++ {
		if yyhl1166 {
			if yyj1166 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1166Slc = r.DecodeBytes(yys1166Slc, true, true)
		yys1166 := string(yys1166Slc)
		switch yys1166 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1166)
		} // end switch yys1166
	} // end for yyj1166
	if !yyhl1166 {
		r.ReadEnd()
	}
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1169 int
	var yyb1169 bool
	var yyhl1169 bool = l >= 0
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1169++
		if yyhl1169 {
			yyb1169 = yyj1169 > l
		} else {
			yyb1169 = r.CheckBreak()
		}
		if yyb1169 {
			break
		}
		z.DecStructFieldNotFound(yyj1169-1, "")
	}
	r.ReadEnd()
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1172 := z.EncBinary()
	_ = yym1172
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1173 := z.DecBinary()
	_ = yym1173
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1174 := z.EncBinary()
		_ = yym1174
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1175 := !z.EncBinary()
			yy2arr1175 := z.EncBasicHandle().StructToArray
			var yyq1175 [2]bool
			_, _, _ = yysep1175, yyq1175, yy2arr1175
			const yyr1175 bool = false
			yyq1175[0] = x.Reason != ""
			yyq1175[1] = x.Message != ""
			if yyr1175 || yy2arr1175 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1175 int = 0
				for _, b := range yyq1175 {
					if b {
						yynn1175++
					}
				}
				r.EncodeMapStart(yynn1175)
			}
			if yyr1175 || yy2arr1175 {
				if yyq1175[0] {
					yym1177 := z.EncBinary()
					_ = yym1177
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1175[0] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1178 := z.EncBinary()
					_ = yym1178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1175 || yy2arr1175 {
				if yyq1175[1] {
					yym1180 := z.EncBinary()
					_ = yym1180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1175[1] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1181 := z.EncBinary()
					_ = yym1181
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1175 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1182 := z.DecBinary()
	_ = yym1182
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1183 := r.ReadMapStart()
			if yyl1183 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1183, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1183 := r.ReadArrayStart()
			if yyl1183 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1183, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1184Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1184Slc
	var yyhl1184 bool = l >= 0
	for yyj1184 := 0; ; yyj1184++ {
		if yyhl1184 {
			if yyj1184 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1184Slc = r.DecodeBytes(yys1184Slc, true, true)
		yys1184 := string(yys1184Slc)
		switch yys1184 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1184)
		} // end switch yys1184
	} // end for yyj1184
	if !yyhl1184 {
		r.ReadEnd()
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1187 int
	var yyb1187 bool
	var yyhl1187 bool = l >= 0
	yyj1187++
	if yyhl1187 {
		yyb1187 = yyj1187 > l
	} else {
		yyb1187 = r.CheckBreak()
	}
	if yyb1187 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1187++
	if yyhl1187 {
		yyb1187 = yyj1187 > l
	} else {
		yyb1187 = r.CheckBreak()
	}
	if yyb1187 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1187++
		if yyhl1187 {
			yyb1187 = yyj1187 > l
		} else {
			yyb1187 = r.CheckBreak()
		}
		if yyb1187 {
			break
		}
		z.DecStructFieldNotFound(yyj1187-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1190 := z.EncBinary()
		_ = yym1190
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1191 := !z.EncBinary()
			yy2arr1191 := z.EncBasicHandle().StructToArray
			var yyq1191 [1]bool
			_, _, _ = yysep1191, yyq1191, yy2arr1191
			const yyr1191 bool = false
			yyq1191[0] = true
			if yyr1191 || yy2arr1191 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1191 int = 0
				for _, b := range yyq1191 {
					if b {
						yynn1191++
					}
				}
				r.EncodeMapStart(yynn1191)
			}
			if yyr1191 || yy2arr1191 {
				if yyq1191[0] {
					yy1193 := &x.StartedAt
					yym1194 := z.EncBinary()
					_ = yym1194
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1193) {
					} else if yym1194 {
						z.EncBinaryMarshal(yy1193)
					} else if !yym1194 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1193)
					} else {
						z.EncFallback(yy1193)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1191[0] {
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					yy1195 := &x.StartedAt
					yym1196 := z.EncBinary()
					_ = yym1196
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1195) {
					} else if yym1196 {
						z.EncBinaryMarshal(yy1195)
					} else if !yym1196 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1195)
					} else {
						z.EncFallback(yy1195)
					}
				}
			}
			if yysep1191 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1197 := z.DecBinary()
	_ = yym1197
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1198 := r.ReadMapStart()
			if yyl1198 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1198, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1198 := r.ReadArrayStart()
			if yyl1198 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1198, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1199Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1199Slc
	var yyhl1199 bool = l >= 0
	for yyj1199 := 0; ; yyj1199++ {
		if yyhl1199 {
			if yyj1199 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1199Slc = r.DecodeBytes(yys1199Slc, true, true)
		yys1199 := string(yys1199Slc)
		switch yys1199 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1200 := &x.StartedAt
				yym1201 := z.DecBinary()
				_ = yym1201
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1200) {
				} else if yym1201 {
					z.DecBinaryUnmarshal(yyv1200)
				} else if !yym1201 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1200)
				} else {
					z.DecFallback(yyv1200, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1199)
		} // end switch yys1199
	} // end for yyj1199
	if !yyhl1199 {
		r.ReadEnd()
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1202 int
	var yyb1202 bool
	var yyhl1202 bool = l >= 0
	yyj1202++
	if yyhl1202 {
		yyb1202 = yyj1202 > l
	} else {
		yyb1202 = r.CheckBreak()
	}
	if yyb1202 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1203 := &x.StartedAt
		yym1204 := z.DecBinary()
		_ = yym1204
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1203) {
		} else if yym1204 {
			z.DecBinaryUnmarshal(yyv1203)
		} else if !yym1204 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1203)
		} else {
			z.DecFallback(yyv1203, false)
		}
	}
	for {
		yyj1202++
		if yyhl1202 {
			yyb1202 = yyj1202 > l
		} else {
			yyb1202 = r.CheckBreak()
		}
		if yyb1202 {
			break
		}
		z.DecStructFieldNotFound(yyj1202-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1205 := z.EncBinary()
		_ = yym1205
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1206 := !z.EncBinary()
			yy2arr1206 := z.EncBasicHandle().StructToArray
			var yyq1206 [7]bool
			_, _, _ = yysep1206, yyq1206, yy2arr1206
			const yyr1206 bool = false
			yyq1206[1] = x.Signal != 0
			yyq1206[2] = x.Reason != ""
			yyq1206[3] = x.Message != ""
			yyq1206[4] = true
			yyq1206[5] = true
			yyq1206[6] = x.ContainerID != ""
			if yyr1206 || yy2arr1206 {
				r.EncodeArrayStart(7)
			} else {
				var yynn1206 int = 1
				for _, b := range yyq1206 {
					if b {
						yynn1206++
					}
				}
				r.EncodeMapStart(yynn1206)
			}
			if yyr1206 || yy2arr1206 {
				yym1208 := z.EncBinary()
				_ = yym1208
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				yym1209 := z.EncBinary()
				_ = yym1209
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1206 || yy2arr1206 {
				if yyq1206[1] {
					yym1211 := z.EncBinary()
					_ = yym1211
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1206[1] {
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					yym1212 := z.EncBinary()
					_ = yym1212
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1206 || yy2arr1206 {
				if yyq1206[2] {
					yym1214 := z.EncBinary()
					_ = yym1214
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1206[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1215 := z.EncBinary()
					_ = yym1215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1206 || yy2arr1206 {
				if yyq1206[3] {
					yym1217 := z.EncBinary()
					_ = yym1217
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1206[3] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1218 := z.EncBinary()
					_ = yym1218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1206 || yy2arr1206 {
				if yyq1206[4] {
					yy1220 := &x.StartedAt
					yym1221 := z.EncBinary()
					_ = yym1221
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1220) {
					} else if yym1221 {
						z.EncBinaryMarshal(yy1220)
					} else if !yym1221 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1220)
					} else {
						z.EncFallback(yy1220)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1206[4] {
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					yy1222 := &x.StartedAt
					yym1223 := z.EncBinary()
					_ = yym1223
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1222) {
					} else if yym1223 {
						z.EncBinaryMarshal(yy1222)
					} else if !yym1223 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1222)
					} else {
						z.EncFallback(yy1222)
					}
				}
			}
			if yyr1206 || yy2arr1206 {
				if yyq1206[5] {
					yy1225 := &x.FinishedAt
					yym1226 := z.EncBinary()
					_ = yym1226
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1225) {
					} else if yym1226 {
						z.EncBinaryMarshal(yy1225)
					} else if !yym1226 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1225)
					} else {
						z.EncFallback(yy1225)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1206[5] {
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					yy1227 := &x.FinishedAt
					yym1228 := z.EncBinary()
					_ = yym1228
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1227) {
					} else if yym1228 {
						z.EncBinaryMarshal(yy1227)
					} else if !yym1228 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1227)
					} else {
						z.EncFallback(yy1227)
					}
				}
			}
			if yyr1206 || yy2arr1206 {
				if yyq1206[6] {
					yym1230 := z.EncBinary()
					_ = yym1230
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1206[6] {
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					yym1231 := z.EncBinary()
					_ = yym1231
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1206 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1232 := z.DecBinary()
	_ = yym1232
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1233 := r.ReadMapStart()
			if yyl1233 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1233, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1233 := r.ReadArrayStart()
			if yyl1233 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1233, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1234Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1234Slc
	var yyhl1234 bool = l >= 0
	for yyj1234 := 0; ; yyj1234++ {
		if yyhl1234 {
			if yyj1234 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1234Slc = r.DecodeBytes(yys1234Slc, true, true)
		yys1234 := string(yys1234Slc)
		switch yys1234 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1239 := &x.StartedAt
				yym1240 := z.DecBinary()
				_ = yym1240
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1239) {
				} else if yym1240 {
					z.DecBinaryUnmarshal(yyv1239)
				} else if !yym1240 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1239)
				} else {
					z.DecFallback(yyv1239, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1241 := &x.FinishedAt
				yym1242 := z.DecBinary()
				_ = yym1242
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1241) {
				} else if yym1242 {
					z.DecBinaryUnmarshal(yyv1241)
				} else if !yym1242 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1241)
				} else {
					z.DecFallback(yyv1241, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1234)
		} // end switch yys1234
	} // end for yyj1234
	if !yyhl1234 {
		r.ReadEnd()
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1244 int
	var yyb1244 bool
	var yyhl1244 bool = l >= 0
	yyj1244++
	if yyhl1244 {
		yyb1244 = yyj1244 > l
	} else {
		yyb1244 = r.CheckBreak()
	}
	if yyb1244 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1244++
	if yyhl1244 {
		yyb1244 = yyj1244 > l
	} else {
		yyb1244 = r.CheckBreak()
	}
	if yyb1244 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1244++
	if yyhl1244 {
		yyb1244 = yyj1244 > l
	} else {
		yyb1244 = r.CheckBreak()
	}
	if yyb1244 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1244++
	if yyhl1244 {
		yyb1244 = yyj1244 > l
	} else {
		yyb1244 = r.CheckBreak()
	}
	if yyb1244 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1244++
	if yyhl1244 {
		yyb1244 = yyj1244 > l
	} else {
		yyb1244 = r.CheckBreak()
	}
	if yyb1244 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1249 := &x.StartedAt
		yym1250 := z.DecBinary()
		_ = yym1250
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1249) {
		} else if yym1250 {
			z.DecBinaryUnmarshal(yyv1249)
		} else if !yym1250 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1249)
		} else {
			z.DecFallback(yyv1249, false)
		}
	}
	yyj1244++
	if yyhl1244 {
		yyb1244 = yyj1244 > l
	} else {
		yyb1244 = r.CheckBreak()
	}
	if yyb1244 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1251 := &x.FinishedAt
		yym1252 := z.DecBinary()
		_ = yym1252
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1251) {
		} else if yym1252 {
			z.DecBinaryUnmarshal(yyv1251)
		} else if !yym1252 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1251)
		} else {
			z.DecFallback(yyv1251, false)
		}
	}
	yyj1244++
	if yyhl1244 {
		yyb1244 = yyj1244 > l
	} else {
		yyb1244 = r.CheckBreak()
	}
	if yyb1244 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1244++
		if yyhl1244 {
			yyb1244 = yyj1244 > l
		} else {
			yyb1244 = r.CheckBreak()
		}
		if yyb1244 {
			break
		}
		z.DecStructFieldNotFound(yyj1244-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1254 := z.EncBinary()
		_ = yym1254
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1255 := !z.EncBinary()
			yy2arr1255 := z.EncBasicHandle().StructToArray
			var yyq1255 [3]bool
			_, _, _ = yysep1255, yyq1255, yy2arr1255
			const yyr1255 bool = false
			yyq1255[0] = x.Waiting != nil
			yyq1255[1] = x.Running != nil
			yyq1255[2] = x.Terminated != nil
			if yyr1255 || yy2arr1255 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1255 int = 0
				for _, b := range yyq1255 {
					if b {
						yynn1255++
					}
				}
				r.EncodeMapStart(yynn1255)
			}
			if yyr1255 || yy2arr1255 {
				if yyq1255[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1255[0] {
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1255 || yy2arr1255 {
				if yyq1255[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1255[1] {
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1255 || yy2arr1255 {
				if yyq1255[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1255[2] {
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1255 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1259 := z.DecBinary()
	_ = yym1259
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1260 := r.ReadMapStart()
			if yyl1260 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1260, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1260 := r.ReadArrayStart()
			if yyl1260 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1260, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1261Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1261Slc
	var yyhl1261 bool = l >= 0
	for yyj1261 := 0; ; yyj1261++ {
		if yyhl1261 {
			if yyj1261 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1261Slc = r.DecodeBytes(yys1261Slc, true, true)
		yys1261 := string(yys1261Slc)
		switch yys1261 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1261)
		} // end switch yys1261
	} // end for yyj1261
	if !yyhl1261 {
		r.ReadEnd()
	}
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1265 int
	var yyb1265 bool
	var yyhl1265 bool = l >= 0
	yyj1265++
	if yyhl1265 {
		yyb1265 = yyj1265 > l
	} else {
		yyb1265 = r.CheckBreak()
	}
	if yyb1265 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1265++
	if yyhl1265 {
		yyb1265 = yyj1265 > l
	} else {
		yyb1265 = r.CheckBreak()
	}
	if yyb1265 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1265++
	if yyhl1265 {
		yyb1265 = yyj1265 > l
	} else {
		yyb1265 = r.CheckBreak()
	}
	if yyb1265 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1265++
		if yyhl1265 {
			yyb1265 = yyj1265 > l
		} else {
			yyb1265 = r.CheckBreak()
		}
		if yyb1265 {
			break
		}
		z.DecStructFieldNotFound(yyj1265-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1269 := z.EncBinary()
		_ = yym1269
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1270 := !z.EncBinary()
			yy2arr1270 := z.EncBasicHandle().StructToArray
			var yyq1270 [8]bool
			_, _, _ = yysep1270, yyq1270, yy2arr1270
			const yyr1270 bool = false
			yyq1270[1] = true
			yyq1270[2] = true
			yyq1270[7] = x.ContainerID != ""
			if yyr1270 || yy2arr1270 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1270 int = 5
				for _, b := range yyq1270 {
					if b {
						yynn1270++
					}
				}
				r.EncodeMapStart(yynn1270)
			}
			if yyr1270 || yy2arr1270 {
				yym1272 := z.EncBinary()
				_ = yym1272
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1273 := z.EncBinary()
				_ = yym1273
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1270 || yy2arr1270 {
				if yyq1270[1] {
					yy1275 := &x.State
					yy1275.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1270[1] {
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					yy1276 := &x.State
					yy1276.CodecEncodeSelf(e)
				}
			}
			if yyr1270 || yy2arr1270 {
				if yyq1270[2] {
					yy1278 := &x.LastTerminationState
					yy1278.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1270[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					yy1279 := &x.LastTerminationState
					yy1279.CodecEncodeSelf(e)
				}
			}
			if yyr1270 || yy2arr1270 {
				yym1281 := z.EncBinary()
				_ = yym1281
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				yym1282 := z.EncBinary()
				_ = yym1282
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1270 || yy2arr1270 {
				yym1284 := z.EncBinary()
				_ = yym1284
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				yym1285 := z.EncBinary()
				_ = yym1285
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1270 || yy2arr1270 {
				yym1287 := z.EncBinary()
				_ = yym1287
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym1288 := z.EncBinary()
				_ = yym1288
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1270 || yy2arr1270 {
				yym1290 := z.EncBinary()
				_ = yym1290
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				yym1291 := z.EncBinary()
				_ = yym1291
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1270 || yy2arr1270 {
				if yyq1270[7] {
					yym1293 := z.EncBinary()
					_ = yym1293
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1270[7] {
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					yym1294 := z.EncBinary()
					_ = yym1294
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1270 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1295 := z.DecBinary()
	_ = yym1295
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1296 := r.ReadMapStart()
			if yyl1296 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1296, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1296 := r.ReadArrayStart()
			if yyl1296 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1296, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1297Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1297Slc
	var yyhl1297 bool = l >= 0
	for yyj1297 := 0; ; yyj1297++ {
		if yyhl1297 {
			if yyj1297 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1297Slc = r.DecodeBytes(yys1297Slc, true, true)
		yys1297 := string(yys1297Slc)
		switch yys1297 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1299 := &x.State
				yyv1299.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1300 := &x.LastTerminationState
				yyv1300.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1297)
		} // end switch yys1297
	} // end for yyj1297
	if !yyhl1297 {
		r.ReadEnd()
	}
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1306 int
	var yyb1306 bool
	var yyhl1306 bool = l >= 0
	yyj1306++
	if yyhl1306 {
		yyb1306 = yyj1306 > l
	} else {
		yyb1306 = r.CheckBreak()
	}
	if yyb1306 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1306++
	if yyhl1306 {
		yyb1306 = yyj1306 > l
	} else {
		yyb1306 = r.CheckBreak()
	}
	if yyb1306 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1308 := &x.State
		yyv1308.CodecDecodeSelf(d)
	}
	yyj1306++
	if yyhl1306 {
		yyb1306 = yyj1306 > l
	} else {
		yyb1306 = r.CheckBreak()
	}
	if yyb1306 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1309 := &x.LastTerminationState
		yyv1309.CodecDecodeSelf(d)
	}
	yyj1306++
	if yyhl1306 {
		yyb1306 = yyj1306 > l
	} else {
		yyb1306 = r.CheckBreak()
	}
	if yyb1306 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1306++
	if yyhl1306 {
		yyb1306 = yyj1306 > l
	} else {
		yyb1306 = r.CheckBreak()
	}
	if yyb1306 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1306++
	if yyhl1306 {
		yyb1306 = yyj1306 > l
	} else {
		yyb1306 = r.CheckBreak()
	}
	if yyb1306 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1306++
	if yyhl1306 {
		yyb1306 = yyj1306 > l
	} else {
		yyb1306 = r.CheckBreak()
	}
	if yyb1306 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1306++
	if yyhl1306 {
		yyb1306 = yyj1306 > l
	} else {
		yyb1306 = r.CheckBreak()
	}
	if yyb1306 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1306++
		if yyhl1306 {
			yyb1306 = yyj1306 > l
		} else {
			yyb1306 = r.CheckBreak()
		}
		if yyb1306 {
			break
		}
		z.DecStructFieldNotFound(yyj1306-1, "")
	}
	r.ReadEnd()
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1315 := z.EncBinary()
	_ = yym1315
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1316 := z.DecBinary()
	_ = yym1316
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1317 := z.EncBinary()
	_ = yym1317
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1318 := z.DecBinary()
	_ = yym1318
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1319 := z.EncBinary()
		_ = yym1319
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1320 := !z.EncBinary()
			yy2arr1320 := z.EncBasicHandle().StructToArray
			var yyq1320 [6]bool
			_, _, _ = yysep1320, yyq1320, yy2arr1320
			const yyr1320 bool = false
			yyq1320[2] = true
			yyq1320[3] = true
			yyq1320[4] = x.Reason != ""
			yyq1320[5] = x.Message != ""
			if yyr1320 || yy2arr1320 {
				r.EncodeArrayStart(6)
			} else {
				var yynn1320 int = 2
				for _, b := range yyq1320 {
					if b {
						yynn1320++
					}
				}
				r.EncodeMapStart(yynn1320)
			}
			if yyr1320 || yy2arr1320 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1320 || yy2arr1320 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1320 || yy2arr1320 {
				if yyq1320[2] {
					yy1324 := &x.LastProbeTime
					yym1325 := z.EncBinary()
					_ = yym1325
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1324) {
					} else if yym1325 {
						z.EncBinaryMarshal(yy1324)
					} else if !yym1325 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1324)
					} else {
						z.EncFallback(yy1324)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1320[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					yy1326 := &x.LastProbeTime
					yym1327 := z.EncBinary()
					_ = yym1327
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1326) {
					} else if yym1327 {
						z.EncBinaryMarshal(yy1326)
					} else if !yym1327 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1326)
					} else {
						z.EncFallback(yy1326)
					}
				}
			}
			if yyr1320 || yy2arr1320 {
				if yyq1320[3] {
					yy1329 := &x.LastTransitionTime
					yym1330 := z.EncBinary()
					_ = yym1330
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1329) {
					} else if yym1330 {
						z.EncBinaryMarshal(yy1329)
					} else if !yym1330 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1329)
					} else {
						z.EncFallback(yy1329)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1320[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy1331 := &x.LastTransitionTime
					yym1332 := z.EncBinary()
					_ = yym1332
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1331) {
					} else if yym1332 {
						z.EncBinaryMarshal(yy1331)
					} else if !yym1332 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1331)
					} else {
						z.EncFallback(yy1331)
					}
				}
			}
			if yyr1320 || yy2arr1320 {
				if yyq1320[4] {
					yym1334 := z.EncBinary()
					_ = yym1334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1320[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1335 := z.EncBinary()
					_ = yym1335
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1320 || yy2arr1320 {
				if yyq1320[5] {
					yym1337 := z.EncBinary()
					_ = yym1337
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1320[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1338 := z.EncBinary()
					_ = yym1338
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1320 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1339 := z.DecBinary()
	_ = yym1339
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1340 := r.ReadMapStart()
			if yyl1340 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1340, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1340 := r.ReadArrayStart()
			if yyl1340 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1340, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1341Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1341Slc
	var yyhl1341 bool = l >= 0
	for yyj1341 := 0; ; yyj1341++ {
		if yyhl1341 {
			if yyj1341 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1341Slc = r.DecodeBytes(yys1341Slc, true, true)
		yys1341 := string(yys1341Slc)
		switch yys1341 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1344 := &x.LastProbeTime
				yym1345 := z.DecBinary()
				_ = yym1345
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1344) {
				} else if yym1345 {
					z.DecBinaryUnmarshal(yyv1344)
				} else if !yym1345 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1344)
				} else {
					z.DecFallback(yyv1344, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1346 := &x.LastTransitionTime
				yym1347 := z.DecBinary()
				_ = yym1347
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1346) {
				} else if yym1347 {
					z.DecBinaryUnmarshal(yyv1346)
				} else if !yym1347 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1346)
				} else {
					z.DecFallback(yyv1346, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1341)
		} // end switch yys1341
	} // end for yyj1341
	if !yyhl1341 {
		r.ReadEnd()
	}
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1350 int
	var yyb1350 bool
	var yyhl1350 bool = l >= 0
	yyj1350++
	if yyhl1350 {
		yyb1350 = yyj1350 > l
	} else {
		yyb1350 = r.CheckBreak()
	}
	if yyb1350 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1350++
	if yyhl1350 {
		yyb1350 = yyj1350 > l
	} else {
		yyb1350 = r.CheckBreak()
	}
	if yyb1350 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1350++
	if yyhl1350 {
		yyb1350 = yyj1350 > l
	} else {
		yyb1350 = r.CheckBreak()
	}
	if yyb1350 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1353 := &x.LastProbeTime
		yym1354 := z.DecBinary()
		_ = yym1354
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1353) {
		} else if yym1354 {
			z.DecBinaryUnmarshal(yyv1353)
		} else if !yym1354 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1353)
		} else {
			z.DecFallback(yyv1353, false)
		}
	}
	yyj1350++
	if yyhl1350 {
		yyb1350 = yyj1350 > l
	} else {
		yyb1350 = r.CheckBreak()
	}
	if yyb1350 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1355 := &x.LastTransitionTime
		yym1356 := z.DecBinary()
		_ = yym1356
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1355) {
		} else if yym1356 {
			z.DecBinaryUnmarshal(yyv1355)
		} else if !yym1356 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1355)
		} else {
			z.DecFallback(yyv1355, false)
		}
	}
	yyj1350++
	if yyhl1350 {
		yyb1350 = yyj1350 > l
	} else {
		yyb1350 = r.CheckBreak()
	}
	if yyb1350 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1350++
	if yyhl1350 {
		yyb1350 = yyj1350 > l
	} else {
		yyb1350 = r.CheckBreak()
	}
	if yyb1350 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1350++
		if yyhl1350 {
			yyb1350 = yyj1350 > l
		} else {
			yyb1350 = r.CheckBreak()
		}
		if yyb1350 {
			break
		}
		z.DecStructFieldNotFound(yyj1350-1, "")
	}
	r.ReadEnd()
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1359 := z.EncBinary()
	_ = yym1359
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1360 := z.DecBinary()
	_ = yym1360
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1361 := z.EncBinary()
	_ = yym1361
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1362 := z.DecBinary()
	_ = yym1362
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1363 := z.EncBinary()
		_ = yym1363
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1364 := !z.EncBinary()
			yy2arr1364 := z.EncBasicHandle().StructToArray
			var yyq1364 [15]bool
			_, _, _ = yysep1364, yyq1364, yy2arr1364
			const yyr1364 bool = false
			yyq1364[0] = len(x.Volumes) != 0
			yyq1364[2] = x.RestartPolicy != ""
			yyq1364[3] = x.TerminationGracePeriodSeconds != nil
			yyq1364[4] = x.ActiveDeadlineSeconds != nil
			yyq1364[5] = x.DNSPolicy != ""
			yyq1364[6] = len(x.NodeSelector) != 0
			yyq1364[7] = x.ServiceAccountName != ""
			yyq1364[8] = x.DeprecatedServiceAccount != ""
			yyq1364[9] = x.NodeName != ""
			yyq1364[10] = x.HostNetwork != false
			yyq1364[11] = x.HostPID != false
			yyq1364[12] = x.HostIPC != false
			yyq1364[13] = x.SecurityContext != nil
			yyq1364[14] = len(x.ImagePullSecrets) != 0
			if yyr1364 || yy2arr1364 {
				r.EncodeArrayStart(15)
			} else {
				var yynn1364 int = 1
				for _, b := range yyq1364 {
					if b {
						yynn1364++
					}
				}
				r.EncodeMapStart(yynn1364)
			}
			if yyr1364 || yy2arr1364 {
				if yyq1364[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1366 := z.EncBinary()
						_ = yym1366
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1364[0] {
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1367 := z.EncBinary()
						_ = yym1367
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr1364 || yy2arr1364 {
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1369 := z.EncBinary()
					_ = yym1369
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1370 := z.EncBinary()
					_ = yym1370
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1364 || yy2arr1364 {
				if yyq1364[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1364[2] {
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1364 || yy2arr1364 {
				if yyq1364[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1373 := *x.TerminationGracePeriodSeconds
						yym1374 := z.EncBinary()
						_ = yym1374
						if false {
						} else {
							r.EncodeInt(int64(yy1373))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1364[3] {
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1375 := *x.TerminationGracePeriodSeconds
						yym1376 := z.EncBinary()
						_ = yym1376
						if false {
						} else {
							r.EncodeInt(int64(yy1375))
						}
					}
				}
			}
			if yyr1364 || yy2arr1364 {
				if yyq1364[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1378 := *x.ActiveDeadlineSeconds
						yym1379 := z.EncBinary()
						_ = yym1379
						if false {
						} else {
							r.EncodeInt(int64(yy1378))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1364[4] {
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1380 := *x.ActiveDeadlineSeconds
						yym1381 := z.EncBinary()
						_ = yym1381
						if false {
						} else {
							r.EncodeInt(int64(yy1380))
						}
					}
				}
			}
			if yyr1364 || yy2arr1364 {
				if yyq1364[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1364[5] {
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1364 || yy2arr1364 {
				if yyq1364[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1384 := z.EncBinary()
						_ = yym1384
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1364[6] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1385 := z.EncBinary()
						_ = yym1385
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1364 || yy2arr1364 {
				if yyq1364[7] {
					yym1387 := z.EncBinary()
					_ = yym1387
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1364[7] {
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					yym1388 := z.EncBinary()
					_ = yym1388
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr1364 || yy2arr1364 {
				if yyq1364[8] {
					yym1390 := z.EncBinary()
					_ = yym1390
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1364[8] {
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					yym1391 := z.EncBinary()
					_ = yym1391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr1364 || yy2arr1364 {
				if yyq1364[9] {
					yym1393 := z.EncBinary()
					_ = yym1393
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1364[9] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					yym1394 := z.EncBinary()
					_ = yym1394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1364 || yy2arr1364 {
				if yyq1364[10] {
					yym1396 := z.EncBinary()
					_ = yym1396
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1364[10] {
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					yym1397 := z.EncBinary()
					_ = yym1397
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1364 || yy2arr1364 {
				if yyq1364[11] {
					yym1399 := z.EncBinary()
					_ = yym1399
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1364[11] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					yym1400 := z.EncBinary()
					_ = yym1400
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1364 || yy2arr1364 {
				if yyq1364[12] {
					yym1402 := z.EncBinary()
					_ = yym1402
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1364[12] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					yym1403 := z.EncBinary()
					_ = yym1403
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1364 || yy2arr1364 {
				if yyq1364[13] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1364[13] {
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1364 || yy2arr1364 {
				if yyq1364[14] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1406 := z.EncBinary()
						_ = yym1406
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1364[14] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1407 := z.EncBinary()
						_ = yym1407
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep1364 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1408 := z.DecBinary()
	_ = yym1408
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1409 := r.ReadMapStart()
			if yyl1409 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1409, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1409 := r.ReadArrayStart()
			if yyl1409 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1409, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1410Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1410Slc
	var yyhl1410 bool = l >= 0
	for yyj1410 := 0; ; yyj1410++ {
		if yyhl1410 {
			if yyj1410 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1410Slc = r.DecodeBytes(yys1410Slc, true, true)
		yys1410 := string(yys1410Slc)
		switch yys1410 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1411 := &x.Volumes
				yym1412 := z.DecBinary()
				_ = yym1412
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1411), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1413 := &x.Containers
				yym1414 := z.DecBinary()
				_ = yym1414
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1413), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1417 := z.DecBinary()
				_ = yym1417
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1419 := z.DecBinary()
				_ = yym1419
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1421 := &x.NodeSelector
				yym1422 := z.DecBinary()
				_ = yym1422
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1421, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1430 := &x.ImagePullSecrets
				yym1431 := z.DecBinary()
				_ = yym1431
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1430), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1410)
		} // end switch yys1410
	} // end for yyj1410
	if !yyhl1410 {
		r.ReadEnd()
	}
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1432 int
	var yyb1432 bool
	var yyhl1432 bool = l >= 0
	yyj1432++
	if yyhl1432 {
		yyb1432 = yyj1432 > l
	} else {
		yyb1432 = r.CheckBreak()
	}
	if yyb1432 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1433 := &x.Volumes
		yym1434 := z.DecBinary()
		_ = yym1434
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1433), d)
		}
	}
	yyj1432++
	if yyhl1432 {
		yyb1432 = yyj1432 > l
	} else {
		yyb1432 = r.CheckBreak()
	}
	if yyb1432 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1435 := &x.Containers
		yym1436 := z.DecBinary()
		_ = yym1436
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1435), d)
		}
	}
	yyj1432++
	if yyhl1432 {
		yyb1432 = yyj1432 > l
	} else {
		yyb1432 = r.CheckBreak()
	}
	if yyb1432 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1432++
	if yyhl1432 {
		yyb1432 = yyj1432 > l
	} else {
		yyb1432 = r.CheckBreak()
	}
	if yyb1432 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1439 := z.DecBinary()
		_ = yym1439
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1432++
	if yyhl1432 {
		yyb1432 = yyj1432 > l
	} else {
		yyb1432 = r.CheckBreak()
	}
	if yyb1432 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1441 := z.DecBinary()
		_ = yym1441
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1432++
	if yyhl1432 {
		yyb1432 = yyj1432 > l
	} else {
		yyb1432 = r.CheckBreak()
	}
	if yyb1432 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1432++
	if yyhl1432 {
		yyb1432 = yyj1432 > l
	} else {
		yyb1432 = r.CheckBreak()
	}
	if yyb1432 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1443 := &x.NodeSelector
		yym1444 := z.DecBinary()
		_ = yym1444
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1443, false, d)
		}
	}
	yyj1432++
	if yyhl1432 {
		yyb1432 = yyj1432 > l
	} else {
		yyb1432 = r.CheckBreak()
	}
	if yyb1432 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1432++
	if yyhl1432 {
		yyb1432 = yyj1432 > l
	} else {
		yyb1432 = r.CheckBreak()
	}
	if yyb1432 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj1432++
	if yyhl1432 {
		yyb1432 = yyj1432 > l
	} else {
		yyb1432 = r.CheckBreak()
	}
	if yyb1432 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1432++
	if yyhl1432 {
		yyb1432 = yyj1432 > l
	} else {
		yyb1432 = r.CheckBreak()
	}
	if yyb1432 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1432++
	if yyhl1432 {
		yyb1432 = yyj1432 > l
	} else {
		yyb1432 = r.CheckBreak()
	}
	if yyb1432 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1432++
	if yyhl1432 {
		yyb1432 = yyj1432 > l
	} else {
		yyb1432 = r.CheckBreak()
	}
	if yyb1432 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1432++
	if yyhl1432 {
		yyb1432 = yyj1432 > l
	} else {
		yyb1432 = r.CheckBreak()
	}
	if yyb1432 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1432++
	if yyhl1432 {
		yyb1432 = yyj1432 > l
	} else {
		yyb1432 = r.CheckBreak()
	}
	if yyb1432 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1452 := &x.ImagePullSecrets
		yym1453 := z.DecBinary()
		_ = yym1453
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1452), d)
		}
	}
	for {
		yyj1432++
		if yyhl1432 {
			yyb1432 = yyj1432 > l
		} else {
			yyb1432 = r.CheckBreak()
		}
		if yyb1432 {
			break
		}
		z.DecStructFieldNotFound(yyj1432-1, "")
	}
	r.ReadEnd()
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1454 := z.EncBinary()
		_ = yym1454
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1455 := !z.EncBinary()
			yy2arr1455 := z.EncBasicHandle().StructToArray
			var yyq1455 [5]bool
			_, _, _ = yysep1455, yyq1455, yy2arr1455
			const yyr1455 bool = false
			yyq1455[0] = x.SELinuxOptions != nil
			yyq1455[1] = x.RunAsUser != nil
			yyq1455[2] = x.RunAsNonRoot != nil
			yyq1455[3] = len(x.SupplementalGroups) != 0
			yyq1455[4] = x.FSGroup != nil
			if yyr1455 || yy2arr1455 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1455 int = 0
				for _, b := range yyq1455 {
					if b {
						yynn1455++
					}
				}
				r.EncodeMapStart(yynn1455)
			}
			if yyr1455 || yy2arr1455 {
				if yyq1455[0] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1455[0] {
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1455 || yy2arr1455 {
				if yyq1455[1] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1458 := *x.RunAsUser
						yym1459 := z.EncBinary()
						_ = yym1459
						if false {
						} else {
							r.EncodeInt(int64(yy1458))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1455[1] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1460 := *x.RunAsUser
						yym1461 := z.EncBinary()
						_ = yym1461
						if false {
						} else {
							r.EncodeInt(int64(yy1460))
						}
					}
				}
			}
			if yyr1455 || yy2arr1455 {
				if yyq1455[2] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1463 := *x.RunAsNonRoot
						yym1464 := z.EncBinary()
						_ = yym1464
						if false {
						} else {
							r.EncodeBool(bool(yy1463))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1455[2] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1465 := *x.RunAsNonRoot
						yym1466 := z.EncBinary()
						_ = yym1466
						if false {
						} else {
							r.EncodeBool(bool(yy1465))
						}
					}
				}
			}
			if yyr1455 || yy2arr1455 {
				if yyq1455[3] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1468 := z.EncBinary()
						_ = yym1468
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1455[3] {
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1469 := z.EncBinary()
						_ = yym1469
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr1455 || yy2arr1455 {
				if yyq1455[4] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1471 := *x.FSGroup
						yym1472 := z.EncBinary()
						_ = yym1472
						if false {
						} else {
							r.EncodeInt(int64(yy1471))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1455[4] {
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1473 := *x.FSGroup
						yym1474 := z.EncBinary()
						_ = yym1474
						if false {
						} else {
							r.EncodeInt(int64(yy1473))
						}
					}
				}
			}
			if yysep1455 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1475 := z.DecBinary()
	_ = yym1475
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1476 := r.ReadMapStart()
			if yyl1476 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1476, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1476 := r.ReadArrayStart()
			if yyl1476 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1476, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1477Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1477Slc
	var yyhl1477 bool = l >= 0
	for yyj1477 := 0; ; yyj1477++ {
		if yyhl1477 {
			if yyj1477 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1477Slc = r.DecodeBytes(yys1477Slc, true, true)
		yys1477 := string(yys1477Slc)
		switch yys1477 {
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym1480 := z.DecBinary()
				_ = yym1480
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym1482 := z.DecBinary()
				_ = yym1482
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv1483 := &x.SupplementalGroups
				yym1484 := z.DecBinary()
				_ = yym1484
				if false {
				} else {
					z.F.DecSliceInt64X(yyv1483, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym1486 := z.DecBinary()
				_ = yym1486
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1477)
		} // end switch yys1477
	} // end for yyj1477
	if !yyhl1477 {
		r.ReadEnd()
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1487 int
	var yyb1487 bool
	var yyhl1487 bool = l >= 0
	yyj1487++
	if yyhl1487 {
		yyb1487 = yyj1487 > l
	} else {
		yyb1487 = r.CheckBreak()
	}
	if yyb1487 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj1487++
	if yyhl1487 {
		yyb1487 = yyj1487 > l
	} else {
		yyb1487 = r.CheckBreak()
	}
	if yyb1487 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym1490 := z.DecBinary()
		_ = yym1490
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj1487++
	if yyhl1487 {
		yyb1487 = yyj1487 > l
	} else {
		yyb1487 = r.CheckBreak()
	}
	if yyb1487 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym1492 := z.DecBinary()
		_ = yym1492
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj1487++
	if yyhl1487 {
		yyb1487 = yyj1487 > l
	} else {
		yyb1487 = r.CheckBreak()
	}
	if yyb1487 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv1493 := &x.SupplementalGroups
		yym1494 := z.DecBinary()
		_ = yym1494
		if false {
		} else {
			z.F.DecSliceInt64X(yyv1493, false, d)
		}
	}
	yyj1487++
	if yyhl1487 {
		yyb1487 = yyj1487 > l
	} else {
		yyb1487 = r.CheckBreak()
	}
	if yyb1487 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym1496 := z.DecBinary()
		_ = yym1496
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj1487++
		if yyhl1487 {
			yyb1487 = yyj1487 > l
		} else {
			yyb1487 = r.CheckBreak()
		}
		if yyb1487 {
			break
		}
		z.DecStructFieldNotFound(yyj1487-1, "")
	}
	r.ReadEnd()
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1497 := z.EncBinary()
		_ = yym1497
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1498 := !z.EncBinary()
			yy2arr1498 := z.EncBasicHandle().StructToArray
			var yyq1498 [8]bool
			_, _, _ = yysep1498, yyq1498, yy2arr1498
			const yyr1498 bool = false
			yyq1498[0] = x.Phase != ""
			yyq1498[1] = len(x.Conditions) != 0
			yyq1498[2] = x.Message != ""
			yyq1498[3] = x.Reason != ""
			yyq1498[4] = x.HostIP != ""
			yyq1498[5] = x.PodIP != ""
			yyq1498[6] = x.StartTime != nil
			yyq1498[7] = len(x.ContainerStatuses) != 0
			if yyr1498 || yy2arr1498 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1498 int = 0
				for _, b := range yyq1498 {
					if b {
						yynn1498++
					}
				}
				r.EncodeMapStart(yynn1498)
			}
			if yyr1498 || yy2arr1498 {
				if yyq1498[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1498[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1498 || yy2arr1498 {
				if yyq1498[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1501 := z.EncBinary()
						_ = yym1501
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1498[1] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1502 := z.EncBinary()
						_ = yym1502
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1498 || yy2arr1498 {
				if yyq1498[2] {
					yym1504 := z.EncBinary()
					_ = yym1504
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1498[2] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1505 := z.EncBinary()
					_ = yym1505
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1498 || yy2arr1498 {
				if yyq1498[3] {
					yym1507 := z.EncBinary()
					_ = yym1507
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1498[3] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1508 := z.EncBinary()
					_ = yym1508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1498 || yy2arr1498 {
				if yyq1498[4] {
					yym1510 := z.EncBinary()
					_ = yym1510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1498[4] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					yym1511 := z.EncBinary()
					_ = yym1511
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1498 || yy2arr1498 {
				if yyq1498[5] {
					yym1513 := z.EncBinary()
					_ = yym1513
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1498[5] {
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					yym1514 := z.EncBinary()
					_ = yym1514
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1498 || yy2arr1498 {
				if yyq1498[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1516 := z.EncBinary()
						_ = yym1516
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1516 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1516 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1498[6] {
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1517 := z.EncBinary()
						_ = yym1517
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1517 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1517 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1498 || yy2arr1498 {
				if yyq1498[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1519 := z.EncBinary()
						_ = yym1519
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1498[7] {
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1520 := z.EncBinary()
						_ = yym1520
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yysep1498 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1521 := z.DecBinary()
	_ = yym1521
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1522 := r.ReadMapStart()
			if yyl1522 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1522, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1522 := r.ReadArrayStart()
			if yyl1522 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1522, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1523Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1523Slc
	var yyhl1523 bool = l >= 0
	for yyj1523 := 0; ; yyj1523++ {
		if yyhl1523 {
			if yyj1523 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1523Slc = r.DecodeBytes(yys1523Slc, true, true)
		yys1523 := string(yys1523Slc)
		switch yys1523 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1525 := &x.Conditions
				yym1526 := z.DecBinary()
				_ = yym1526
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1525), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym1532 := z.DecBinary()
				_ = yym1532
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1532 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1532 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1533 := &x.ContainerStatuses
				yym1534 := z.DecBinary()
				_ = yym1534
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1533), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1523)
		} // end switch yys1523
	} // end for yyj1523
	if !yyhl1523 {
		r.ReadEnd()
	}
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1535 int
	var yyb1535 bool
	var yyhl1535 bool = l >= 0
	yyj1535++
	if yyhl1535 {
		yyb1535 = yyj1535 > l
	} else {
		yyb1535 = r.CheckBreak()
	}
	if yyb1535 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1535++
	if yyhl1535 {
		yyb1535 = yyj1535 > l
	} else {
		yyb1535 = r.CheckBreak()
	}
	if yyb1535 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1537 := &x.Conditions
		yym1538 := z.DecBinary()
		_ = yym1538
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1537), d)
		}
	}
	yyj1535++
	if yyhl1535 {
		yyb1535 = yyj1535 > l
	} else {
		yyb1535 = r.CheckBreak()
	}
	if yyb1535 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1535++
	if yyhl1535 {
		yyb1535 = yyj1535 > l
	} else {
		yyb1535 = r.CheckBreak()
	}
	if yyb1535 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1535++
	if yyhl1535 {
		yyb1535 = yyj1535 > l
	} else {
		yyb1535 = r.CheckBreak()
	}
	if yyb1535 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1535++
	if yyhl1535 {
		yyb1535 = yyj1535 > l
	} else {
		yyb1535 = r.CheckBreak()
	}
	if yyb1535 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1535++
	if yyhl1535 {
		yyb1535 = yyj1535 > l
	} else {
		yyb1535 = r.CheckBreak()
	}
	if yyb1535 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym1544 := z.DecBinary()
		_ = yym1544
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1544 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1544 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1535++
	if yyhl1535 {
		yyb1535 = yyj1535 > l
	} else {
		yyb1535 = r.CheckBreak()
	}
	if yyb1535 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1545 := &x.ContainerStatuses
		yym1546 := z.DecBinary()
		_ = yym1546
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1545), d)
		}
	}
	for {
		yyj1535++
		if yyhl1535 {
			yyb1535 = yyj1535 > l
		} else {
			yyb1535 = r.CheckBreak()
		}
		if yyb1535 {
			break
		}
		z.DecStructFieldNotFound(yyj1535-1, "")
	}
	r.ReadEnd()
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1547 := z.EncBinary()
		_ = yym1547
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1548 := !z.EncBinary()
			yy2arr1548 := z.EncBasicHandle().StructToArray
			var yyq1548 [4]bool
			_, _, _ = yysep1548, yyq1548, yy2arr1548
			const yyr1548 bool = false
			yyq1548[0] = x.Kind != ""
			yyq1548[1] = x.APIVersion != ""
			yyq1548[2] = true
			yyq1548[3] = true
			if yyr1548 || yy2arr1548 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1548 int = 0
				for _, b := range yyq1548 {
					if b {
						yynn1548++
					}
				}
				r.EncodeMapStart(yynn1548)
			}
			if yyr1548 || yy2arr1548 {
				if yyq1548[0] {
					yym1550 := z.EncBinary()
					_ = yym1550
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1548[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1551 := z.EncBinary()
					_ = yym1551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1548 || yy2arr1548 {
				if yyq1548[1] {
					yym1553 := z.EncBinary()
					_ = yym1553
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1548[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1554 := z.EncBinary()
					_ = yym1554
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1548 || yy2arr1548 {
				if yyq1548[2] {
					yy1556 := &x.ObjectMeta
					yy1556.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1548[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1557 := &x.ObjectMeta
					yy1557.CodecEncodeSelf(e)
				}
			}
			if yyr1548 || yy2arr1548 {
				if yyq1548[3] {
					yy1559 := &x.Status
					yy1559.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1548[3] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1560 := &x.Status
					yy1560.CodecEncodeSelf(e)
				}
			}
			if yysep1548 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1561 := z.DecBinary()
	_ = yym1561
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1562 := r.ReadMapStart()
			if yyl1562 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1562, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1562 := r.ReadArrayStart()
			if yyl1562 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1562, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1563Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1563Slc
	var yyhl1563 bool = l >= 0
	for yyj1563 := 0; ; yyj1563++ {
		if yyhl1563 {
			if yyj1563 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1563Slc = r.DecodeBytes(yys1563Slc, true, true)
		yys1563 := string(yys1563Slc)
		switch yys1563 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1566 := &x.ObjectMeta
				yyv1566.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1567 := &x.Status
				yyv1567.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1563)
		} // end switch yys1563
	} // end for yyj1563
	if !yyhl1563 {
		r.ReadEnd()
	}
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1568 int
	var yyb1568 bool
	var yyhl1568 bool = l >= 0
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1571 := &x.ObjectMeta
		yyv1571.CodecDecodeSelf(d)
	}
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1572 := &x.Status
		yyv1572.CodecDecodeSelf(d)
	}
	for {
		yyj1568++
		if yyhl1568 {
			yyb1568 = yyj1568 > l
		} else {
			yyb1568 = r.CheckBreak()
		}
		if yyb1568 {
			break
		}
		z.DecStructFieldNotFound(yyj1568-1, "")
	}
	r.ReadEnd()
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1573 := z.EncBinary()
		_ = yym1573
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1574 := !z.EncBinary()
			yy2arr1574 := z.EncBasicHandle().StructToArray
			var yyq1574 [5]bool
			_, _, _ = yysep1574, yyq1574, yy2arr1574
			const yyr1574 bool = false
			yyq1574[0] = x.Kind != ""
			yyq1574[1] = x.APIVersion != ""
			yyq1574[2] = true
			yyq1574[3] = true
			yyq1574[4] = true
			if yyr1574 || yy2arr1574 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1574 int = 0
				for _, b := range yyq1574 {
					if b {
						yynn1574++
					}
				}
				r.EncodeMapStart(yynn1574)
			}
			if yyr1574 || yy2arr1574 {
				if yyq1574[0] {
					yym1576 := z.EncBinary()
					_ = yym1576
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1574[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1577 := z.EncBinary()
					_ = yym1577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1574 || yy2arr1574 {
				if yyq1574[1] {
					yym1579 := z.EncBinary()
					_ = yym1579
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1574[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1580 := z.EncBinary()
					_ = yym1580
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1574 || yy2arr1574 {
				if yyq1574[2] {
					yy1582 := &x.ObjectMeta
					yy1582.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1574[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1583 := &x.ObjectMeta
					yy1583.CodecEncodeSelf(e)
				}
			}
			if yyr1574 || yy2arr1574 {
				if yyq1574[3] {
					yy1585 := &x.Spec
					yy1585.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1574[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1586 := &x.Spec
					yy1586.CodecEncodeSelf(e)
				}
			}
			if yyr1574 || yy2arr1574 {
				if yyq1574[4] {
					yy1588 := &x.Status
					yy1588.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1574[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1589 := &x.Status
					yy1589.CodecEncodeSelf(e)
				}
			}
			if yysep1574 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1590 := z.DecBinary()
	_ = yym1590
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1591 := r.ReadMapStart()
			if yyl1591 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1591, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1591 := r.ReadArrayStart()
			if yyl1591 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1591, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1592Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1592Slc
	var yyhl1592 bool = l >= 0
	for yyj1592 := 0; ; yyj1592++ {
		if yyhl1592 {
			if yyj1592 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1592Slc = r.DecodeBytes(yys1592Slc, true, true)
		yys1592 := string(yys1592Slc)
		switch yys1592 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1595 := &x.ObjectMeta
				yyv1595.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1596 := &x.Spec
				yyv1596.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1597 := &x.Status
				yyv1597.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1592)
		} // end switch yys1592
	} // end for yyj1592
	if !yyhl1592 {
		r.ReadEnd()
	}
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1598 int
	var yyb1598 bool
	var yyhl1598 bool = l >= 0
	yyj1598++
	if yyhl1598 {
		yyb1598 = yyj1598 > l
	} else {
		yyb1598 = r.CheckBreak()
	}
	if yyb1598 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1598++
	if yyhl1598 {
		yyb1598 = yyj1598 > l
	} else {
		yyb1598 = r.CheckBreak()
	}
	if yyb1598 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1598++
	if yyhl1598 {
		yyb1598 = yyj1598 > l
	} else {
		yyb1598 = r.CheckBreak()
	}
	if yyb1598 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1601 := &x.ObjectMeta
		yyv1601.CodecDecodeSelf(d)
	}
	yyj1598++
	if yyhl1598 {
		yyb1598 = yyj1598 > l
	} else {
		yyb1598 = r.CheckBreak()
	}
	if yyb1598 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1602 := &x.Spec
		yyv1602.CodecDecodeSelf(d)
	}
	yyj1598++
	if yyhl1598 {
		yyb1598 = yyj1598 > l
	} else {
		yyb1598 = r.CheckBreak()
	}
	if yyb1598 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1603 := &x.Status
		yyv1603.CodecDecodeSelf(d)
	}
	for {
		yyj1598++
		if yyhl1598 {
			yyb1598 = yyj1598 > l
		} else {
			yyb1598 = r.CheckBreak()
		}
		if yyb1598 {
			break
		}
		z.DecStructFieldNotFound(yyj1598-1, "")
	}
	r.ReadEnd()
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1604 := z.EncBinary()
		_ = yym1604
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1605 := !z.EncBinary()
			yy2arr1605 := z.EncBasicHandle().StructToArray
			var yyq1605 [4]bool
			_, _, _ = yysep1605, yyq1605, yy2arr1605
			const yyr1605 bool = false
			yyq1605[0] = x.Kind != ""
			yyq1605[1] = x.APIVersion != ""
			yyq1605[2] = true
			if yyr1605 || yy2arr1605 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1605 int = 1
				for _, b := range yyq1605 {
					if b {
						yynn1605++
					}
				}
				r.EncodeMapStart(yynn1605)
			}
			if yyr1605 || yy2arr1605 {
				if yyq1605[0] {
					yym1607 := z.EncBinary()
					_ = yym1607
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1605[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1608 := z.EncBinary()
					_ = yym1608
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1605 || yy2arr1605 {
				if yyq1605[1] {
					yym1610 := z.EncBinary()
					_ = yym1610
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1605[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1611 := z.EncBinary()
					_ = yym1611
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1605 || yy2arr1605 {
				if yyq1605[2] {
					yy1613 := &x.ListMeta
					yym1614 := z.EncBinary()
					_ = yym1614
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1613) {
					} else {
						z.EncFallback(yy1613)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1605[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1615 := &x.ListMeta
					yym1616 := z.EncBinary()
					_ = yym1616
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1615) {
					} else {
						z.EncFallback(yy1615)
					}
				}
			}
			if yyr1605 || yy2arr1605 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1618 := z.EncBinary()
					_ = yym1618
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1619 := z.EncBinary()
					_ = yym1619
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yysep1605 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1620 := z.DecBinary()
	_ = yym1620
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1621 := r.ReadMapStart()
			if yyl1621 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1621, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1621 := r.ReadArrayStart()
			if yyl1621 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1621, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1622Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1622Slc
	var yyhl1622 bool = l >= 0
	for yyj1622 := 0; ; yyj1622++ {
		if yyhl1622 {
			if yyj1622 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1622Slc = r.DecodeBytes(yys1622Slc, true, true)
		yys1622 := string(yys1622Slc)
		switch yys1622 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1625 := &x.ListMeta
				yym1626 := z.DecBinary()
				_ = yym1626
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1625) {
				} else {
					z.DecFallback(yyv1625, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1627 := &x.Items
				yym1628 := z.DecBinary()
				_ = yym1628
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1627), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1622)
		} // end switch yys1622
	} // end for yyj1622
	if !yyhl1622 {
		r.ReadEnd()
	}
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1629 int
	var yyb1629 bool
	var yyhl1629 bool = l >= 0
	yyj1629++
	if yyhl1629 {
		yyb1629 = yyj1629 > l
	} else {
		yyb1629 = r.CheckBreak()
	}
	if yyb1629 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1629++
	if yyhl1629 {
		yyb1629 = yyj1629 > l
	} else {
		yyb1629 = r.CheckBreak()
	}
	if yyb1629 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1629++
	if yyhl1629 {
		yyb1629 = yyj1629 > l
	} else {
		yyb1629 = r.CheckBreak()
	}
	if yyb1629 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1632 := &x.ListMeta
		yym1633 := z.DecBinary()
		_ = yym1633
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1632) {
		} else {
			z.DecFallback(yyv1632, false)
		}
	}
	yyj1629++
	if yyhl1629 {
		yyb1629 = yyj1629 > l
	} else {
		yyb1629 = r.CheckBreak()
	}
	if yyb1629 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1634 := &x.Items
		yym1635 := z.DecBinary()
		_ = yym1635
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1634), d)
		}
	}
	for {
		yyj1629++
		if yyhl1629 {
			yyb1629 = yyj1629 > l
		} else {
			yyb1629 = r.CheckBreak()
		}
		if yyb1629 {
			break
		}
		z.DecStructFieldNotFound(yyj1629-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1636 := z.EncBinary()
		_ = yym1636
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1637 := !z.EncBinary()
			yy2arr1637 := z.EncBasicHandle().StructToArray
			var yyq1637 [2]bool
			_, _, _ = yysep1637, yyq1637, yy2arr1637
			const yyr1637 bool = false
			yyq1637[0] = true
			yyq1637[1] = true
			if yyr1637 || yy2arr1637 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1637 int = 0
				for _, b := range yyq1637 {
					if b {
						yynn1637++
					}
				}
				r.EncodeMapStart(yynn1637)
			}
			if yyr1637 || yy2arr1637 {
				if yyq1637[0] {
					yy1639 := &x.ObjectMeta
					yy1639.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1637[0] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1640 := &x.ObjectMeta
					yy1640.CodecEncodeSelf(e)
				}
			}
			if yyr1637 || yy2arr1637 {
				if yyq1637[1] {
					yy1642 := &x.Spec
					yy1642.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1637[1] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1643 := &x.Spec
					yy1643.CodecEncodeSelf(e)
				}
			}
			if yysep1637 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1644 := z.DecBinary()
	_ = yym1644
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1645 := r.ReadMapStart()
			if yyl1645 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1645, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1645 := r.ReadArrayStart()
			if yyl1645 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1645, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1646Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1646Slc
	var yyhl1646 bool = l >= 0
	for yyj1646 := 0; ; yyj1646++ {
		if yyhl1646 {
			if yyj1646 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1646Slc = r.DecodeBytes(yys1646Slc, true, true)
		yys1646 := string(yys1646Slc)
		switch yys1646 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1647 := &x.ObjectMeta
				yyv1647.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1648 := &x.Spec
				yyv1648.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1646)
		} // end switch yys1646
	} // end for yyj1646
	if !yyhl1646 {
		r.ReadEnd()
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1649 int
	var yyb1649 bool
	var yyhl1649 bool = l >= 0
	yyj1649++
	if yyhl1649 {
		yyb1649 = yyj1649 > l
	} else {
		yyb1649 = r.CheckBreak()
	}
	if yyb1649 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1650 := &x.ObjectMeta
		yyv1650.CodecDecodeSelf(d)
	}
	yyj1649++
	if yyhl1649 {
		yyb1649 = yyj1649 > l
	} else {
		yyb1649 = r.CheckBreak()
	}
	if yyb1649 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1651 := &x.Spec
		yyv1651.CodecDecodeSelf(d)
	}
	for {
		yyj1649++
		if yyhl1649 {
			yyb1649 = yyj1649 > l
		} else {
			yyb1649 = r.CheckBreak()
		}
		if yyb1649 {
			break
		}
		z.DecStructFieldNotFound(yyj1649-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1652 := z.EncBinary()
		_ = yym1652
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1653 := !z.EncBinary()
			yy2arr1653 := z.EncBasicHandle().StructToArray
			var yyq1653 [4]bool
			_, _, _ = yysep1653, yyq1653, yy2arr1653
			const yyr1653 bool = false
			yyq1653[0] = x.Kind != ""
			yyq1653[1] = x.APIVersion != ""
			yyq1653[2] = true
			yyq1653[3] = true
			if yyr1653 || yy2arr1653 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1653 int = 0
				for _, b := range yyq1653 {
					if b {
						yynn1653++
					}
				}
				r.EncodeMapStart(yynn1653)
			}
			if yyr1653 || yy2arr1653 {
				if yyq1653[0] {
					yym1655 := z.EncBinary()
					_ = yym1655
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1653[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1656 := z.EncBinary()
					_ = yym1656
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1653 || yy2arr1653 {
				if yyq1653[1] {
					yym1658 := z.EncBinary()
					_ = yym1658
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1653[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1659 := z.EncBinary()
					_ = yym1659
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1653 || yy2arr1653 {
				if yyq1653[2] {
					yy1661 := &x.ObjectMeta
					yy1661.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1653[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1662 := &x.ObjectMeta
					yy1662.CodecEncodeSelf(e)
				}
			}
			if yyr1653 || yy2arr1653 {
				if yyq1653[3] {
					yy1664 := &x.Template
					yy1664.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1653[3] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					yy1665 := &x.Template
					yy1665.CodecEncodeSelf(e)
				}
			}
			if yysep1653 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1666 := z.DecBinary()
	_ = yym1666
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1667 := r.ReadMapStart()
			if yyl1667 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1667, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1667 := r.ReadArrayStart()
			if yyl1667 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1667, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1668Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1668Slc
	var yyhl1668 bool = l >= 0
	for yyj1668 := 0; ; yyj1668++ {
		if yyhl1668 {
			if yyj1668 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1668Slc = r.DecodeBytes(yys1668Slc, true, true)
		yys1668 := string(yys1668Slc)
		switch yys1668 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1671 := &x.ObjectMeta
				yyv1671.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv1672 := &x.Template
				yyv1672.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1668)
		} // end switch yys1668
	} // end for yyj1668
	if !yyhl1668 {
		r.ReadEnd()
	}
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1673 int
	var yyb1673 bool
	var yyhl1673 bool = l >= 0
	yyj1673++
	if yyhl1673 {
		yyb1673 = yyj1673 > l
	} else {
		yyb1673 = r.CheckBreak()
	}
	if yyb1673 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1673++
	if yyhl1673 {
		yyb1673 = yyj1673 > l
	} else {
		yyb1673 = r.CheckBreak()
	}
	if yyb1673 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1673++
	if yyhl1673 {
		yyb1673 = yyj1673 > l
	} else {
		yyb1673 = r.CheckBreak()
	}
	if yyb1673 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1676 := &x.ObjectMeta
		yyv1676.CodecDecodeSelf(d)
	}
	yyj1673++
	if yyhl1673 {
		yyb1673 = yyj1673 > l
	} else {
		yyb1673 = r.CheckBreak()
	}
	if yyb1673 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv1677 := &x.Template
		yyv1677.CodecDecodeSelf(d)
	}
	for {
		yyj1673++
		if yyhl1673 {
			yyb1673 = yyj1673 > l
		} else {
			yyb1673 = r.CheckBreak()
		}
		if yyb1673 {
			break
		}
		z.DecStructFieldNotFound(yyj1673-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1678 := z.EncBinary()
		_ = yym1678
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1679 := !z.EncBinary()
			yy2arr1679 := z.EncBasicHandle().StructToArray
			var yyq1679 [4]bool
			_, _, _ = yysep1679, yyq1679, yy2arr1679
			const yyr1679 bool = false
			yyq1679[0] = x.Kind != ""
			yyq1679[1] = x.APIVersion != ""
			yyq1679[2] = true
			if yyr1679 || yy2arr1679 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1679 int = 1
				for _, b := range yyq1679 {
					if b {
						yynn1679++
					}
				}
				r.EncodeMapStart(yynn1679)
			}
			if yyr1679 || yy2arr1679 {
				if yyq1679[0] {
					yym1681 := z.EncBinary()
					_ = yym1681
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1679[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1682 := z.EncBinary()
					_ = yym1682
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1679 || yy2arr1679 {
				if yyq1679[1] {
					yym1684 := z.EncBinary()
					_ = yym1684
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1679[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1685 := z.EncBinary()
					_ = yym1685
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1679 || yy2arr1679 {
				if yyq1679[2] {
					yy1687 := &x.ListMeta
					yym1688 := z.EncBinary()
					_ = yym1688
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1687) {
					} else {
						z.EncFallback(yy1687)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1679[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1689 := &x.ListMeta
					yym1690 := z.EncBinary()
					_ = yym1690
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1689) {
					} else {
						z.EncFallback(yy1689)
					}
				}
			}
			if yyr1679 || yy2arr1679 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1692 := z.EncBinary()
					_ = yym1692
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1693 := z.EncBinary()
					_ = yym1693
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yysep1679 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1694 := z.DecBinary()
	_ = yym1694
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1695 := r.ReadMapStart()
			if yyl1695 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1695, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1695 := r.ReadArrayStart()
			if yyl1695 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1695, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1696Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1696Slc
	var yyhl1696 bool = l >= 0
	for yyj1696 := 0; ; yyj1696++ {
		if yyhl1696 {
			if yyj1696 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1696Slc = r.DecodeBytes(yys1696Slc, true, true)
		yys1696 := string(yys1696Slc)
		switch yys1696 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1699 := &x.ListMeta
				yym1700 := z.DecBinary()
				_ = yym1700
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1699) {
				} else {
					z.DecFallback(yyv1699, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1701 := &x.Items
				yym1702 := z.DecBinary()
				_ = yym1702
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv1701), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1696)
		} // end switch yys1696
	} // end for yyj1696
	if !yyhl1696 {
		r.ReadEnd()
	}
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1703 int
	var yyb1703 bool
	var yyhl1703 bool = l >= 0
	yyj1703++
	if yyhl1703 {
		yyb1703 = yyj1703 > l
	} else {
		yyb1703 = r.CheckBreak()
	}
	if yyb1703 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1703++
	if yyhl1703 {
		yyb1703 = yyj1703 > l
	} else {
		yyb1703 = r.CheckBreak()
	}
	if yyb1703 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1703++
	if yyhl1703 {
		yyb1703 = yyj1703 > l
	} else {
		yyb1703 = r.CheckBreak()
	}
	if yyb1703 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1706 := &x.ListMeta
		yym1707 := z.DecBinary()
		_ = yym1707
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1706) {
		} else {
			z.DecFallback(yyv1706, false)
		}
	}
	yyj1703++
	if yyhl1703 {
		yyb1703 = yyj1703 > l
	} else {
		yyb1703 = r.CheckBreak()
	}
	if yyb1703 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1708 := &x.Items
		yym1709 := z.DecBinary()
		_ = yym1709
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv1708), d)
		}
	}
	for {
		yyj1703++
		if yyhl1703 {
			yyb1703 = yyj1703 > l
		} else {
			yyb1703 = r.CheckBreak()
		}
		if yyb1703 {
			break
		}
		z.DecStructFieldNotFound(yyj1703-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1710 := z.EncBinary()
		_ = yym1710
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1711 := !z.EncBinary()
			yy2arr1711 := z.EncBasicHandle().StructToArray
			var yyq1711 [3]bool
			_, _, _ = yysep1711, yyq1711, yy2arr1711
			const yyr1711 bool = false
			yyq1711[0] = x.Replicas != nil
			yyq1711[1] = len(x.Selector) != 0
			yyq1711[2] = x.Template != nil
			if yyr1711 || yy2arr1711 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1711 int = 0
				for _, b := range yyq1711 {
					if b {
						yynn1711++
					}
				}
				r.EncodeMapStart(yynn1711)
			}
			if yyr1711 || yy2arr1711 {
				if yyq1711[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1713 := *x.Replicas
						yym1714 := z.EncBinary()
						_ = yym1714
						if false {
						} else {
							r.EncodeInt(int64(yy1713))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1711[0] {
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1715 := *x.Replicas
						yym1716 := z.EncBinary()
						_ = yym1716
						if false {
						} else {
							r.EncodeInt(int64(yy1715))
						}
					}
				}
			}
			if yyr1711 || yy2arr1711 {
				if yyq1711[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1718 := z.EncBinary()
						_ = yym1718
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1711[1] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1719 := z.EncBinary()
						_ = yym1719
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr1711 || yy2arr1711 {
				if yyq1711[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1711[2] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1711 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1721 := z.DecBinary()
	_ = yym1721
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1722 := r.ReadMapStart()
			if yyl1722 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1722, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1722 := r.ReadArrayStart()
			if yyl1722 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1722, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1723Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1723Slc
	var yyhl1723 bool = l >= 0
	for yyj1723 := 0; ; yyj1723++ {
		if yyhl1723 {
			if yyj1723 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1723Slc = r.DecodeBytes(yys1723Slc, true, true)
		yys1723 := string(yys1723Slc)
		switch yys1723 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int)
				}
				yym1725 := z.DecBinary()
				_ = yym1725
				if false {
				} else {
					*((*int)(x.Replicas)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1726 := &x.Selector
				yym1727 := z.DecBinary()
				_ = yym1727
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1726, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1723)
		} // end switch yys1723
	} // end for yyj1723
	if !yyhl1723 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1729 int
	var yyb1729 bool
	var yyhl1729 bool = l >= 0
	yyj1729++
	if yyhl1729 {
		yyb1729 = yyj1729 > l
	} else {
		yyb1729 = r.CheckBreak()
	}
	if yyb1729 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int)
		}
		yym1731 := z.DecBinary()
		_ = yym1731
		if false {
		} else {
			*((*int)(x.Replicas)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj1729++
	if yyhl1729 {
		yyb1729 = yyj1729 > l
	} else {
		yyb1729 = r.CheckBreak()
	}
	if yyb1729 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1732 := &x.Selector
		yym1733 := z.DecBinary()
		_ = yym1733
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1732, false, d)
		}
	}
	yyj1729++
	if yyhl1729 {
		yyb1729 = yyj1729 > l
	} else {
		yyb1729 = r.CheckBreak()
	}
	if yyb1729 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1729++
		if yyhl1729 {
			yyb1729 = yyj1729 > l
		} else {
			yyb1729 = r.CheckBreak()
		}
		if yyb1729 {
			break
		}
		z.DecStructFieldNotFound(yyj1729-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1735 := z.EncBinary()
		_ = yym1735
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1736 := !z.EncBinary()
			yy2arr1736 := z.EncBasicHandle().StructToArray
			var yyq1736 [2]bool
			_, _, _ = yysep1736, yyq1736, yy2arr1736
			const yyr1736 bool = false
			yyq1736[1] = x.ObservedGeneration != 0
			if yyr1736 || yy2arr1736 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1736 int = 1
				for _, b := range yyq1736 {
					if b {
						yynn1736++
					}
				}
				r.EncodeMapStart(yynn1736)
			}
			if yyr1736 || yy2arr1736 {
				yym1738 := z.EncBinary()
				_ = yym1738
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				yym1739 := z.EncBinary()
				_ = yym1739
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1736 || yy2arr1736 {
				if yyq1736[1] {
					yym1741 := z.EncBinary()
					_ = yym1741
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1736[1] {
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					yym1742 := z.EncBinary()
					_ = yym1742
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yysep1736 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1743 := z.DecBinary()
	_ = yym1743
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1744 := r.ReadMapStart()
			if yyl1744 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1744, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1744 := r.ReadArrayStart()
			if yyl1744 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1744, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1745Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1745Slc
	var yyhl1745 bool = l >= 0
	for yyj1745 := 0; ; yyj1745++ {
		if yyhl1745 {
			if yyj1745 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1745Slc = r.DecodeBytes(yys1745Slc, true, true)
		yys1745 := string(yys1745Slc)
		switch yys1745 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1745)
		} // end switch yys1745
	} // end for yyj1745
	if !yyhl1745 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1748 int
	var yyb1748 bool
	var yyhl1748 bool = l >= 0
	yyj1748++
	if yyhl1748 {
		yyb1748 = yyj1748 > l
	} else {
		yyb1748 = r.CheckBreak()
	}
	if yyb1748 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1748++
	if yyhl1748 {
		yyb1748 = yyj1748 > l
	} else {
		yyb1748 = r.CheckBreak()
	}
	if yyb1748 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1748++
		if yyhl1748 {
			yyb1748 = yyj1748 > l
		} else {
			yyb1748 = r.CheckBreak()
		}
		if yyb1748 {
			break
		}
		z.DecStructFieldNotFound(yyj1748-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1751 := z.EncBinary()
		_ = yym1751
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1752 := !z.EncBinary()
			yy2arr1752 := z.EncBasicHandle().StructToArray
			var yyq1752 [5]bool
			_, _, _ = yysep1752, yyq1752, yy2arr1752
			const yyr1752 bool = false
			yyq1752[0] = x.Kind != ""
			yyq1752[1] = x.APIVersion != ""
			yyq1752[2] = true
			yyq1752[3] = true
			yyq1752[4] = true
			if yyr1752 || yy2arr1752 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1752 int = 0
				for _, b := range yyq1752 {
					if b {
						yynn1752++
					}
				}
				r.EncodeMapStart(yynn1752)
			}
			if yyr1752 || yy2arr1752 {
				if yyq1752[0] {
					yym1754 := z.EncBinary()
					_ = yym1754
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1752[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1755 := z.EncBinary()
					_ = yym1755
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1752 || yy2arr1752 {
				if yyq1752[1] {
					yym1757 := z.EncBinary()
					_ = yym1757
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1752[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1758 := z.EncBinary()
					_ = yym1758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1752 || yy2arr1752 {
				if yyq1752[2] {
					yy1760 := &x.ObjectMeta
					yy1760.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1752[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1761 := &x.ObjectMeta
					yy1761.CodecEncodeSelf(e)
				}
			}
			if yyr1752 || yy2arr1752 {
				if yyq1752[3] {
					yy1763 := &x.Spec
					yy1763.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1752[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1764 := &x.Spec
					yy1764.CodecEncodeSelf(e)
				}
			}
			if yyr1752 || yy2arr1752 {
				if yyq1752[4] {
					yy1766 := &x.Status
					yy1766.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1752[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1767 := &x.Status
					yy1767.CodecEncodeSelf(e)
				}
			}
			if yysep1752 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1768 := z.DecBinary()
	_ = yym1768
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1769 := r.ReadMapStart()
			if yyl1769 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1769, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1769 := r.ReadArrayStart()
			if yyl1769 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1769, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1770Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1770Slc
	var yyhl1770 bool = l >= 0
	for yyj1770 := 0; ; yyj1770++ {
		if yyhl1770 {
			if yyj1770 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1770Slc = r.DecodeBytes(yys1770Slc, true, true)
		yys1770 := string(yys1770Slc)
		switch yys1770 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1773 := &x.ObjectMeta
				yyv1773.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv1774 := &x.Spec
				yyv1774.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv1775 := &x.Status
				yyv1775.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1770)
		} // end switch yys1770
	} // end for yyj1770
	if !yyhl1770 {
		r.ReadEnd()
	}
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1776 int
	var yyb1776 bool
	var yyhl1776 bool = l >= 0
	yyj1776++
	if yyhl1776 {
		yyb1776 = yyj1776 > l
	} else {
		yyb1776 = r.CheckBreak()
	}
	if yyb1776 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1776++
	if yyhl1776 {
		yyb1776 = yyj1776 > l
	} else {
		yyb1776 = r.CheckBreak()
	}
	if yyb1776 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1776++
	if yyhl1776 {
		yyb1776 = yyj1776 > l
	} else {
		yyb1776 = r.CheckBreak()
	}
	if yyb1776 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1779 := &x.ObjectMeta
		yyv1779.CodecDecodeSelf(d)
	}
	yyj1776++
	if yyhl1776 {
		yyb1776 = yyj1776 > l
	} else {
		yyb1776 = r.CheckBreak()
	}
	if yyb1776 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv1780 := &x.Spec
		yyv1780.CodecDecodeSelf(d)
	}
	yyj1776++
	if yyhl1776 {
		yyb1776 = yyj1776 > l
	} else {
		yyb1776 = r.CheckBreak()
	}
	if yyb1776 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv1781 := &x.Status
		yyv1781.CodecDecodeSelf(d)
	}
	for {
		yyj1776++
		if yyhl1776 {
			yyb1776 = yyj1776 > l
		} else {
			yyb1776 = r.CheckBreak()
		}
		if yyb1776 {
			break
		}
		z.DecStructFieldNotFound(yyj1776-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1782 := z.EncBinary()
		_ = yym1782
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1783 := !z.EncBinary()
			yy2arr1783 := z.EncBasicHandle().StructToArray
			var yyq1783 [4]bool
			_, _, _ = yysep1783, yyq1783, yy2arr1783
			const yyr1783 bool = false
			yyq1783[0] = x.Kind != ""
			yyq1783[1] = x.APIVersion != ""
			yyq1783[2] = true
			if yyr1783 || yy2arr1783 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1783 int = 1
				for _, b := range yyq1783 {
					if b {
						yynn1783++
					}
				}
				r.EncodeMapStart(yynn1783)
			}
			if yyr1783 || yy2arr1783 {
				if yyq1783[0] {
					yym1785 := z.EncBinary()
					_ = yym1785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1783[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1786 := z.EncBinary()
					_ = yym1786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1783 || yy2arr1783 {
				if yyq1783[1] {
					yym1788 := z.EncBinary()
					_ = yym1788
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1783[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1789 := z.EncBinary()
					_ = yym1789
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1783 || yy2arr1783 {
				if yyq1783[2] {
					yy1791 := &x.ListMeta
					yym1792 := z.EncBinary()
					_ = yym1792
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1791) {
					} else {
						z.EncFallback(yy1791)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1783[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1793 := &x.ListMeta
					yym1794 := z.EncBinary()
					_ = yym1794
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1793) {
					} else {
						z.EncFallback(yy1793)
					}
				}
			}
			if yyr1783 || yy2arr1783 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1796 := z.EncBinary()
					_ = yym1796
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1797 := z.EncBinary()
					_ = yym1797
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yysep1783 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1798 := z.DecBinary()
	_ = yym1798
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1799 := r.ReadMapStart()
			if yyl1799 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1799, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1799 := r.ReadArrayStart()
			if yyl1799 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1799, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1800Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1800Slc
	var yyhl1800 bool = l >= 0
	for yyj1800 := 0; ; yyj1800++ {
		if yyhl1800 {
			if yyj1800 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1800Slc = r.DecodeBytes(yys1800Slc, true, true)
		yys1800 := string(yys1800Slc)
		switch yys1800 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1803 := &x.ListMeta
				yym1804 := z.DecBinary()
				_ = yym1804
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1803) {
				} else {
					z.DecFallback(yyv1803, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1805 := &x.Items
				yym1806 := z.DecBinary()
				_ = yym1806
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv1805), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1800)
		} // end switch yys1800
	} // end for yyj1800
	if !yyhl1800 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1807 int
	var yyb1807 bool
	var yyhl1807 bool = l >= 0
	yyj1807++
	if yyhl1807 {
		yyb1807 = yyj1807 > l
	} else {
		yyb1807 = r.CheckBreak()
	}
	if yyb1807 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1807++
	if yyhl1807 {
		yyb1807 = yyj1807 > l
	} else {
		yyb1807 = r.CheckBreak()
	}
	if yyb1807 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1807++
	if yyhl1807 {
		yyb1807 = yyj1807 > l
	} else {
		yyb1807 = r.CheckBreak()
	}
	if yyb1807 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1810 := &x.ListMeta
		yym1811 := z.DecBinary()
		_ = yym1811
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1810) {
		} else {
			z.DecFallback(yyv1810, false)
		}
	}
	yyj1807++
	if yyhl1807 {
		yyb1807 = yyj1807 > l
	} else {
		yyb1807 = r.CheckBreak()
	}
	if yyb1807 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1812 := &x.Items
		yym1813 := z.DecBinary()
		_ = yym1813
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv1812), d)
		}
	}
	for {
		yyj1807++
		if yyhl1807 {
			yyb1807 = yyj1807 > l
		} else {
			yyb1807 = r.CheckBreak()
		}
		if yyb1807 {
			break
		}
		z.DecStructFieldNotFound(yyj1807-1, "")
	}
	r.ReadEnd()
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1814 := z.EncBinary()
	_ = yym1814
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1815 := z.DecBinary()
	_ = yym1815
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1816 := z.EncBinary()
	_ = yym1816
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1817 := z.DecBinary()
	_ = yym1817
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1818 := z.EncBinary()
		_ = yym1818
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1819 := !z.EncBinary()
			yy2arr1819 := z.EncBasicHandle().StructToArray
			var yyq1819 [1]bool
			_, _, _ = yysep1819, yyq1819, yy2arr1819
			const yyr1819 bool = false
			yyq1819[0] = true
			if yyr1819 || yy2arr1819 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1819 int = 0
				for _, b := range yyq1819 {
					if b {
						yynn1819++
					}
				}
				r.EncodeMapStart(yynn1819)
			}
			if yyr1819 || yy2arr1819 {
				if yyq1819[0] {
					yy1821 := &x.LoadBalancer
					yy1821.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1819[0] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					yy1822 := &x.LoadBalancer
					yy1822.CodecEncodeSelf(e)
				}
			}
			if yysep1819 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1823 := z.DecBinary()
	_ = yym1823
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1824 := r.ReadMapStart()
			if yyl1824 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1824, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1824 := r.ReadArrayStart()
			if yyl1824 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1824, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1825Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1825Slc
	var yyhl1825 bool = l >= 0
	for yyj1825 := 0; ; yyj1825++ {
		if yyhl1825 {
			if yyj1825 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1825Slc = r.DecodeBytes(yys1825Slc, true, true)
		yys1825 := string(yys1825Slc)
		switch yys1825 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv1826 := &x.LoadBalancer
				yyv1826.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1825)
		} // end switch yys1825
	} // end for yyj1825
	if !yyhl1825 {
		r.ReadEnd()
	}
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1827 int
	var yyb1827 bool
	var yyhl1827 bool = l >= 0
	yyj1827++
	if yyhl1827 {
		yyb1827 = yyj1827 > l
	} else {
		yyb1827 = r.CheckBreak()
	}
	if yyb1827 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv1828 := &x.LoadBalancer
		yyv1828.CodecDecodeSelf(d)
	}
	for {
		yyj1827++
		if yyhl1827 {
			yyb1827 = yyj1827 > l
		} else {
			yyb1827 = r.CheckBreak()
		}
		if yyb1827 {
			break
		}
		z.DecStructFieldNotFound(yyj1827-1, "")
	}
	r.ReadEnd()
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1829 := z.EncBinary()
		_ = yym1829
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1830 := !z.EncBinary()
			yy2arr1830 := z.EncBasicHandle().StructToArray
			var yyq1830 [1]bool
			_, _, _ = yysep1830, yyq1830, yy2arr1830
			const yyr1830 bool = false
			yyq1830[0] = len(x.Ingress) != 0
			if yyr1830 || yy2arr1830 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1830 int = 0
				for _, b := range yyq1830 {
					if b {
						yynn1830++
					}
				}
				r.EncodeMapStart(yynn1830)
			}
			if yyr1830 || yy2arr1830 {
				if yyq1830[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1832 := z.EncBinary()
						_ = yym1832
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1830[0] {
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1833 := z.EncBinary()
						_ = yym1833
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yysep1830 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1834 := z.DecBinary()
	_ = yym1834
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1835 := r.ReadMapStart()
			if yyl1835 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1835, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1835 := r.ReadArrayStart()
			if yyl1835 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1835, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1836Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1836Slc
	var yyhl1836 bool = l >= 0
	for yyj1836 := 0; ; yyj1836++ {
		if yyhl1836 {
			if yyj1836 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1836Slc = r.DecodeBytes(yys1836Slc, true, true)
		yys1836 := string(yys1836Slc)
		switch yys1836 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1837 := &x.Ingress
				yym1838 := z.DecBinary()
				_ = yym1838
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1837), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1836)
		} // end switch yys1836
	} // end for yyj1836
	if !yyhl1836 {
		r.ReadEnd()
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1839 int
	var yyb1839 bool
	var yyhl1839 bool = l >= 0
	yyj1839++
	if yyhl1839 {
		yyb1839 = yyj1839 > l
	} else {
		yyb1839 = r.CheckBreak()
	}
	if yyb1839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1840 := &x.Ingress
		yym1841 := z.DecBinary()
		_ = yym1841
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1840), d)
		}
	}
	for {
		yyj1839++
		if yyhl1839 {
			yyb1839 = yyj1839 > l
		} else {
			yyb1839 = r.CheckBreak()
		}
		if yyb1839 {
			break
		}
		z.DecStructFieldNotFound(yyj1839-1, "")
	}
	r.ReadEnd()
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1842 := z.EncBinary()
		_ = yym1842
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1843 := !z.EncBinary()
			yy2arr1843 := z.EncBasicHandle().StructToArray
			var yyq1843 [2]bool
			_, _, _ = yysep1843, yyq1843, yy2arr1843
			const yyr1843 bool = false
			yyq1843[0] = x.IP != ""
			yyq1843[1] = x.Hostname != ""
			if yyr1843 || yy2arr1843 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1843 int = 0
				for _, b := range yyq1843 {
					if b {
						yynn1843++
					}
				}
				r.EncodeMapStart(yynn1843)
			}
			if yyr1843 || yy2arr1843 {
				if yyq1843[0] {
					yym1845 := z.EncBinary()
					_ = yym1845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1843[0] {
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					yym1846 := z.EncBinary()
					_ = yym1846
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr1843 || yy2arr1843 {
				if yyq1843[1] {
					yym1848 := z.EncBinary()
					_ = yym1848
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1843[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					yym1849 := z.EncBinary()
					_ = yym1849
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yysep1843 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1850 := z.DecBinary()
	_ = yym1850
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1851 := r.ReadMapStart()
			if yyl1851 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1851, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1851 := r.ReadArrayStart()
			if yyl1851 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1851, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1852Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1852Slc
	var yyhl1852 bool = l >= 0
	for yyj1852 := 0; ; yyj1852++ {
		if yyhl1852 {
			if yyj1852 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1852Slc = r.DecodeBytes(yys1852Slc, true, true)
		yys1852 := string(yys1852Slc)
		switch yys1852 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1852)
		} // end switch yys1852
	} // end for yyj1852
	if !yyhl1852 {
		r.ReadEnd()
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1855 int
	var yyb1855 bool
	var yyhl1855 bool = l >= 0
	yyj1855++
	if yyhl1855 {
		yyb1855 = yyj1855 > l
	} else {
		yyb1855 = r.CheckBreak()
	}
	if yyb1855 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj1855++
	if yyhl1855 {
		yyb1855 = yyj1855 > l
	} else {
		yyb1855 = r.CheckBreak()
	}
	if yyb1855 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj1855++
		if yyhl1855 {
			yyb1855 = yyj1855 > l
		} else {
			yyb1855 = r.CheckBreak()
		}
		if yyb1855 {
			break
		}
		z.DecStructFieldNotFound(yyj1855-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1858 := z.EncBinary()
		_ = yym1858
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1859 := !z.EncBinary()
			yy2arr1859 := z.EncBasicHandle().StructToArray
			var yyq1859 [8]bool
			_, _, _ = yysep1859, yyq1859, yy2arr1859
			const yyr1859 bool = false
			yyq1859[1] = len(x.Selector) != 0
			yyq1859[2] = x.ClusterIP != ""
			yyq1859[3] = x.Type != ""
			yyq1859[4] = len(x.ExternalIPs) != 0
			yyq1859[5] = len(x.DeprecatedPublicIPs) != 0
			yyq1859[6] = x.SessionAffinity != ""
			yyq1859[7] = x.LoadBalancerIP != ""
			if yyr1859 || yy2arr1859 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1859 int = 1
				for _, b := range yyq1859 {
					if b {
						yynn1859++
					}
				}
				r.EncodeMapStart(yynn1859)
			}
			if yyr1859 || yy2arr1859 {
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1861 := z.EncBinary()
					_ = yym1861
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1862 := z.EncBinary()
					_ = yym1862
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr1859 || yy2arr1859 {
				if yyq1859[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1864 := z.EncBinary()
						_ = yym1864
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1859[1] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1865 := z.EncBinary()
						_ = yym1865
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr1859 || yy2arr1859 {
				if yyq1859[2] {
					yym1867 := z.EncBinary()
					_ = yym1867
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1859[2] {
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					yym1868 := z.EncBinary()
					_ = yym1868
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr1859 || yy2arr1859 {
				if yyq1859[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1859[3] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr1859 || yy2arr1859 {
				if yyq1859[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1871 := z.EncBinary()
						_ = yym1871
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1859[4] {
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1872 := z.EncBinary()
						_ = yym1872
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr1859 || yy2arr1859 {
				if yyq1859[5] {
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym1874 := z.EncBinary()
						_ = yym1874
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1859[5] {
					r.EncodeString(codecSelferC_UTF81234, string("deprecatedPublicIPs"))
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym1875 := z.EncBinary()
						_ = yym1875
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				}
			}
			if yyr1859 || yy2arr1859 {
				if yyq1859[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1859[6] {
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr1859 || yy2arr1859 {
				if yyq1859[7] {
					yym1878 := z.EncBinary()
					_ = yym1878
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1859[7] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					yym1879 := z.EncBinary()
					_ = yym1879
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yysep1859 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1880 := z.DecBinary()
	_ = yym1880
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1881 := r.ReadMapStart()
			if yyl1881 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1881, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1881 := r.ReadArrayStart()
			if yyl1881 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1881, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1882Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1882Slc
	var yyhl1882 bool = l >= 0
	for yyj1882 := 0; ; yyj1882++ {
		if yyhl1882 {
			if yyj1882 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1882Slc = r.DecodeBytes(yys1882Slc, true, true)
		yys1882 := string(yys1882Slc)
		switch yys1882 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1883 := &x.Ports
				yym1884 := z.DecBinary()
				_ = yym1884
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv1883), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1885 := &x.Selector
				yym1886 := z.DecBinary()
				_ = yym1886
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1885, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv1889 := &x.ExternalIPs
				yym1890 := z.DecBinary()
				_ = yym1890
				if false {
				} else {
					z.F.DecSliceStringX(yyv1889, false, d)
				}
			}
		case "deprecatedPublicIPs":
			if r.TryDecodeAsNil() {
				x.DeprecatedPublicIPs = nil
			} else {
				yyv1891 := &x.DeprecatedPublicIPs
				yym1892 := z.DecBinary()
				_ = yym1892
				if false {
				} else {
					z.F.DecSliceStringX(yyv1891, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1882)
		} // end switch yys1882
	} // end for yyj1882
	if !yyhl1882 {
		r.ReadEnd()
	}
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1895 int
	var yyb1895 bool
	var yyhl1895 bool = l >= 0
	yyj1895++
	if yyhl1895 {
		yyb1895 = yyj1895 > l
	} else {
		yyb1895 = r.CheckBreak()
	}
	if yyb1895 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1896 := &x.Ports
		yym1897 := z.DecBinary()
		_ = yym1897
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv1896), d)
		}
	}
	yyj1895++
	if yyhl1895 {
		yyb1895 = yyj1895 > l
	} else {
		yyb1895 = r.CheckBreak()
	}
	if yyb1895 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1898 := &x.Selector
		yym1899 := z.DecBinary()
		_ = yym1899
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1898, false, d)
		}
	}
	yyj1895++
	if yyhl1895 {
		yyb1895 = yyj1895 > l
	} else {
		yyb1895 = r.CheckBreak()
	}
	if yyb1895 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj1895++
	if yyhl1895 {
		yyb1895 = yyj1895 > l
	} else {
		yyb1895 = r.CheckBreak()
	}
	if yyb1895 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj1895++
	if yyhl1895 {
		yyb1895 = yyj1895 > l
	} else {
		yyb1895 = r.CheckBreak()
	}
	if yyb1895 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv1902 := &x.ExternalIPs
		yym1903 := z.DecBinary()
		_ = yym1903
		if false {
		} else {
			z.F.DecSliceStringX(yyv1902, false, d)
		}
	}
	yyj1895++
	if yyhl1895 {
		yyb1895 = yyj1895 > l
	} else {
		yyb1895 = r.CheckBreak()
	}
	if yyb1895 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DeprecatedPublicIPs = nil
	} else {
		yyv1904 := &x.DeprecatedPublicIPs
		yym1905 := z.DecBinary()
		_ = yym1905
		if false {
		} else {
			z.F.DecSliceStringX(yyv1904, false, d)
		}
	}
	yyj1895++
	if yyhl1895 {
		yyb1895 = yyj1895 > l
	} else {
		yyb1895 = r.CheckBreak()
	}
	if yyb1895 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj1895++
	if yyhl1895 {
		yyb1895 = yyj1895 > l
	} else {
		yyb1895 = r.CheckBreak()
	}
	if yyb1895 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	for {
		yyj1895++
		if yyhl1895 {
			yyb1895 = yyj1895 > l
		} else {
			yyb1895 = r.CheckBreak()
		}
		if yyb1895 {
			break
		}
		z.DecStructFieldNotFound(yyj1895-1, "")
	}
	r.ReadEnd()
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1908 := z.EncBinary()
		_ = yym1908
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1909 := !z.EncBinary()
			yy2arr1909 := z.EncBasicHandle().StructToArray
			var yyq1909 [5]bool
			_, _, _ = yysep1909, yyq1909, yy2arr1909
			const yyr1909 bool = false
			yyq1909[0] = x.Name != ""
			yyq1909[1] = x.Protocol != ""
			yyq1909[3] = true
			yyq1909[4] = x.NodePort != 0
			if yyr1909 || yy2arr1909 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1909 int = 1
				for _, b := range yyq1909 {
					if b {
						yynn1909++
					}
				}
				r.EncodeMapStart(yynn1909)
			}
			if yyr1909 || yy2arr1909 {
				if yyq1909[0] {
					yym1911 := z.EncBinary()
					_ = yym1911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1909[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym1912 := z.EncBinary()
					_ = yym1912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1909 || yy2arr1909 {
				if yyq1909[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1909[1] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1909 || yy2arr1909 {
				yym1915 := z.EncBinary()
				_ = yym1915
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yym1916 := z.EncBinary()
				_ = yym1916
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr1909 || yy2arr1909 {
				if yyq1909[3] {
					yy1918 := &x.TargetPort
					yym1919 := z.EncBinary()
					_ = yym1919
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1918) {
					} else if !yym1919 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1918)
					} else {
						z.EncFallback(yy1918)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1909[3] {
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					yy1920 := &x.TargetPort
					yym1921 := z.EncBinary()
					_ = yym1921
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1920) {
					} else if !yym1921 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1920)
					} else {
						z.EncFallback(yy1920)
					}
				}
			}
			if yyr1909 || yy2arr1909 {
				if yyq1909[4] {
					yym1923 := z.EncBinary()
					_ = yym1923
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1909[4] {
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					yym1924 := z.EncBinary()
					_ = yym1924
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yysep1909 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1925 := z.DecBinary()
	_ = yym1925
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1926 := r.ReadMapStart()
			if yyl1926 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1926, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1926 := r.ReadArrayStart()
			if yyl1926 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1926, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1927Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1927Slc
	var yyhl1927 bool = l >= 0
	for yyj1927 := 0; ; yyj1927++ {
		if yyhl1927 {
			if yyj1927 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1927Slc = r.DecodeBytes(yys1927Slc, true, true)
		yys1927 := string(yys1927Slc)
		switch yys1927 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg5_util.IntOrString{}
			} else {
				yyv1931 := &x.TargetPort
				yym1932 := z.DecBinary()
				_ = yym1932
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1931) {
				} else if !yym1932 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1931)
				} else {
					z.DecFallback(yyv1931, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1927)
		} // end switch yys1927
	} // end for yyj1927
	if !yyhl1927 {
		r.ReadEnd()
	}
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1934 int
	var yyb1934 bool
	var yyhl1934 bool = l >= 0
	yyj1934++
	if yyhl1934 {
		yyb1934 = yyj1934 > l
	} else {
		yyb1934 = r.CheckBreak()
	}
	if yyb1934 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1934++
	if yyhl1934 {
		yyb1934 = yyj1934 > l
	} else {
		yyb1934 = r.CheckBreak()
	}
	if yyb1934 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1934++
	if yyhl1934 {
		yyb1934 = yyj1934 > l
	} else {
		yyb1934 = r.CheckBreak()
	}
	if yyb1934 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1934++
	if yyhl1934 {
		yyb1934 = yyj1934 > l
	} else {
		yyb1934 = r.CheckBreak()
	}
	if yyb1934 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg5_util.IntOrString{}
	} else {
		yyv1938 := &x.TargetPort
		yym1939 := z.DecBinary()
		_ = yym1939
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1938) {
		} else if !yym1939 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1938)
		} else {
			z.DecFallback(yyv1938, false)
		}
	}
	yyj1934++
	if yyhl1934 {
		yyb1934 = yyj1934 > l
	} else {
		yyb1934 = r.CheckBreak()
	}
	if yyb1934 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1934++
		if yyhl1934 {
			yyb1934 = yyj1934 > l
		} else {
			yyb1934 = r.CheckBreak()
		}
		if yyb1934 {
			break
		}
		z.DecStructFieldNotFound(yyj1934-1, "")
	}
	r.ReadEnd()
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1941 := z.EncBinary()
		_ = yym1941
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1942 := !z.EncBinary()
			yy2arr1942 := z.EncBasicHandle().StructToArray
			var yyq1942 [5]bool
			_, _, _ = yysep1942, yyq1942, yy2arr1942
			const yyr1942 bool = false
			yyq1942[0] = x.Kind != ""
			yyq1942[1] = x.APIVersion != ""
			yyq1942[2] = true
			yyq1942[3] = true
			yyq1942[4] = true
			if yyr1942 || yy2arr1942 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1942 int = 0
				for _, b := range yyq1942 {
					if b {
						yynn1942++
					}
				}
				r.EncodeMapStart(yynn1942)
			}
			if yyr1942 || yy2arr1942 {
				if yyq1942[0] {
					yym1944 := z.EncBinary()
					_ = yym1944
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1942[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1945 := z.EncBinary()
					_ = yym1945
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1942 || yy2arr1942 {
				if yyq1942[1] {
					yym1947 := z.EncBinary()
					_ = yym1947
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1942[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1948 := z.EncBinary()
					_ = yym1948
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1942 || yy2arr1942 {
				if yyq1942[2] {
					yy1950 := &x.ObjectMeta
					yy1950.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1942[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1951 := &x.ObjectMeta
					yy1951.CodecEncodeSelf(e)
				}
			}
			if yyr1942 || yy2arr1942 {
				if yyq1942[3] {
					yy1953 := &x.Spec
					yy1953.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1942[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1954 := &x.Spec
					yy1954.CodecEncodeSelf(e)
				}
			}
			if yyr1942 || yy2arr1942 {
				if yyq1942[4] {
					yy1956 := &x.Status
					yy1956.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1942[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1957 := &x.Status
					yy1957.CodecEncodeSelf(e)
				}
			}
			if yysep1942 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1958 := z.DecBinary()
	_ = yym1958
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1959 := r.ReadMapStart()
			if yyl1959 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1959, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1959 := r.ReadArrayStart()
			if yyl1959 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1959, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1960Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1960Slc
	var yyhl1960 bool = l >= 0
	for yyj1960 := 0; ; yyj1960++ {
		if yyhl1960 {
			if yyj1960 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1960Slc = r.DecodeBytes(yys1960Slc, true, true)
		yys1960 := string(yys1960Slc)
		switch yys1960 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1963 := &x.ObjectMeta
				yyv1963.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv1964 := &x.Spec
				yyv1964.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv1965 := &x.Status
				yyv1965.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1960)
		} // end switch yys1960
	} // end for yyj1960
	if !yyhl1960 {
		r.ReadEnd()
	}
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1966 int
	var yyb1966 bool
	var yyhl1966 bool = l >= 0
	yyj1966++
	if yyhl1966 {
		yyb1966 = yyj1966 > l
	} else {
		yyb1966 = r.CheckBreak()
	}
	if yyb1966 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1966++
	if yyhl1966 {
		yyb1966 = yyj1966 > l
	} else {
		yyb1966 = r.CheckBreak()
	}
	if yyb1966 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1966++
	if yyhl1966 {
		yyb1966 = yyj1966 > l
	} else {
		yyb1966 = r.CheckBreak()
	}
	if yyb1966 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1969 := &x.ObjectMeta
		yyv1969.CodecDecodeSelf(d)
	}
	yyj1966++
	if yyhl1966 {
		yyb1966 = yyj1966 > l
	} else {
		yyb1966 = r.CheckBreak()
	}
	if yyb1966 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv1970 := &x.Spec
		yyv1970.CodecDecodeSelf(d)
	}
	yyj1966++
	if yyhl1966 {
		yyb1966 = yyj1966 > l
	} else {
		yyb1966 = r.CheckBreak()
	}
	if yyb1966 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv1971 := &x.Status
		yyv1971.CodecDecodeSelf(d)
	}
	for {
		yyj1966++
		if yyhl1966 {
			yyb1966 = yyj1966 > l
		} else {
			yyb1966 = r.CheckBreak()
		}
		if yyb1966 {
			break
		}
		z.DecStructFieldNotFound(yyj1966-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1972 := z.EncBinary()
		_ = yym1972
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1973 := !z.EncBinary()
			yy2arr1973 := z.EncBasicHandle().StructToArray
			var yyq1973 [4]bool
			_, _, _ = yysep1973, yyq1973, yy2arr1973
			const yyr1973 bool = false
			yyq1973[0] = x.Kind != ""
			yyq1973[1] = x.APIVersion != ""
			yyq1973[2] = true
			if yyr1973 || yy2arr1973 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1973 int = 1
				for _, b := range yyq1973 {
					if b {
						yynn1973++
					}
				}
				r.EncodeMapStart(yynn1973)
			}
			if yyr1973 || yy2arr1973 {
				if yyq1973[0] {
					yym1975 := z.EncBinary()
					_ = yym1975
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1973[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1976 := z.EncBinary()
					_ = yym1976
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1973 || yy2arr1973 {
				if yyq1973[1] {
					yym1978 := z.EncBinary()
					_ = yym1978
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1973[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1979 := z.EncBinary()
					_ = yym1979
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1973 || yy2arr1973 {
				if yyq1973[2] {
					yy1981 := &x.ListMeta
					yym1982 := z.EncBinary()
					_ = yym1982
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1981) {
					} else {
						z.EncFallback(yy1981)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1973[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1983 := &x.ListMeta
					yym1984 := z.EncBinary()
					_ = yym1984
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1983) {
					} else {
						z.EncFallback(yy1983)
					}
				}
			}
			if yyr1973 || yy2arr1973 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1986 := z.EncBinary()
					_ = yym1986
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1987 := z.EncBinary()
					_ = yym1987
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yysep1973 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1988 := z.DecBinary()
	_ = yym1988
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1989 := r.ReadMapStart()
			if yyl1989 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1989, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1989 := r.ReadArrayStart()
			if yyl1989 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1989, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1990Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1990Slc
	var yyhl1990 bool = l >= 0
	for yyj1990 := 0; ; yyj1990++ {
		if yyhl1990 {
			if yyj1990 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1990Slc = r.DecodeBytes(yys1990Slc, true, true)
		yys1990 := string(yys1990Slc)
		switch yys1990 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1993 := &x.ListMeta
				yym1994 := z.DecBinary()
				_ = yym1994
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1993) {
				} else {
					z.DecFallback(yyv1993, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1995 := &x.Items
				yym1996 := z.DecBinary()
				_ = yym1996
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv1995), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1990)
		} // end switch yys1990
	} // end for yyj1990
	if !yyhl1990 {
		r.ReadEnd()
	}
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1997 int
	var yyb1997 bool
	var yyhl1997 bool = l >= 0
	yyj1997++
	if yyhl1997 {
		yyb1997 = yyj1997 > l
	} else {
		yyb1997 = r.CheckBreak()
	}
	if yyb1997 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1997++
	if yyhl1997 {
		yyb1997 = yyj1997 > l
	} else {
		yyb1997 = r.CheckBreak()
	}
	if yyb1997 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1997++
	if yyhl1997 {
		yyb1997 = yyj1997 > l
	} else {
		yyb1997 = r.CheckBreak()
	}
	if yyb1997 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2000 := &x.ListMeta
		yym2001 := z.DecBinary()
		_ = yym2001
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2000) {
		} else {
			z.DecFallback(yyv2000, false)
		}
	}
	yyj1997++
	if yyhl1997 {
		yyb1997 = yyj1997 > l
	} else {
		yyb1997 = r.CheckBreak()
	}
	if yyb1997 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2002 := &x.Items
		yym2003 := z.DecBinary()
		_ = yym2003
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2002), d)
		}
	}
	for {
		yyj1997++
		if yyhl1997 {
			yyb1997 = yyj1997 > l
		} else {
			yyb1997 = r.CheckBreak()
		}
		if yyb1997 {
			break
		}
		z.DecStructFieldNotFound(yyj1997-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2004 := z.EncBinary()
		_ = yym2004
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2005 := !z.EncBinary()
			yy2arr2005 := z.EncBasicHandle().StructToArray
			var yyq2005 [5]bool
			_, _, _ = yysep2005, yyq2005, yy2arr2005
			const yyr2005 bool = false
			yyq2005[0] = x.Kind != ""
			yyq2005[1] = x.APIVersion != ""
			yyq2005[2] = true
			yyq2005[3] = len(x.Secrets) != 0
			yyq2005[4] = len(x.ImagePullSecrets) != 0
			if yyr2005 || yy2arr2005 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2005 int = 0
				for _, b := range yyq2005 {
					if b {
						yynn2005++
					}
				}
				r.EncodeMapStart(yynn2005)
			}
			if yyr2005 || yy2arr2005 {
				if yyq2005[0] {
					yym2007 := z.EncBinary()
					_ = yym2007
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2005[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2008 := z.EncBinary()
					_ = yym2008
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2005 || yy2arr2005 {
				if yyq2005[1] {
					yym2010 := z.EncBinary()
					_ = yym2010
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2005[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2011 := z.EncBinary()
					_ = yym2011
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2005 || yy2arr2005 {
				if yyq2005[2] {
					yy2013 := &x.ObjectMeta
					yy2013.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2005[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2014 := &x.ObjectMeta
					yy2014.CodecEncodeSelf(e)
				}
			}
			if yyr2005 || yy2arr2005 {
				if yyq2005[3] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2016 := z.EncBinary()
						_ = yym2016
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2005[3] {
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2017 := z.EncBinary()
						_ = yym2017
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr2005 || yy2arr2005 {
				if yyq2005[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2019 := z.EncBinary()
						_ = yym2019
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2005[4] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2020 := z.EncBinary()
						_ = yym2020
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep2005 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2021 := z.DecBinary()
	_ = yym2021
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2022 := r.ReadMapStart()
			if yyl2022 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2022, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2022 := r.ReadArrayStart()
			if yyl2022 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2022, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2023Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2023Slc
	var yyhl2023 bool = l >= 0
	for yyj2023 := 0; ; yyj2023++ {
		if yyhl2023 {
			if yyj2023 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2023Slc = r.DecodeBytes(yys2023Slc, true, true)
		yys2023 := string(yys2023Slc)
		switch yys2023 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2026 := &x.ObjectMeta
				yyv2026.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2027 := &x.Secrets
				yym2028 := z.DecBinary()
				_ = yym2028
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2027), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2029 := &x.ImagePullSecrets
				yym2030 := z.DecBinary()
				_ = yym2030
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2029), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2023)
		} // end switch yys2023
	} // end for yyj2023
	if !yyhl2023 {
		r.ReadEnd()
	}
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2031 int
	var yyb2031 bool
	var yyhl2031 bool = l >= 0
	yyj2031++
	if yyhl2031 {
		yyb2031 = yyj2031 > l
	} else {
		yyb2031 = r.CheckBreak()
	}
	if yyb2031 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2031++
	if yyhl2031 {
		yyb2031 = yyj2031 > l
	} else {
		yyb2031 = r.CheckBreak()
	}
	if yyb2031 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2031++
	if yyhl2031 {
		yyb2031 = yyj2031 > l
	} else {
		yyb2031 = r.CheckBreak()
	}
	if yyb2031 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2034 := &x.ObjectMeta
		yyv2034.CodecDecodeSelf(d)
	}
	yyj2031++
	if yyhl2031 {
		yyb2031 = yyj2031 > l
	} else {
		yyb2031 = r.CheckBreak()
	}
	if yyb2031 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2035 := &x.Secrets
		yym2036 := z.DecBinary()
		_ = yym2036
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2035), d)
		}
	}
	yyj2031++
	if yyhl2031 {
		yyb2031 = yyj2031 > l
	} else {
		yyb2031 = r.CheckBreak()
	}
	if yyb2031 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2037 := &x.ImagePullSecrets
		yym2038 := z.DecBinary()
		_ = yym2038
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2037), d)
		}
	}
	for {
		yyj2031++
		if yyhl2031 {
			yyb2031 = yyj2031 > l
		} else {
			yyb2031 = r.CheckBreak()
		}
		if yyb2031 {
			break
		}
		z.DecStructFieldNotFound(yyj2031-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2039 := z.EncBinary()
		_ = yym2039
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2040 := !z.EncBinary()
			yy2arr2040 := z.EncBasicHandle().StructToArray
			var yyq2040 [4]bool
			_, _, _ = yysep2040, yyq2040, yy2arr2040
			const yyr2040 bool = false
			yyq2040[0] = x.Kind != ""
			yyq2040[1] = x.APIVersion != ""
			yyq2040[2] = true
			if yyr2040 || yy2arr2040 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2040 int = 1
				for _, b := range yyq2040 {
					if b {
						yynn2040++
					}
				}
				r.EncodeMapStart(yynn2040)
			}
			if yyr2040 || yy2arr2040 {
				if yyq2040[0] {
					yym2042 := z.EncBinary()
					_ = yym2042
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2040[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2043 := z.EncBinary()
					_ = yym2043
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2040 || yy2arr2040 {
				if yyq2040[1] {
					yym2045 := z.EncBinary()
					_ = yym2045
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2040[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2046 := z.EncBinary()
					_ = yym2046
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2040 || yy2arr2040 {
				if yyq2040[2] {
					yy2048 := &x.ListMeta
					yym2049 := z.EncBinary()
					_ = yym2049
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2048) {
					} else {
						z.EncFallback(yy2048)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2040[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2050 := &x.ListMeta
					yym2051 := z.EncBinary()
					_ = yym2051
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2050) {
					} else {
						z.EncFallback(yy2050)
					}
				}
			}
			if yyr2040 || yy2arr2040 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2053 := z.EncBinary()
					_ = yym2053
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2054 := z.EncBinary()
					_ = yym2054
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yysep2040 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2055 := z.DecBinary()
	_ = yym2055
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2056 := r.ReadMapStart()
			if yyl2056 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2056, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2056 := r.ReadArrayStart()
			if yyl2056 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2056, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2057Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2057Slc
	var yyhl2057 bool = l >= 0
	for yyj2057 := 0; ; yyj2057++ {
		if yyhl2057 {
			if yyj2057 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2057Slc = r.DecodeBytes(yys2057Slc, true, true)
		yys2057 := string(yys2057Slc)
		switch yys2057 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2060 := &x.ListMeta
				yym2061 := z.DecBinary()
				_ = yym2061
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2060) {
				} else {
					z.DecFallback(yyv2060, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2062 := &x.Items
				yym2063 := z.DecBinary()
				_ = yym2063
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2062), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2057)
		} // end switch yys2057
	} // end for yyj2057
	if !yyhl2057 {
		r.ReadEnd()
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2064 int
	var yyb2064 bool
	var yyhl2064 bool = l >= 0
	yyj2064++
	if yyhl2064 {
		yyb2064 = yyj2064 > l
	} else {
		yyb2064 = r.CheckBreak()
	}
	if yyb2064 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2064++
	if yyhl2064 {
		yyb2064 = yyj2064 > l
	} else {
		yyb2064 = r.CheckBreak()
	}
	if yyb2064 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2064++
	if yyhl2064 {
		yyb2064 = yyj2064 > l
	} else {
		yyb2064 = r.CheckBreak()
	}
	if yyb2064 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2067 := &x.ListMeta
		yym2068 := z.DecBinary()
		_ = yym2068
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2067) {
		} else {
			z.DecFallback(yyv2067, false)
		}
	}
	yyj2064++
	if yyhl2064 {
		yyb2064 = yyj2064 > l
	} else {
		yyb2064 = r.CheckBreak()
	}
	if yyb2064 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2069 := &x.Items
		yym2070 := z.DecBinary()
		_ = yym2070
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2069), d)
		}
	}
	for {
		yyj2064++
		if yyhl2064 {
			yyb2064 = yyj2064 > l
		} else {
			yyb2064 = r.CheckBreak()
		}
		if yyb2064 {
			break
		}
		z.DecStructFieldNotFound(yyj2064-1, "")
	}
	r.ReadEnd()
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2071 := z.EncBinary()
		_ = yym2071
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2072 := !z.EncBinary()
			yy2arr2072 := z.EncBasicHandle().StructToArray
			var yyq2072 [4]bool
			_, _, _ = yysep2072, yyq2072, yy2arr2072
			const yyr2072 bool = false
			yyq2072[0] = x.Kind != ""
			yyq2072[1] = x.APIVersion != ""
			yyq2072[2] = true
			if yyr2072 || yy2arr2072 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2072 int = 1
				for _, b := range yyq2072 {
					if b {
						yynn2072++
					}
				}
				r.EncodeMapStart(yynn2072)
			}
			if yyr2072 || yy2arr2072 {
				if yyq2072[0] {
					yym2074 := z.EncBinary()
					_ = yym2074
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2072[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2075 := z.EncBinary()
					_ = yym2075
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2072 || yy2arr2072 {
				if yyq2072[1] {
					yym2077 := z.EncBinary()
					_ = yym2077
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2072[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2078 := z.EncBinary()
					_ = yym2078
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2072 || yy2arr2072 {
				if yyq2072[2] {
					yy2080 := &x.ObjectMeta
					yy2080.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2072[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2081 := &x.ObjectMeta
					yy2081.CodecEncodeSelf(e)
				}
			}
			if yyr2072 || yy2arr2072 {
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2083 := z.EncBinary()
					_ = yym2083
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2084 := z.EncBinary()
					_ = yym2084
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yysep2072 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2085 := z.DecBinary()
	_ = yym2085
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2086 := r.ReadMapStart()
			if yyl2086 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2086, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2086 := r.ReadArrayStart()
			if yyl2086 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2086, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2087Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2087Slc
	var yyhl2087 bool = l >= 0
	for yyj2087 := 0; ; yyj2087++ {
		if yyhl2087 {
			if yyj2087 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2087Slc = r.DecodeBytes(yys2087Slc, true, true)
		yys2087 := string(yys2087Slc)
		switch yys2087 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2090 := &x.ObjectMeta
				yyv2090.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2091 := &x.Subsets
				yym2092 := z.DecBinary()
				_ = yym2092
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2091), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2087)
		} // end switch yys2087
	} // end for yyj2087
	if !yyhl2087 {
		r.ReadEnd()
	}
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2093 int
	var yyb2093 bool
	var yyhl2093 bool = l >= 0
	yyj2093++
	if yyhl2093 {
		yyb2093 = yyj2093 > l
	} else {
		yyb2093 = r.CheckBreak()
	}
	if yyb2093 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2093++
	if yyhl2093 {
		yyb2093 = yyj2093 > l
	} else {
		yyb2093 = r.CheckBreak()
	}
	if yyb2093 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2093++
	if yyhl2093 {
		yyb2093 = yyj2093 > l
	} else {
		yyb2093 = r.CheckBreak()
	}
	if yyb2093 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2096 := &x.ObjectMeta
		yyv2096.CodecDecodeSelf(d)
	}
	yyj2093++
	if yyhl2093 {
		yyb2093 = yyj2093 > l
	} else {
		yyb2093 = r.CheckBreak()
	}
	if yyb2093 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2097 := &x.Subsets
		yym2098 := z.DecBinary()
		_ = yym2098
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2097), d)
		}
	}
	for {
		yyj2093++
		if yyhl2093 {
			yyb2093 = yyj2093 > l
		} else {
			yyb2093 = r.CheckBreak()
		}
		if yyb2093 {
			break
		}
		z.DecStructFieldNotFound(yyj2093-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2099 := z.EncBinary()
		_ = yym2099
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2100 := !z.EncBinary()
			yy2arr2100 := z.EncBasicHandle().StructToArray
			var yyq2100 [3]bool
			_, _, _ = yysep2100, yyq2100, yy2arr2100
			const yyr2100 bool = false
			yyq2100[0] = len(x.Addresses) != 0
			yyq2100[1] = len(x.NotReadyAddresses) != 0
			yyq2100[2] = len(x.Ports) != 0
			if yyr2100 || yy2arr2100 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2100 int = 0
				for _, b := range yyq2100 {
					if b {
						yynn2100++
					}
				}
				r.EncodeMapStart(yynn2100)
			}
			if yyr2100 || yy2arr2100 {
				if yyq2100[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2102 := z.EncBinary()
						_ = yym2102
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2100[0] {
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2103 := z.EncBinary()
						_ = yym2103
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2100 || yy2arr2100 {
				if yyq2100[1] {
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2105 := z.EncBinary()
						_ = yym2105
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2100[1] {
					r.EncodeString(codecSelferC_UTF81234, string("notReadyAddresses"))
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2106 := z.EncBinary()
						_ = yym2106
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				}
			}
			if yyr2100 || yy2arr2100 {
				if yyq2100[2] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2108 := z.EncBinary()
						_ = yym2108
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2100[2] {
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2109 := z.EncBinary()
						_ = yym2109
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yysep2100 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2110 := z.DecBinary()
	_ = yym2110
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2111 := r.ReadMapStart()
			if yyl2111 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2111, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2111 := r.ReadArrayStart()
			if yyl2111 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2111, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2112Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2112Slc
	var yyhl2112 bool = l >= 0
	for yyj2112 := 0; ; yyj2112++ {
		if yyhl2112 {
			if yyj2112 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2112Slc = r.DecodeBytes(yys2112Slc, true, true)
		yys2112 := string(yys2112Slc)
		switch yys2112 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2113 := &x.Addresses
				yym2114 := z.DecBinary()
				_ = yym2114
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2113), d)
				}
			}
		case "notReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2115 := &x.NotReadyAddresses
				yym2116 := z.DecBinary()
				_ = yym2116
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2115), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2117 := &x.Ports
				yym2118 := z.DecBinary()
				_ = yym2118
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2117), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2112)
		} // end switch yys2112
	} // end for yyj2112
	if !yyhl2112 {
		r.ReadEnd()
	}
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2119 int
	var yyb2119 bool
	var yyhl2119 bool = l >= 0
	yyj2119++
	if yyhl2119 {
		yyb2119 = yyj2119 > l
	} else {
		yyb2119 = r.CheckBreak()
	}
	if yyb2119 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2120 := &x.Addresses
		yym2121 := z.DecBinary()
		_ = yym2121
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2120), d)
		}
	}
	yyj2119++
	if yyhl2119 {
		yyb2119 = yyj2119 > l
	} else {
		yyb2119 = r.CheckBreak()
	}
	if yyb2119 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2122 := &x.NotReadyAddresses
		yym2123 := z.DecBinary()
		_ = yym2123
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2122), d)
		}
	}
	yyj2119++
	if yyhl2119 {
		yyb2119 = yyj2119 > l
	} else {
		yyb2119 = r.CheckBreak()
	}
	if yyb2119 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2124 := &x.Ports
		yym2125 := z.DecBinary()
		_ = yym2125
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2124), d)
		}
	}
	for {
		yyj2119++
		if yyhl2119 {
			yyb2119 = yyj2119 > l
		} else {
			yyb2119 = r.CheckBreak()
		}
		if yyb2119 {
			break
		}
		z.DecStructFieldNotFound(yyj2119-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2126 := z.EncBinary()
		_ = yym2126
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2127 := !z.EncBinary()
			yy2arr2127 := z.EncBasicHandle().StructToArray
			var yyq2127 [2]bool
			_, _, _ = yysep2127, yyq2127, yy2arr2127
			const yyr2127 bool = false
			yyq2127[1] = x.TargetRef != nil
			if yyr2127 || yy2arr2127 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2127 int = 1
				for _, b := range yyq2127 {
					if b {
						yynn2127++
					}
				}
				r.EncodeMapStart(yynn2127)
			}
			if yyr2127 || yy2arr2127 {
				yym2129 := z.EncBinary()
				_ = yym2129
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				yym2130 := z.EncBinary()
				_ = yym2130
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2127 || yy2arr2127 {
				if yyq2127[1] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2127[1] {
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yysep2127 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2132 := z.DecBinary()
	_ = yym2132
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2133 := r.ReadMapStart()
			if yyl2133 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2133, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2133 := r.ReadArrayStart()
			if yyl2133 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2133, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2134Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2134Slc
	var yyhl2134 bool = l >= 0
	for yyj2134 := 0; ; yyj2134++ {
		if yyhl2134 {
			if yyj2134 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2134Slc = r.DecodeBytes(yys2134Slc, true, true)
		yys2134 := string(yys2134Slc)
		switch yys2134 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2134)
		} // end switch yys2134
	} // end for yyj2134
	if !yyhl2134 {
		r.ReadEnd()
	}
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2137 int
	var yyb2137 bool
	var yyhl2137 bool = l >= 0
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2137++
		if yyhl2137 {
			yyb2137 = yyj2137 > l
		} else {
			yyb2137 = r.CheckBreak()
		}
		if yyb2137 {
			break
		}
		z.DecStructFieldNotFound(yyj2137-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2140 := z.EncBinary()
		_ = yym2140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2141 := !z.EncBinary()
			yy2arr2141 := z.EncBasicHandle().StructToArray
			var yyq2141 [3]bool
			_, _, _ = yysep2141, yyq2141, yy2arr2141
			const yyr2141 bool = false
			yyq2141[0] = x.Name != ""
			yyq2141[2] = x.Protocol != ""
			if yyr2141 || yy2arr2141 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2141 int = 1
				for _, b := range yyq2141 {
					if b {
						yynn2141++
					}
				}
				r.EncodeMapStart(yynn2141)
			}
			if yyr2141 || yy2arr2141 {
				if yyq2141[0] {
					yym2143 := z.EncBinary()
					_ = yym2143
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2141[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym2144 := z.EncBinary()
					_ = yym2144
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2141 || yy2arr2141 {
				yym2146 := z.EncBinary()
				_ = yym2146
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yym2147 := z.EncBinary()
				_ = yym2147
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2141 || yy2arr2141 {
				if yyq2141[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2141[2] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yysep2141 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2149 := z.DecBinary()
	_ = yym2149
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2150 := r.ReadMapStart()
			if yyl2150 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2150, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2150 := r.ReadArrayStart()
			if yyl2150 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2150, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2151Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2151Slc
	var yyhl2151 bool = l >= 0
	for yyj2151 := 0; ; yyj2151++ {
		if yyhl2151 {
			if yyj2151 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2151Slc = r.DecodeBytes(yys2151Slc, true, true)
		yys2151 := string(yys2151Slc)
		switch yys2151 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2151)
		} // end switch yys2151
	} // end for yyj2151
	if !yyhl2151 {
		r.ReadEnd()
	}
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2155 int
	var yyb2155 bool
	var yyhl2155 bool = l >= 0
	yyj2155++
	if yyhl2155 {
		yyb2155 = yyj2155 > l
	} else {
		yyb2155 = r.CheckBreak()
	}
	if yyb2155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2155++
	if yyhl2155 {
		yyb2155 = yyj2155 > l
	} else {
		yyb2155 = r.CheckBreak()
	}
	if yyb2155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2155++
	if yyhl2155 {
		yyb2155 = yyj2155 > l
	} else {
		yyb2155 = r.CheckBreak()
	}
	if yyb2155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2155++
		if yyhl2155 {
			yyb2155 = yyj2155 > l
		} else {
			yyb2155 = r.CheckBreak()
		}
		if yyb2155 {
			break
		}
		z.DecStructFieldNotFound(yyj2155-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2159 := z.EncBinary()
		_ = yym2159
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2160 := !z.EncBinary()
			yy2arr2160 := z.EncBasicHandle().StructToArray
			var yyq2160 [4]bool
			_, _, _ = yysep2160, yyq2160, yy2arr2160
			const yyr2160 bool = false
			yyq2160[0] = x.Kind != ""
			yyq2160[1] = x.APIVersion != ""
			yyq2160[2] = true
			if yyr2160 || yy2arr2160 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2160 int = 1
				for _, b := range yyq2160 {
					if b {
						yynn2160++
					}
				}
				r.EncodeMapStart(yynn2160)
			}
			if yyr2160 || yy2arr2160 {
				if yyq2160[0] {
					yym2162 := z.EncBinary()
					_ = yym2162
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2160[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2163 := z.EncBinary()
					_ = yym2163
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2160 || yy2arr2160 {
				if yyq2160[1] {
					yym2165 := z.EncBinary()
					_ = yym2165
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2160[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2166 := z.EncBinary()
					_ = yym2166
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2160 || yy2arr2160 {
				if yyq2160[2] {
					yy2168 := &x.ListMeta
					yym2169 := z.EncBinary()
					_ = yym2169
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2168) {
					} else {
						z.EncFallback(yy2168)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2160[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2170 := &x.ListMeta
					yym2171 := z.EncBinary()
					_ = yym2171
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2170) {
					} else {
						z.EncFallback(yy2170)
					}
				}
			}
			if yyr2160 || yy2arr2160 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2173 := z.EncBinary()
					_ = yym2173
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2174 := z.EncBinary()
					_ = yym2174
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yysep2160 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2175 := z.DecBinary()
	_ = yym2175
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2176 := r.ReadMapStart()
			if yyl2176 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2176, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2176 := r.ReadArrayStart()
			if yyl2176 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2176, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2177Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2177Slc
	var yyhl2177 bool = l >= 0
	for yyj2177 := 0; ; yyj2177++ {
		if yyhl2177 {
			if yyj2177 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2177Slc = r.DecodeBytes(yys2177Slc, true, true)
		yys2177 := string(yys2177Slc)
		switch yys2177 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2180 := &x.ListMeta
				yym2181 := z.DecBinary()
				_ = yym2181
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2180) {
				} else {
					z.DecFallback(yyv2180, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2182 := &x.Items
				yym2183 := z.DecBinary()
				_ = yym2183
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2182), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2177)
		} // end switch yys2177
	} // end for yyj2177
	if !yyhl2177 {
		r.ReadEnd()
	}
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2184 int
	var yyb2184 bool
	var yyhl2184 bool = l >= 0
	yyj2184++
	if yyhl2184 {
		yyb2184 = yyj2184 > l
	} else {
		yyb2184 = r.CheckBreak()
	}
	if yyb2184 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2184++
	if yyhl2184 {
		yyb2184 = yyj2184 > l
	} else {
		yyb2184 = r.CheckBreak()
	}
	if yyb2184 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2184++
	if yyhl2184 {
		yyb2184 = yyj2184 > l
	} else {
		yyb2184 = r.CheckBreak()
	}
	if yyb2184 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2187 := &x.ListMeta
		yym2188 := z.DecBinary()
		_ = yym2188
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2187) {
		} else {
			z.DecFallback(yyv2187, false)
		}
	}
	yyj2184++
	if yyhl2184 {
		yyb2184 = yyj2184 > l
	} else {
		yyb2184 = r.CheckBreak()
	}
	if yyb2184 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2189 := &x.Items
		yym2190 := z.DecBinary()
		_ = yym2190
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2189), d)
		}
	}
	for {
		yyj2184++
		if yyhl2184 {
			yyb2184 = yyj2184 > l
		} else {
			yyb2184 = r.CheckBreak()
		}
		if yyb2184 {
			break
		}
		z.DecStructFieldNotFound(yyj2184-1, "")
	}
	r.ReadEnd()
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2191 := z.EncBinary()
		_ = yym2191
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2192 := !z.EncBinary()
			yy2arr2192 := z.EncBasicHandle().StructToArray
			var yyq2192 [4]bool
			_, _, _ = yysep2192, yyq2192, yy2arr2192
			const yyr2192 bool = false
			yyq2192[0] = x.PodCIDR != ""
			yyq2192[1] = x.ExternalID != ""
			yyq2192[2] = x.ProviderID != ""
			yyq2192[3] = x.Unschedulable != false
			if yyr2192 || yy2arr2192 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2192 int = 0
				for _, b := range yyq2192 {
					if b {
						yynn2192++
					}
				}
				r.EncodeMapStart(yynn2192)
			}
			if yyr2192 || yy2arr2192 {
				if yyq2192[0] {
					yym2194 := z.EncBinary()
					_ = yym2194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2192[0] {
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					yym2195 := z.EncBinary()
					_ = yym2195
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2192 || yy2arr2192 {
				if yyq2192[1] {
					yym2197 := z.EncBinary()
					_ = yym2197
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2192[1] {
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					yym2198 := z.EncBinary()
					_ = yym2198
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2192 || yy2arr2192 {
				if yyq2192[2] {
					yym2200 := z.EncBinary()
					_ = yym2200
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2192[2] {
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					yym2201 := z.EncBinary()
					_ = yym2201
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2192 || yy2arr2192 {
				if yyq2192[3] {
					yym2203 := z.EncBinary()
					_ = yym2203
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2192[3] {
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					yym2204 := z.EncBinary()
					_ = yym2204
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yysep2192 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2205 := z.DecBinary()
	_ = yym2205
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2206 := r.ReadMapStart()
			if yyl2206 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2206, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2206 := r.ReadArrayStart()
			if yyl2206 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2206, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2207Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2207Slc
	var yyhl2207 bool = l >= 0
	for yyj2207 := 0; ; yyj2207++ {
		if yyhl2207 {
			if yyj2207 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2207Slc = r.DecodeBytes(yys2207Slc, true, true)
		yys2207 := string(yys2207Slc)
		switch yys2207 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2207)
		} // end switch yys2207
	} // end for yyj2207
	if !yyhl2207 {
		r.ReadEnd()
	}
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2212 int
	var yyb2212 bool
	var yyhl2212 bool = l >= 0
	yyj2212++
	if yyhl2212 {
		yyb2212 = yyj2212 > l
	} else {
		yyb2212 = r.CheckBreak()
	}
	if yyb2212 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2212++
	if yyhl2212 {
		yyb2212 = yyj2212 > l
	} else {
		yyb2212 = r.CheckBreak()
	}
	if yyb2212 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2212++
	if yyhl2212 {
		yyb2212 = yyj2212 > l
	} else {
		yyb2212 = r.CheckBreak()
	}
	if yyb2212 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2212++
	if yyhl2212 {
		yyb2212 = yyj2212 > l
	} else {
		yyb2212 = r.CheckBreak()
	}
	if yyb2212 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2212++
		if yyhl2212 {
			yyb2212 = yyj2212 > l
		} else {
			yyb2212 = r.CheckBreak()
		}
		if yyb2212 {
			break
		}
		z.DecStructFieldNotFound(yyj2212-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2217 := z.EncBinary()
		_ = yym2217
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2218 := !z.EncBinary()
			yy2arr2218 := z.EncBasicHandle().StructToArray
			var yyq2218 [1]bool
			_, _, _ = yysep2218, yyq2218, yy2arr2218
			const yyr2218 bool = false
			if yyr2218 || yy2arr2218 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2218 int = 1
				for _, b := range yyq2218 {
					if b {
						yynn2218++
					}
				}
				r.EncodeMapStart(yynn2218)
			}
			if yyr2218 || yy2arr2218 {
				yym2220 := z.EncBinary()
				_ = yym2220
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				yym2221 := z.EncBinary()
				_ = yym2221
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yysep2218 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2222 := z.DecBinary()
	_ = yym2222
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2223 := r.ReadMapStart()
			if yyl2223 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2223, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2223 := r.ReadArrayStart()
			if yyl2223 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2223, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2224Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2224Slc
	var yyhl2224 bool = l >= 0
	for yyj2224 := 0; ; yyj2224++ {
		if yyhl2224 {
			if yyj2224 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2224Slc = r.DecodeBytes(yys2224Slc, true, true)
		yys2224 := string(yys2224Slc)
		switch yys2224 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2224)
		} // end switch yys2224
	} // end for yyj2224
	if !yyhl2224 {
		r.ReadEnd()
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2226 int
	var yyb2226 bool
	var yyhl2226 bool = l >= 0
	yyj2226++
	if yyhl2226 {
		yyb2226 = yyj2226 > l
	} else {
		yyb2226 = r.CheckBreak()
	}
	if yyb2226 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2226++
		if yyhl2226 {
			yyb2226 = yyj2226 > l
		} else {
			yyb2226 = r.CheckBreak()
		}
		if yyb2226 {
			break
		}
		z.DecStructFieldNotFound(yyj2226-1, "")
	}
	r.ReadEnd()
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2228 := z.EncBinary()
		_ = yym2228
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2229 := !z.EncBinary()
			yy2arr2229 := z.EncBasicHandle().StructToArray
			var yyq2229 [1]bool
			_, _, _ = yysep2229, yyq2229, yy2arr2229
			const yyr2229 bool = false
			yyq2229[0] = true
			if yyr2229 || yy2arr2229 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2229 int = 0
				for _, b := range yyq2229 {
					if b {
						yynn2229++
					}
				}
				r.EncodeMapStart(yynn2229)
			}
			if yyr2229 || yy2arr2229 {
				if yyq2229[0] {
					yy2231 := &x.KubeletEndpoint
					yy2231.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2229[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					yy2232 := &x.KubeletEndpoint
					yy2232.CodecEncodeSelf(e)
				}
			}
			if yysep2229 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2233 := z.DecBinary()
	_ = yym2233
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2234 := r.ReadMapStart()
			if yyl2234 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2234, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2234 := r.ReadArrayStart()
			if yyl2234 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2234, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2235Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2235Slc
	var yyhl2235 bool = l >= 0
	for yyj2235 := 0; ; yyj2235++ {
		if yyhl2235 {
			if yyj2235 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2235Slc = r.DecodeBytes(yys2235Slc, true, true)
		yys2235 := string(yys2235Slc)
		switch yys2235 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2236 := &x.KubeletEndpoint
				yyv2236.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2235)
		} // end switch yys2235
	} // end for yyj2235
	if !yyhl2235 {
		r.ReadEnd()
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2237 int
	var yyb2237 bool
	var yyhl2237 bool = l >= 0
	yyj2237++
	if yyhl2237 {
		yyb2237 = yyj2237 > l
	} else {
		yyb2237 = r.CheckBreak()
	}
	if yyb2237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2238 := &x.KubeletEndpoint
		yyv2238.CodecDecodeSelf(d)
	}
	for {
		yyj2237++
		if yyhl2237 {
			yyb2237 = yyj2237 > l
		} else {
			yyb2237 = r.CheckBreak()
		}
		if yyb2237 {
			break
		}
		z.DecStructFieldNotFound(yyj2237-1, "")
	}
	r.ReadEnd()
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2239 := z.EncBinary()
		_ = yym2239
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2240 := !z.EncBinary()
			yy2arr2240 := z.EncBasicHandle().StructToArray
			var yyq2240 [8]bool
			_, _, _ = yysep2240, yyq2240, yy2arr2240
			const yyr2240 bool = false
			if yyr2240 || yy2arr2240 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2240 int = 8
				for _, b := range yyq2240 {
					if b {
						yynn2240++
					}
				}
				r.EncodeMapStart(yynn2240)
			}
			if yyr2240 || yy2arr2240 {
				yym2242 := z.EncBinary()
				_ = yym2242
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				yym2243 := z.EncBinary()
				_ = yym2243
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2240 || yy2arr2240 {
				yym2245 := z.EncBinary()
				_ = yym2245
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				yym2246 := z.EncBinary()
				_ = yym2246
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2240 || yy2arr2240 {
				yym2248 := z.EncBinary()
				_ = yym2248
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				yym2249 := z.EncBinary()
				_ = yym2249
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2240 || yy2arr2240 {
				yym2251 := z.EncBinary()
				_ = yym2251
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				yym2252 := z.EncBinary()
				_ = yym2252
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2240 || yy2arr2240 {
				yym2254 := z.EncBinary()
				_ = yym2254
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				yym2255 := z.EncBinary()
				_ = yym2255
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			}
			if yyr2240 || yy2arr2240 {
				yym2257 := z.EncBinary()
				_ = yym2257
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				yym2258 := z.EncBinary()
				_ = yym2258
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2240 || yy2arr2240 {
				yym2260 := z.EncBinary()
				_ = yym2260
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				yym2261 := z.EncBinary()
				_ = yym2261
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2240 || yy2arr2240 {
				yym2263 := z.EncBinary()
				_ = yym2263
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				yym2264 := z.EncBinary()
				_ = yym2264
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yysep2240 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2265 := z.DecBinary()
	_ = yym2265
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2266 := r.ReadMapStart()
			if yyl2266 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2266, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2266 := r.ReadArrayStart()
			if yyl2266 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2266, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2267Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2267Slc
	var yyhl2267 bool = l >= 0
	for yyj2267 := 0; ; yyj2267++ {
		if yyhl2267 {
			if yyj2267 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2267Slc = r.DecodeBytes(yys2267Slc, true, true)
		yys2267 := string(yys2267Slc)
		switch yys2267 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OsImage = ""
			} else {
				x.OsImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2267)
		} // end switch yys2267
	} // end for yyj2267
	if !yyhl2267 {
		r.ReadEnd()
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2276 int
	var yyb2276 bool
	var yyhl2276 bool = l >= 0
	yyj2276++
	if yyhl2276 {
		yyb2276 = yyj2276 > l
	} else {
		yyb2276 = r.CheckBreak()
	}
	if yyb2276 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2276++
	if yyhl2276 {
		yyb2276 = yyj2276 > l
	} else {
		yyb2276 = r.CheckBreak()
	}
	if yyb2276 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2276++
	if yyhl2276 {
		yyb2276 = yyj2276 > l
	} else {
		yyb2276 = r.CheckBreak()
	}
	if yyb2276 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2276++
	if yyhl2276 {
		yyb2276 = yyj2276 > l
	} else {
		yyb2276 = r.CheckBreak()
	}
	if yyb2276 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2276++
	if yyhl2276 {
		yyb2276 = yyj2276 > l
	} else {
		yyb2276 = r.CheckBreak()
	}
	if yyb2276 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.OsImage = ""
	} else {
		x.OsImage = string(r.DecodeString())
	}
	yyj2276++
	if yyhl2276 {
		yyb2276 = yyj2276 > l
	} else {
		yyb2276 = r.CheckBreak()
	}
	if yyb2276 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2276++
	if yyhl2276 {
		yyb2276 = yyj2276 > l
	} else {
		yyb2276 = r.CheckBreak()
	}
	if yyb2276 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2276++
	if yyhl2276 {
		yyb2276 = yyj2276 > l
	} else {
		yyb2276 = r.CheckBreak()
	}
	if yyb2276 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2276++
		if yyhl2276 {
			yyb2276 = yyj2276 > l
		} else {
			yyb2276 = r.CheckBreak()
		}
		if yyb2276 {
			break
		}
		z.DecStructFieldNotFound(yyj2276-1, "")
	}
	r.ReadEnd()
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2285 := z.EncBinary()
		_ = yym2285
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2286 := !z.EncBinary()
			yy2arr2286 := z.EncBasicHandle().StructToArray
			var yyq2286 [6]bool
			_, _, _ = yysep2286, yyq2286, yy2arr2286
			const yyr2286 bool = false
			yyq2286[0] = len(x.Capacity) != 0
			yyq2286[1] = x.Phase != ""
			yyq2286[2] = len(x.Conditions) != 0
			yyq2286[3] = len(x.Addresses) != 0
			yyq2286[4] = true
			yyq2286[5] = true
			if yyr2286 || yy2arr2286 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2286 int = 0
				for _, b := range yyq2286 {
					if b {
						yynn2286++
					}
				}
				r.EncodeMapStart(yynn2286)
			}
			if yyr2286 || yy2arr2286 {
				if yyq2286[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2286[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2286 || yy2arr2286 {
				if yyq2286[1] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2286[1] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2286 || yy2arr2286 {
				if yyq2286[2] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2290 := z.EncBinary()
						_ = yym2290
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2286[2] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2291 := z.EncBinary()
						_ = yym2291
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2286 || yy2arr2286 {
				if yyq2286[3] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2293 := z.EncBinary()
						_ = yym2293
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2286[3] {
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2294 := z.EncBinary()
						_ = yym2294
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2286 || yy2arr2286 {
				if yyq2286[4] {
					yy2296 := &x.DaemonEndpoints
					yy2296.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2286[4] {
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					yy2297 := &x.DaemonEndpoints
					yy2297.CodecEncodeSelf(e)
				}
			}
			if yyr2286 || yy2arr2286 {
				if yyq2286[5] {
					yy2299 := &x.NodeInfo
					yy2299.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2286[5] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					yy2300 := &x.NodeInfo
					yy2300.CodecEncodeSelf(e)
				}
			}
			if yysep2286 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2301 := z.DecBinary()
	_ = yym2301
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2302 := r.ReadMapStart()
			if yyl2302 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2302, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2302 := r.ReadArrayStart()
			if yyl2302 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2302, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2303Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2303Slc
	var yyhl2303 bool = l >= 0
	for yyj2303 := 0; ; yyj2303++ {
		if yyhl2303 {
			if yyj2303 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2303Slc = r.DecodeBytes(yys2303Slc, true, true)
		yys2303 := string(yys2303Slc)
		switch yys2303 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2304 := &x.Capacity
				yyv2304.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2306 := &x.Conditions
				yym2307 := z.DecBinary()
				_ = yym2307
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2306), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2308 := &x.Addresses
				yym2309 := z.DecBinary()
				_ = yym2309
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2308), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2310 := &x.DaemonEndpoints
				yyv2310.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2311 := &x.NodeInfo
				yyv2311.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2303)
		} // end switch yys2303
	} // end for yyj2303
	if !yyhl2303 {
		r.ReadEnd()
	}
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2312 int
	var yyb2312 bool
	var yyhl2312 bool = l >= 0
	yyj2312++
	if yyhl2312 {
		yyb2312 = yyj2312 > l
	} else {
		yyb2312 = r.CheckBreak()
	}
	if yyb2312 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2313 := &x.Capacity
		yyv2313.CodecDecodeSelf(d)
	}
	yyj2312++
	if yyhl2312 {
		yyb2312 = yyj2312 > l
	} else {
		yyb2312 = r.CheckBreak()
	}
	if yyb2312 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2312++
	if yyhl2312 {
		yyb2312 = yyj2312 > l
	} else {
		yyb2312 = r.CheckBreak()
	}
	if yyb2312 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2315 := &x.Conditions
		yym2316 := z.DecBinary()
		_ = yym2316
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2315), d)
		}
	}
	yyj2312++
	if yyhl2312 {
		yyb2312 = yyj2312 > l
	} else {
		yyb2312 = r.CheckBreak()
	}
	if yyb2312 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2317 := &x.Addresses
		yym2318 := z.DecBinary()
		_ = yym2318
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2317), d)
		}
	}
	yyj2312++
	if yyhl2312 {
		yyb2312 = yyj2312 > l
	} else {
		yyb2312 = r.CheckBreak()
	}
	if yyb2312 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2319 := &x.DaemonEndpoints
		yyv2319.CodecDecodeSelf(d)
	}
	yyj2312++
	if yyhl2312 {
		yyb2312 = yyj2312 > l
	} else {
		yyb2312 = r.CheckBreak()
	}
	if yyb2312 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2320 := &x.NodeInfo
		yyv2320.CodecDecodeSelf(d)
	}
	for {
		yyj2312++
		if yyhl2312 {
			yyb2312 = yyj2312 > l
		} else {
			yyb2312 = r.CheckBreak()
		}
		if yyb2312 {
			break
		}
		z.DecStructFieldNotFound(yyj2312-1, "")
	}
	r.ReadEnd()
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2321 := z.EncBinary()
	_ = yym2321
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2322 := z.DecBinary()
	_ = yym2322
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2323 := z.EncBinary()
	_ = yym2323
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2324 := z.DecBinary()
	_ = yym2324
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2325 := z.EncBinary()
		_ = yym2325
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2326 := !z.EncBinary()
			yy2arr2326 := z.EncBasicHandle().StructToArray
			var yyq2326 [6]bool
			_, _, _ = yysep2326, yyq2326, yy2arr2326
			const yyr2326 bool = false
			yyq2326[2] = true
			yyq2326[3] = true
			yyq2326[4] = x.Reason != ""
			yyq2326[5] = x.Message != ""
			if yyr2326 || yy2arr2326 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2326 int = 2
				for _, b := range yyq2326 {
					if b {
						yynn2326++
					}
				}
				r.EncodeMapStart(yynn2326)
			}
			if yyr2326 || yy2arr2326 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2326 || yy2arr2326 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2326 || yy2arr2326 {
				if yyq2326[2] {
					yy2330 := &x.LastHeartbeatTime
					yym2331 := z.EncBinary()
					_ = yym2331
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2330) {
					} else if yym2331 {
						z.EncBinaryMarshal(yy2330)
					} else if !yym2331 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2330)
					} else {
						z.EncFallback(yy2330)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2326[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					yy2332 := &x.LastHeartbeatTime
					yym2333 := z.EncBinary()
					_ = yym2333
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2332) {
					} else if yym2333 {
						z.EncBinaryMarshal(yy2332)
					} else if !yym2333 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2332)
					} else {
						z.EncFallback(yy2332)
					}
				}
			}
			if yyr2326 || yy2arr2326 {
				if yyq2326[3] {
					yy2335 := &x.LastTransitionTime
					yym2336 := z.EncBinary()
					_ = yym2336
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2335) {
					} else if yym2336 {
						z.EncBinaryMarshal(yy2335)
					} else if !yym2336 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2335)
					} else {
						z.EncFallback(yy2335)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2326[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy2337 := &x.LastTransitionTime
					yym2338 := z.EncBinary()
					_ = yym2338
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2337) {
					} else if yym2338 {
						z.EncBinaryMarshal(yy2337)
					} else if !yym2338 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2337)
					} else {
						z.EncFallback(yy2337)
					}
				}
			}
			if yyr2326 || yy2arr2326 {
				if yyq2326[4] {
					yym2340 := z.EncBinary()
					_ = yym2340
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2326[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym2341 := z.EncBinary()
					_ = yym2341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2326 || yy2arr2326 {
				if yyq2326[5] {
					yym2343 := z.EncBinary()
					_ = yym2343
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2326[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym2344 := z.EncBinary()
					_ = yym2344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep2326 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2345 := z.DecBinary()
	_ = yym2345
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2346 := r.ReadMapStart()
			if yyl2346 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2346, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2346 := r.ReadArrayStart()
			if yyl2346 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2346, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2347Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2347Slc
	var yyhl2347 bool = l >= 0
	for yyj2347 := 0; ; yyj2347++ {
		if yyhl2347 {
			if yyj2347 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2347Slc = r.DecodeBytes(yys2347Slc, true, true)
		yys2347 := string(yys2347Slc)
		switch yys2347 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv2350 := &x.LastHeartbeatTime
				yym2351 := z.DecBinary()
				_ = yym2351
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2350) {
				} else if yym2351 {
					z.DecBinaryUnmarshal(yyv2350)
				} else if !yym2351 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2350)
				} else {
					z.DecFallback(yyv2350, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2352 := &x.LastTransitionTime
				yym2353 := z.DecBinary()
				_ = yym2353
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2352) {
				} else if yym2353 {
					z.DecBinaryUnmarshal(yyv2352)
				} else if !yym2353 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2352)
				} else {
					z.DecFallback(yyv2352, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2347)
		} // end switch yys2347
	} // end for yyj2347
	if !yyhl2347 {
		r.ReadEnd()
	}
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2356 int
	var yyb2356 bool
	var yyhl2356 bool = l >= 0
	yyj2356++
	if yyhl2356 {
		yyb2356 = yyj2356 > l
	} else {
		yyb2356 = r.CheckBreak()
	}
	if yyb2356 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2356++
	if yyhl2356 {
		yyb2356 = yyj2356 > l
	} else {
		yyb2356 = r.CheckBreak()
	}
	if yyb2356 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2356++
	if yyhl2356 {
		yyb2356 = yyj2356 > l
	} else {
		yyb2356 = r.CheckBreak()
	}
	if yyb2356 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv2359 := &x.LastHeartbeatTime
		yym2360 := z.DecBinary()
		_ = yym2360
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2359) {
		} else if yym2360 {
			z.DecBinaryUnmarshal(yyv2359)
		} else if !yym2360 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2359)
		} else {
			z.DecFallback(yyv2359, false)
		}
	}
	yyj2356++
	if yyhl2356 {
		yyb2356 = yyj2356 > l
	} else {
		yyb2356 = r.CheckBreak()
	}
	if yyb2356 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2361 := &x.LastTransitionTime
		yym2362 := z.DecBinary()
		_ = yym2362
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2361) {
		} else if yym2362 {
			z.DecBinaryUnmarshal(yyv2361)
		} else if !yym2362 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2361)
		} else {
			z.DecFallback(yyv2361, false)
		}
	}
	yyj2356++
	if yyhl2356 {
		yyb2356 = yyj2356 > l
	} else {
		yyb2356 = r.CheckBreak()
	}
	if yyb2356 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2356++
	if yyhl2356 {
		yyb2356 = yyj2356 > l
	} else {
		yyb2356 = r.CheckBreak()
	}
	if yyb2356 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2356++
		if yyhl2356 {
			yyb2356 = yyj2356 > l
		} else {
			yyb2356 = r.CheckBreak()
		}
		if yyb2356 {
			break
		}
		z.DecStructFieldNotFound(yyj2356-1, "")
	}
	r.ReadEnd()
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2365 := z.EncBinary()
	_ = yym2365
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2366 := z.DecBinary()
	_ = yym2366
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2367 := z.EncBinary()
		_ = yym2367
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2368 := !z.EncBinary()
			yy2arr2368 := z.EncBasicHandle().StructToArray
			var yyq2368 [2]bool
			_, _, _ = yysep2368, yyq2368, yy2arr2368
			const yyr2368 bool = false
			if yyr2368 || yy2arr2368 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2368 int = 2
				for _, b := range yyq2368 {
					if b {
						yynn2368++
					}
				}
				r.EncodeMapStart(yynn2368)
			}
			if yyr2368 || yy2arr2368 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2368 || yy2arr2368 {
				yym2371 := z.EncBinary()
				_ = yym2371
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				yym2372 := z.EncBinary()
				_ = yym2372
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yysep2368 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2373 := z.DecBinary()
	_ = yym2373
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2374 := r.ReadMapStart()
			if yyl2374 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2374, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2374 := r.ReadArrayStart()
			if yyl2374 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2374, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2375Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2375Slc
	var yyhl2375 bool = l >= 0
	for yyj2375 := 0; ; yyj2375++ {
		if yyhl2375 {
			if yyj2375 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2375Slc = r.DecodeBytes(yys2375Slc, true, true)
		yys2375 := string(yys2375Slc)
		switch yys2375 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2375)
		} // end switch yys2375
	} // end for yyj2375
	if !yyhl2375 {
		r.ReadEnd()
	}
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2378 int
	var yyb2378 bool
	var yyhl2378 bool = l >= 0
	yyj2378++
	if yyhl2378 {
		yyb2378 = yyj2378 > l
	} else {
		yyb2378 = r.CheckBreak()
	}
	if yyb2378 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2378++
	if yyhl2378 {
		yyb2378 = yyj2378 > l
	} else {
		yyb2378 = r.CheckBreak()
	}
	if yyb2378 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj2378++
		if yyhl2378 {
			yyb2378 = yyj2378 > l
		} else {
			yyb2378 = r.CheckBreak()
		}
		if yyb2378 {
			break
		}
		z.DecStructFieldNotFound(yyj2378-1, "")
	}
	r.ReadEnd()
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2381 := z.EncBinary()
	_ = yym2381
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2382 := z.DecBinary()
	_ = yym2382
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2383 := z.EncBinary()
		_ = yym2383
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2384 := z.DecBinary()
	_ = yym2384
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2385 := z.EncBinary()
		_ = yym2385
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2386 := !z.EncBinary()
			yy2arr2386 := z.EncBasicHandle().StructToArray
			var yyq2386 [5]bool
			_, _, _ = yysep2386, yyq2386, yy2arr2386
			const yyr2386 bool = false
			yyq2386[0] = x.Kind != ""
			yyq2386[1] = x.APIVersion != ""
			yyq2386[2] = true
			yyq2386[3] = true
			yyq2386[4] = true
			if yyr2386 || yy2arr2386 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2386 int = 0
				for _, b := range yyq2386 {
					if b {
						yynn2386++
					}
				}
				r.EncodeMapStart(yynn2386)
			}
			if yyr2386 || yy2arr2386 {
				if yyq2386[0] {
					yym2388 := z.EncBinary()
					_ = yym2388
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2386[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2389 := z.EncBinary()
					_ = yym2389
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2386 || yy2arr2386 {
				if yyq2386[1] {
					yym2391 := z.EncBinary()
					_ = yym2391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2386[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2392 := z.EncBinary()
					_ = yym2392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2386 || yy2arr2386 {
				if yyq2386[2] {
					yy2394 := &x.ObjectMeta
					yy2394.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2386[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2395 := &x.ObjectMeta
					yy2395.CodecEncodeSelf(e)
				}
			}
			if yyr2386 || yy2arr2386 {
				if yyq2386[3] {
					yy2397 := &x.Spec
					yy2397.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2386[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2398 := &x.Spec
					yy2398.CodecEncodeSelf(e)
				}
			}
			if yyr2386 || yy2arr2386 {
				if yyq2386[4] {
					yy2400 := &x.Status
					yy2400.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2386[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2401 := &x.Status
					yy2401.CodecEncodeSelf(e)
				}
			}
			if yysep2386 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2402 := z.DecBinary()
	_ = yym2402
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2403 := r.ReadMapStart()
			if yyl2403 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2403, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2403 := r.ReadArrayStart()
			if yyl2403 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2403, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2404Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2404Slc
	var yyhl2404 bool = l >= 0
	for yyj2404 := 0; ; yyj2404++ {
		if yyhl2404 {
			if yyj2404 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2404Slc = r.DecodeBytes(yys2404Slc, true, true)
		yys2404 := string(yys2404Slc)
		switch yys2404 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2407 := &x.ObjectMeta
				yyv2407.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2408 := &x.Spec
				yyv2408.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2409 := &x.Status
				yyv2409.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2404)
		} // end switch yys2404
	} // end for yyj2404
	if !yyhl2404 {
		r.ReadEnd()
	}
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2410 int
	var yyb2410 bool
	var yyhl2410 bool = l >= 0
	yyj2410++
	if yyhl2410 {
		yyb2410 = yyj2410 > l
	} else {
		yyb2410 = r.CheckBreak()
	}
	if yyb2410 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2410++
	if yyhl2410 {
		yyb2410 = yyj2410 > l
	} else {
		yyb2410 = r.CheckBreak()
	}
	if yyb2410 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2410++
	if yyhl2410 {
		yyb2410 = yyj2410 > l
	} else {
		yyb2410 = r.CheckBreak()
	}
	if yyb2410 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2413 := &x.ObjectMeta
		yyv2413.CodecDecodeSelf(d)
	}
	yyj2410++
	if yyhl2410 {
		yyb2410 = yyj2410 > l
	} else {
		yyb2410 = r.CheckBreak()
	}
	if yyb2410 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2414 := &x.Spec
		yyv2414.CodecDecodeSelf(d)
	}
	yyj2410++
	if yyhl2410 {
		yyb2410 = yyj2410 > l
	} else {
		yyb2410 = r.CheckBreak()
	}
	if yyb2410 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2415 := &x.Status
		yyv2415.CodecDecodeSelf(d)
	}
	for {
		yyj2410++
		if yyhl2410 {
			yyb2410 = yyj2410 > l
		} else {
			yyb2410 = r.CheckBreak()
		}
		if yyb2410 {
			break
		}
		z.DecStructFieldNotFound(yyj2410-1, "")
	}
	r.ReadEnd()
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2416 := z.EncBinary()
		_ = yym2416
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2417 := !z.EncBinary()
			yy2arr2417 := z.EncBasicHandle().StructToArray
			var yyq2417 [4]bool
			_, _, _ = yysep2417, yyq2417, yy2arr2417
			const yyr2417 bool = false
			yyq2417[0] = x.Kind != ""
			yyq2417[1] = x.APIVersion != ""
			yyq2417[2] = true
			if yyr2417 || yy2arr2417 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2417 int = 1
				for _, b := range yyq2417 {
					if b {
						yynn2417++
					}
				}
				r.EncodeMapStart(yynn2417)
			}
			if yyr2417 || yy2arr2417 {
				if yyq2417[0] {
					yym2419 := z.EncBinary()
					_ = yym2419
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2417[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2420 := z.EncBinary()
					_ = yym2420
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2417 || yy2arr2417 {
				if yyq2417[1] {
					yym2422 := z.EncBinary()
					_ = yym2422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2417[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2423 := z.EncBinary()
					_ = yym2423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2417 || yy2arr2417 {
				if yyq2417[2] {
					yy2425 := &x.ListMeta
					yym2426 := z.EncBinary()
					_ = yym2426
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2425) {
					} else {
						z.EncFallback(yy2425)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2417[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2427 := &x.ListMeta
					yym2428 := z.EncBinary()
					_ = yym2428
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2427) {
					} else {
						z.EncFallback(yy2427)
					}
				}
			}
			if yyr2417 || yy2arr2417 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2430 := z.EncBinary()
					_ = yym2430
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2431 := z.EncBinary()
					_ = yym2431
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yysep2417 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2432 := z.DecBinary()
	_ = yym2432
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2433 := r.ReadMapStart()
			if yyl2433 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2433, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2433 := r.ReadArrayStart()
			if yyl2433 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2433, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2434Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2434Slc
	var yyhl2434 bool = l >= 0
	for yyj2434 := 0; ; yyj2434++ {
		if yyhl2434 {
			if yyj2434 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2434Slc = r.DecodeBytes(yys2434Slc, true, true)
		yys2434 := string(yys2434Slc)
		switch yys2434 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2437 := &x.ListMeta
				yym2438 := z.DecBinary()
				_ = yym2438
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2437) {
				} else {
					z.DecFallback(yyv2437, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2439 := &x.Items
				yym2440 := z.DecBinary()
				_ = yym2440
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2439), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2434)
		} // end switch yys2434
	} // end for yyj2434
	if !yyhl2434 {
		r.ReadEnd()
	}
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2441 int
	var yyb2441 bool
	var yyhl2441 bool = l >= 0
	yyj2441++
	if yyhl2441 {
		yyb2441 = yyj2441 > l
	} else {
		yyb2441 = r.CheckBreak()
	}
	if yyb2441 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2441++
	if yyhl2441 {
		yyb2441 = yyj2441 > l
	} else {
		yyb2441 = r.CheckBreak()
	}
	if yyb2441 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2441++
	if yyhl2441 {
		yyb2441 = yyj2441 > l
	} else {
		yyb2441 = r.CheckBreak()
	}
	if yyb2441 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2444 := &x.ListMeta
		yym2445 := z.DecBinary()
		_ = yym2445
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2444) {
		} else {
			z.DecFallback(yyv2444, false)
		}
	}
	yyj2441++
	if yyhl2441 {
		yyb2441 = yyj2441 > l
	} else {
		yyb2441 = r.CheckBreak()
	}
	if yyb2441 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2446 := &x.Items
		yym2447 := z.DecBinary()
		_ = yym2447
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2446), d)
		}
	}
	for {
		yyj2441++
		if yyhl2441 {
			yyb2441 = yyj2441 > l
		} else {
			yyb2441 = r.CheckBreak()
		}
		if yyb2441 {
			break
		}
		z.DecStructFieldNotFound(yyj2441-1, "")
	}
	r.ReadEnd()
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2448 := z.EncBinary()
	_ = yym2448
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2449 := z.DecBinary()
	_ = yym2449
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2450 := z.EncBinary()
		_ = yym2450
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2451 := !z.EncBinary()
			yy2arr2451 := z.EncBasicHandle().StructToArray
			var yyq2451 [1]bool
			_, _, _ = yysep2451, yyq2451, yy2arr2451
			const yyr2451 bool = false
			yyq2451[0] = len(x.Finalizers) != 0
			if yyr2451 || yy2arr2451 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2451 int = 0
				for _, b := range yyq2451 {
					if b {
						yynn2451++
					}
				}
				r.EncodeMapStart(yynn2451)
			}
			if yyr2451 || yy2arr2451 {
				if yyq2451[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym2453 := z.EncBinary()
						_ = yym2453
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2451[0] {
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym2454 := z.EncBinary()
						_ = yym2454
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yysep2451 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2455 := z.DecBinary()
	_ = yym2455
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2456 := r.ReadMapStart()
			if yyl2456 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2456, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2456 := r.ReadArrayStart()
			if yyl2456 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2456, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2457Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2457Slc
	var yyhl2457 bool = l >= 0
	for yyj2457 := 0; ; yyj2457++ {
		if yyhl2457 {
			if yyj2457 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2457Slc = r.DecodeBytes(yys2457Slc, true, true)
		yys2457 := string(yys2457Slc)
		switch yys2457 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2458 := &x.Finalizers
				yym2459 := z.DecBinary()
				_ = yym2459
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2458), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2457)
		} // end switch yys2457
	} // end for yyj2457
	if !yyhl2457 {
		r.ReadEnd()
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2460 int
	var yyb2460 bool
	var yyhl2460 bool = l >= 0
	yyj2460++
	if yyhl2460 {
		yyb2460 = yyj2460 > l
	} else {
		yyb2460 = r.CheckBreak()
	}
	if yyb2460 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2461 := &x.Finalizers
		yym2462 := z.DecBinary()
		_ = yym2462
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2461), d)
		}
	}
	for {
		yyj2460++
		if yyhl2460 {
			yyb2460 = yyj2460 > l
		} else {
			yyb2460 = r.CheckBreak()
		}
		if yyb2460 {
			break
		}
		z.DecStructFieldNotFound(yyj2460-1, "")
	}
	r.ReadEnd()
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2463 := z.EncBinary()
		_ = yym2463
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2464 := !z.EncBinary()
			yy2arr2464 := z.EncBasicHandle().StructToArray
			var yyq2464 [1]bool
			_, _, _ = yysep2464, yyq2464, yy2arr2464
			const yyr2464 bool = false
			yyq2464[0] = x.Phase != ""
			if yyr2464 || yy2arr2464 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2464 int = 0
				for _, b := range yyq2464 {
					if b {
						yynn2464++
					}
				}
				r.EncodeMapStart(yynn2464)
			}
			if yyr2464 || yy2arr2464 {
				if yyq2464[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2464[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yysep2464 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2466 := z.DecBinary()
	_ = yym2466
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2467 := r.ReadMapStart()
			if yyl2467 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2467, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2467 := r.ReadArrayStart()
			if yyl2467 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2467, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2468Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2468Slc
	var yyhl2468 bool = l >= 0
	for yyj2468 := 0; ; yyj2468++ {
		if yyhl2468 {
			if yyj2468 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2468Slc = r.DecodeBytes(yys2468Slc, true, true)
		yys2468 := string(yys2468Slc)
		switch yys2468 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2468)
		} // end switch yys2468
	} // end for yyj2468
	if !yyhl2468 {
		r.ReadEnd()
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2470 int
	var yyb2470 bool
	var yyhl2470 bool = l >= 0
	yyj2470++
	if yyhl2470 {
		yyb2470 = yyj2470 > l
	} else {
		yyb2470 = r.CheckBreak()
	}
	if yyb2470 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2470++
		if yyhl2470 {
			yyb2470 = yyj2470 > l
		} else {
			yyb2470 = r.CheckBreak()
		}
		if yyb2470 {
			break
		}
		z.DecStructFieldNotFound(yyj2470-1, "")
	}
	r.ReadEnd()
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2472 := z.EncBinary()
	_ = yym2472
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2473 := z.DecBinary()
	_ = yym2473
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2474 := z.EncBinary()
		_ = yym2474
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2475 := !z.EncBinary()
			yy2arr2475 := z.EncBasicHandle().StructToArray
			var yyq2475 [5]bool
			_, _, _ = yysep2475, yyq2475, yy2arr2475
			const yyr2475 bool = false
			yyq2475[0] = x.Kind != ""
			yyq2475[1] = x.APIVersion != ""
			yyq2475[2] = true
			yyq2475[3] = true
			yyq2475[4] = true
			if yyr2475 || yy2arr2475 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2475 int = 0
				for _, b := range yyq2475 {
					if b {
						yynn2475++
					}
				}
				r.EncodeMapStart(yynn2475)
			}
			if yyr2475 || yy2arr2475 {
				if yyq2475[0] {
					yym2477 := z.EncBinary()
					_ = yym2477
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2475[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2478 := z.EncBinary()
					_ = yym2478
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2475 || yy2arr2475 {
				if yyq2475[1] {
					yym2480 := z.EncBinary()
					_ = yym2480
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2475[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2481 := z.EncBinary()
					_ = yym2481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2475 || yy2arr2475 {
				if yyq2475[2] {
					yy2483 := &x.ObjectMeta
					yy2483.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2475[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2484 := &x.ObjectMeta
					yy2484.CodecEncodeSelf(e)
				}
			}
			if yyr2475 || yy2arr2475 {
				if yyq2475[3] {
					yy2486 := &x.Spec
					yy2486.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2475[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2487 := &x.Spec
					yy2487.CodecEncodeSelf(e)
				}
			}
			if yyr2475 || yy2arr2475 {
				if yyq2475[4] {
					yy2489 := &x.Status
					yy2489.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2475[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2490 := &x.Status
					yy2490.CodecEncodeSelf(e)
				}
			}
			if yysep2475 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2491 := z.DecBinary()
	_ = yym2491
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2492 := r.ReadMapStart()
			if yyl2492 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2492, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2492 := r.ReadArrayStart()
			if yyl2492 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2492, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2493Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2493Slc
	var yyhl2493 bool = l >= 0
	for yyj2493 := 0; ; yyj2493++ {
		if yyhl2493 {
			if yyj2493 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2493Slc = r.DecodeBytes(yys2493Slc, true, true)
		yys2493 := string(yys2493Slc)
		switch yys2493 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2496 := &x.ObjectMeta
				yyv2496.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2497 := &x.Spec
				yyv2497.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2498 := &x.Status
				yyv2498.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2493)
		} // end switch yys2493
	} // end for yyj2493
	if !yyhl2493 {
		r.ReadEnd()
	}
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2499 int
	var yyb2499 bool
	var yyhl2499 bool = l >= 0
	yyj2499++
	if yyhl2499 {
		yyb2499 = yyj2499 > l
	} else {
		yyb2499 = r.CheckBreak()
	}
	if yyb2499 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2499++
	if yyhl2499 {
		yyb2499 = yyj2499 > l
	} else {
		yyb2499 = r.CheckBreak()
	}
	if yyb2499 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2499++
	if yyhl2499 {
		yyb2499 = yyj2499 > l
	} else {
		yyb2499 = r.CheckBreak()
	}
	if yyb2499 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2502 := &x.ObjectMeta
		yyv2502.CodecDecodeSelf(d)
	}
	yyj2499++
	if yyhl2499 {
		yyb2499 = yyj2499 > l
	} else {
		yyb2499 = r.CheckBreak()
	}
	if yyb2499 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2503 := &x.Spec
		yyv2503.CodecDecodeSelf(d)
	}
	yyj2499++
	if yyhl2499 {
		yyb2499 = yyj2499 > l
	} else {
		yyb2499 = r.CheckBreak()
	}
	if yyb2499 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2504 := &x.Status
		yyv2504.CodecDecodeSelf(d)
	}
	for {
		yyj2499++
		if yyhl2499 {
			yyb2499 = yyj2499 > l
		} else {
			yyb2499 = r.CheckBreak()
		}
		if yyb2499 {
			break
		}
		z.DecStructFieldNotFound(yyj2499-1, "")
	}
	r.ReadEnd()
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2505 := z.EncBinary()
		_ = yym2505
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2506 := !z.EncBinary()
			yy2arr2506 := z.EncBasicHandle().StructToArray
			var yyq2506 [4]bool
			_, _, _ = yysep2506, yyq2506, yy2arr2506
			const yyr2506 bool = false
			yyq2506[0] = x.Kind != ""
			yyq2506[1] = x.APIVersion != ""
			yyq2506[2] = true
			if yyr2506 || yy2arr2506 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2506 int = 1
				for _, b := range yyq2506 {
					if b {
						yynn2506++
					}
				}
				r.EncodeMapStart(yynn2506)
			}
			if yyr2506 || yy2arr2506 {
				if yyq2506[0] {
					yym2508 := z.EncBinary()
					_ = yym2508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2506[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2509 := z.EncBinary()
					_ = yym2509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2506 || yy2arr2506 {
				if yyq2506[1] {
					yym2511 := z.EncBinary()
					_ = yym2511
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2506[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2512 := z.EncBinary()
					_ = yym2512
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2506 || yy2arr2506 {
				if yyq2506[2] {
					yy2514 := &x.ListMeta
					yym2515 := z.EncBinary()
					_ = yym2515
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2514) {
					} else {
						z.EncFallback(yy2514)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2506[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2516 := &x.ListMeta
					yym2517 := z.EncBinary()
					_ = yym2517
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2516) {
					} else {
						z.EncFallback(yy2516)
					}
				}
			}
			if yyr2506 || yy2arr2506 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2519 := z.EncBinary()
					_ = yym2519
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2520 := z.EncBinary()
					_ = yym2520
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yysep2506 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2521 := z.DecBinary()
	_ = yym2521
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2522 := r.ReadMapStart()
			if yyl2522 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2522, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2522 := r.ReadArrayStart()
			if yyl2522 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2522, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2523Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2523Slc
	var yyhl2523 bool = l >= 0
	for yyj2523 := 0; ; yyj2523++ {
		if yyhl2523 {
			if yyj2523 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2523Slc = r.DecodeBytes(yys2523Slc, true, true)
		yys2523 := string(yys2523Slc)
		switch yys2523 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2526 := &x.ListMeta
				yym2527 := z.DecBinary()
				_ = yym2527
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2526) {
				} else {
					z.DecFallback(yyv2526, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2528 := &x.Items
				yym2529 := z.DecBinary()
				_ = yym2529
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2528), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2523)
		} // end switch yys2523
	} // end for yyj2523
	if !yyhl2523 {
		r.ReadEnd()
	}
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2530 int
	var yyb2530 bool
	var yyhl2530 bool = l >= 0
	yyj2530++
	if yyhl2530 {
		yyb2530 = yyj2530 > l
	} else {
		yyb2530 = r.CheckBreak()
	}
	if yyb2530 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2530++
	if yyhl2530 {
		yyb2530 = yyj2530 > l
	} else {
		yyb2530 = r.CheckBreak()
	}
	if yyb2530 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2530++
	if yyhl2530 {
		yyb2530 = yyj2530 > l
	} else {
		yyb2530 = r.CheckBreak()
	}
	if yyb2530 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2533 := &x.ListMeta
		yym2534 := z.DecBinary()
		_ = yym2534
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2533) {
		} else {
			z.DecFallback(yyv2533, false)
		}
	}
	yyj2530++
	if yyhl2530 {
		yyb2530 = yyj2530 > l
	} else {
		yyb2530 = r.CheckBreak()
	}
	if yyb2530 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2535 := &x.Items
		yym2536 := z.DecBinary()
		_ = yym2536
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2535), d)
		}
	}
	for {
		yyj2530++
		if yyhl2530 {
			yyb2530 = yyj2530 > l
		} else {
			yyb2530 = r.CheckBreak()
		}
		if yyb2530 {
			break
		}
		z.DecStructFieldNotFound(yyj2530-1, "")
	}
	r.ReadEnd()
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2537 := z.EncBinary()
		_ = yym2537
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2538 := !z.EncBinary()
			yy2arr2538 := z.EncBasicHandle().StructToArray
			var yyq2538 [4]bool
			_, _, _ = yysep2538, yyq2538, yy2arr2538
			const yyr2538 bool = false
			yyq2538[0] = x.Kind != ""
			yyq2538[1] = x.APIVersion != ""
			yyq2538[2] = true
			if yyr2538 || yy2arr2538 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2538 int = 1
				for _, b := range yyq2538 {
					if b {
						yynn2538++
					}
				}
				r.EncodeMapStart(yynn2538)
			}
			if yyr2538 || yy2arr2538 {
				if yyq2538[0] {
					yym2540 := z.EncBinary()
					_ = yym2540
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2538[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2541 := z.EncBinary()
					_ = yym2541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2538 || yy2arr2538 {
				if yyq2538[1] {
					yym2543 := z.EncBinary()
					_ = yym2543
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2538[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2544 := z.EncBinary()
					_ = yym2544
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2538 || yy2arr2538 {
				if yyq2538[2] {
					yy2546 := &x.ObjectMeta
					yy2546.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2538[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2547 := &x.ObjectMeta
					yy2547.CodecEncodeSelf(e)
				}
			}
			if yyr2538 || yy2arr2538 {
				yy2549 := &x.Target
				yy2549.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				yy2550 := &x.Target
				yy2550.CodecEncodeSelf(e)
			}
			if yysep2538 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2551 := z.DecBinary()
	_ = yym2551
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2552 := r.ReadMapStart()
			if yyl2552 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2552, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2552 := r.ReadArrayStart()
			if yyl2552 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2552, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2553Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2553Slc
	var yyhl2553 bool = l >= 0
	for yyj2553 := 0; ; yyj2553++ {
		if yyhl2553 {
			if yyj2553 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2553Slc = r.DecodeBytes(yys2553Slc, true, true)
		yys2553 := string(yys2553Slc)
		switch yys2553 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2556 := &x.ObjectMeta
				yyv2556.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2557 := &x.Target
				yyv2557.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2553)
		} // end switch yys2553
	} // end for yyj2553
	if !yyhl2553 {
		r.ReadEnd()
	}
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2558 int
	var yyb2558 bool
	var yyhl2558 bool = l >= 0
	yyj2558++
	if yyhl2558 {
		yyb2558 = yyj2558 > l
	} else {
		yyb2558 = r.CheckBreak()
	}
	if yyb2558 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2558++
	if yyhl2558 {
		yyb2558 = yyj2558 > l
	} else {
		yyb2558 = r.CheckBreak()
	}
	if yyb2558 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2558++
	if yyhl2558 {
		yyb2558 = yyj2558 > l
	} else {
		yyb2558 = r.CheckBreak()
	}
	if yyb2558 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2561 := &x.ObjectMeta
		yyv2561.CodecDecodeSelf(d)
	}
	yyj2558++
	if yyhl2558 {
		yyb2558 = yyj2558 > l
	} else {
		yyb2558 = r.CheckBreak()
	}
	if yyb2558 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2562 := &x.Target
		yyv2562.CodecDecodeSelf(d)
	}
	for {
		yyj2558++
		if yyhl2558 {
			yyb2558 = yyj2558 > l
		} else {
			yyb2558 = r.CheckBreak()
		}
		if yyb2558 {
			break
		}
		z.DecStructFieldNotFound(yyj2558-1, "")
	}
	r.ReadEnd()
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2563 := z.EncBinary()
		_ = yym2563
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2564 := !z.EncBinary()
			yy2arr2564 := z.EncBasicHandle().StructToArray
			var yyq2564 [3]bool
			_, _, _ = yysep2564, yyq2564, yy2arr2564
			const yyr2564 bool = false
			yyq2564[0] = x.Kind != ""
			yyq2564[1] = x.APIVersion != ""
			if yyr2564 || yy2arr2564 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2564 int = 1
				for _, b := range yyq2564 {
					if b {
						yynn2564++
					}
				}
				r.EncodeMapStart(yynn2564)
			}
			if yyr2564 || yy2arr2564 {
				if yyq2564[0] {
					yym2566 := z.EncBinary()
					_ = yym2566
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2564[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2567 := z.EncBinary()
					_ = yym2567
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2564 || yy2arr2564 {
				if yyq2564[1] {
					yym2569 := z.EncBinary()
					_ = yym2569
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2564[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2570 := z.EncBinary()
					_ = yym2570
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2564 || yy2arr2564 {
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2572 := *x.GracePeriodSeconds
					yym2573 := z.EncBinary()
					_ = yym2573
					if false {
					} else {
						r.EncodeInt(int64(yy2572))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2574 := *x.GracePeriodSeconds
					yym2575 := z.EncBinary()
					_ = yym2575
					if false {
					} else {
						r.EncodeInt(int64(yy2574))
					}
				}
			}
			if yysep2564 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2576 := z.DecBinary()
	_ = yym2576
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2577 := r.ReadMapStart()
			if yyl2577 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2577, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2577 := r.ReadArrayStart()
			if yyl2577 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2577, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2578Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2578Slc
	var yyhl2578 bool = l >= 0
	for yyj2578 := 0; ; yyj2578++ {
		if yyhl2578 {
			if yyj2578 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2578Slc = r.DecodeBytes(yys2578Slc, true, true)
		yys2578 := string(yys2578Slc)
		switch yys2578 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym2582 := z.DecBinary()
				_ = yym2582
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2578)
		} // end switch yys2578
	} // end for yyj2578
	if !yyhl2578 {
		r.ReadEnd()
	}
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2583 int
	var yyb2583 bool
	var yyhl2583 bool = l >= 0
	yyj2583++
	if yyhl2583 {
		yyb2583 = yyj2583 > l
	} else {
		yyb2583 = r.CheckBreak()
	}
	if yyb2583 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2583++
	if yyhl2583 {
		yyb2583 = yyj2583 > l
	} else {
		yyb2583 = r.CheckBreak()
	}
	if yyb2583 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2583++
	if yyhl2583 {
		yyb2583 = yyj2583 > l
	} else {
		yyb2583 = r.CheckBreak()
	}
	if yyb2583 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym2587 := z.DecBinary()
		_ = yym2587
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2583++
		if yyhl2583 {
			yyb2583 = yyj2583 > l
		} else {
			yyb2583 = r.CheckBreak()
		}
		if yyb2583 {
			break
		}
		z.DecStructFieldNotFound(yyj2583-1, "")
	}
	r.ReadEnd()
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2588 := z.EncBinary()
		_ = yym2588
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2589 := !z.EncBinary()
			yy2arr2589 := z.EncBasicHandle().StructToArray
			var yyq2589 [7]bool
			_, _, _ = yysep2589, yyq2589, yy2arr2589
			const yyr2589 bool = false
			yyq2589[0] = x.Kind != ""
			yyq2589[1] = x.APIVersion != ""
			yyq2589[2] = x.LabelSelector != ""
			yyq2589[3] = x.FieldSelector != ""
			yyq2589[4] = x.Watch != false
			yyq2589[5] = x.ResourceVersion != ""
			yyq2589[6] = x.TimeoutSeconds != nil
			if yyr2589 || yy2arr2589 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2589 int = 0
				for _, b := range yyq2589 {
					if b {
						yynn2589++
					}
				}
				r.EncodeMapStart(yynn2589)
			}
			if yyr2589 || yy2arr2589 {
				if yyq2589[0] {
					yym2591 := z.EncBinary()
					_ = yym2591
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2589[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2592 := z.EncBinary()
					_ = yym2592
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2589 || yy2arr2589 {
				if yyq2589[1] {
					yym2594 := z.EncBinary()
					_ = yym2594
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2589[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2595 := z.EncBinary()
					_ = yym2595
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2589 || yy2arr2589 {
				if yyq2589[2] {
					yym2597 := z.EncBinary()
					_ = yym2597
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2589[2] {
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					yym2598 := z.EncBinary()
					_ = yym2598
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr2589 || yy2arr2589 {
				if yyq2589[3] {
					yym2600 := z.EncBinary()
					_ = yym2600
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2589[3] {
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					yym2601 := z.EncBinary()
					_ = yym2601
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr2589 || yy2arr2589 {
				if yyq2589[4] {
					yym2603 := z.EncBinary()
					_ = yym2603
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2589[4] {
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					yym2604 := z.EncBinary()
					_ = yym2604
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr2589 || yy2arr2589 {
				if yyq2589[5] {
					yym2606 := z.EncBinary()
					_ = yym2606
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2589[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym2607 := z.EncBinary()
					_ = yym2607
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2589 || yy2arr2589 {
				if yyq2589[6] {
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy2609 := *x.TimeoutSeconds
						yym2610 := z.EncBinary()
						_ = yym2610
						if false {
						} else {
							r.EncodeInt(int64(yy2609))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2589[6] {
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy2611 := *x.TimeoutSeconds
						yym2612 := z.EncBinary()
						_ = yym2612
						if false {
						} else {
							r.EncodeInt(int64(yy2611))
						}
					}
				}
			}
			if yysep2589 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2613 := z.DecBinary()
	_ = yym2613
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2614 := r.ReadMapStart()
			if yyl2614 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2614, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2614 := r.ReadArrayStart()
			if yyl2614 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2614, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2615Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2615Slc
	var yyhl2615 bool = l >= 0
	for yyj2615 := 0; ; yyj2615++ {
		if yyhl2615 {
			if yyj2615 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2615Slc = r.DecodeBytes(yys2615Slc, true, true)
		yys2615 := string(yys2615Slc)
		switch yys2615 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym2623 := z.DecBinary()
				_ = yym2623
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2615)
		} // end switch yys2615
	} // end for yyj2615
	if !yyhl2615 {
		r.ReadEnd()
	}
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2624 int
	var yyb2624 bool
	var yyhl2624 bool = l >= 0
	yyj2624++
	if yyhl2624 {
		yyb2624 = yyj2624 > l
	} else {
		yyb2624 = r.CheckBreak()
	}
	if yyb2624 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2624++
	if yyhl2624 {
		yyb2624 = yyj2624 > l
	} else {
		yyb2624 = r.CheckBreak()
	}
	if yyb2624 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2624++
	if yyhl2624 {
		yyb2624 = yyj2624 > l
	} else {
		yyb2624 = r.CheckBreak()
	}
	if yyb2624 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj2624++
	if yyhl2624 {
		yyb2624 = yyj2624 > l
	} else {
		yyb2624 = r.CheckBreak()
	}
	if yyb2624 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj2624++
	if yyhl2624 {
		yyb2624 = yyj2624 > l
	} else {
		yyb2624 = r.CheckBreak()
	}
	if yyb2624 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj2624++
	if yyhl2624 {
		yyb2624 = yyj2624 > l
	} else {
		yyb2624 = r.CheckBreak()
	}
	if yyb2624 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2624++
	if yyhl2624 {
		yyb2624 = yyj2624 > l
	} else {
		yyb2624 = r.CheckBreak()
	}
	if yyb2624 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym2632 := z.DecBinary()
		_ = yym2632
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2624++
		if yyhl2624 {
			yyb2624 = yyj2624 > l
		} else {
			yyb2624 = r.CheckBreak()
		}
		if yyb2624 {
			break
		}
		z.DecStructFieldNotFound(yyj2624-1, "")
	}
	r.ReadEnd()
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2633 := z.EncBinary()
		_ = yym2633
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2634 := !z.EncBinary()
			yy2arr2634 := z.EncBasicHandle().StructToArray
			var yyq2634 [10]bool
			_, _, _ = yysep2634, yyq2634, yy2arr2634
			const yyr2634 bool = false
			yyq2634[0] = x.Kind != ""
			yyq2634[1] = x.APIVersion != ""
			yyq2634[2] = x.Container != ""
			yyq2634[3] = x.Follow != false
			yyq2634[4] = x.Previous != false
			yyq2634[5] = x.SinceSeconds != nil
			yyq2634[6] = x.SinceTime != nil
			yyq2634[7] = x.Timestamps != false
			yyq2634[8] = x.TailLines != nil
			yyq2634[9] = x.LimitBytes != nil
			if yyr2634 || yy2arr2634 {
				r.EncodeArrayStart(10)
			} else {
				var yynn2634 int = 0
				for _, b := range yyq2634 {
					if b {
						yynn2634++
					}
				}
				r.EncodeMapStart(yynn2634)
			}
			if yyr2634 || yy2arr2634 {
				if yyq2634[0] {
					yym2636 := z.EncBinary()
					_ = yym2636
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2634[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2637 := z.EncBinary()
					_ = yym2637
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2634 || yy2arr2634 {
				if yyq2634[1] {
					yym2639 := z.EncBinary()
					_ = yym2639
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2634[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2640 := z.EncBinary()
					_ = yym2640
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2634 || yy2arr2634 {
				if yyq2634[2] {
					yym2642 := z.EncBinary()
					_ = yym2642
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2634[2] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2643 := z.EncBinary()
					_ = yym2643
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2634 || yy2arr2634 {
				if yyq2634[3] {
					yym2645 := z.EncBinary()
					_ = yym2645
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2634[3] {
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					yym2646 := z.EncBinary()
					_ = yym2646
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr2634 || yy2arr2634 {
				if yyq2634[4] {
					yym2648 := z.EncBinary()
					_ = yym2648
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2634[4] {
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					yym2649 := z.EncBinary()
					_ = yym2649
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yyr2634 || yy2arr2634 {
				if yyq2634[5] {
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy2651 := *x.SinceSeconds
						yym2652 := z.EncBinary()
						_ = yym2652
						if false {
						} else {
							r.EncodeInt(int64(yy2651))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2634[5] {
					r.EncodeString(codecSelferC_UTF81234, string("sinceSeconds"))
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy2653 := *x.SinceSeconds
						yym2654 := z.EncBinary()
						_ = yym2654
						if false {
						} else {
							r.EncodeInt(int64(yy2653))
						}
					}
				}
			}
			if yyr2634 || yy2arr2634 {
				if yyq2634[6] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym2656 := z.EncBinary()
						_ = yym2656
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym2656 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym2656 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2634[6] {
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym2657 := z.EncBinary()
						_ = yym2657
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym2657 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym2657 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr2634 || yy2arr2634 {
				if yyq2634[7] {
					yym2659 := z.EncBinary()
					_ = yym2659
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2634[7] {
					r.EncodeString(codecSelferC_UTF81234, string("timestamps"))
					yym2660 := z.EncBinary()
					_ = yym2660
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				}
			}
			if yyr2634 || yy2arr2634 {
				if yyq2634[8] {
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy2662 := *x.TailLines
						yym2663 := z.EncBinary()
						_ = yym2663
						if false {
						} else {
							r.EncodeInt(int64(yy2662))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2634[8] {
					r.EncodeString(codecSelferC_UTF81234, string("tailLines"))
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy2664 := *x.TailLines
						yym2665 := z.EncBinary()
						_ = yym2665
						if false {
						} else {
							r.EncodeInt(int64(yy2664))
						}
					}
				}
			}
			if yyr2634 || yy2arr2634 {
				if yyq2634[9] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy2667 := *x.LimitBytes
						yym2668 := z.EncBinary()
						_ = yym2668
						if false {
						} else {
							r.EncodeInt(int64(yy2667))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2634[9] {
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy2669 := *x.LimitBytes
						yym2670 := z.EncBinary()
						_ = yym2670
						if false {
						} else {
							r.EncodeInt(int64(yy2669))
						}
					}
				}
			}
			if yysep2634 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2671 := z.DecBinary()
	_ = yym2671
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2672 := r.ReadMapStart()
			if yyl2672 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2672, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2672 := r.ReadArrayStart()
			if yyl2672 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2672, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2673Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2673Slc
	var yyhl2673 bool = l >= 0
	for yyj2673 := 0; ; yyj2673++ {
		if yyhl2673 {
			if yyj2673 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2673Slc = r.DecodeBytes(yys2673Slc, true, true)
		yys2673 := string(yys2673Slc)
		switch yys2673 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "sinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym2680 := z.DecBinary()
				_ = yym2680
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym2682 := z.DecBinary()
				_ = yym2682
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym2682 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym2682 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "tailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym2685 := z.DecBinary()
				_ = yym2685
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym2687 := z.DecBinary()
				_ = yym2687
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2673)
		} // end switch yys2673
	} // end for yyj2673
	if !yyhl2673 {
		r.ReadEnd()
	}
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2688 int
	var yyb2688 bool
	var yyhl2688 bool = l >= 0
	yyj2688++
	if yyhl2688 {
		yyb2688 = yyj2688 > l
	} else {
		yyb2688 = r.CheckBreak()
	}
	if yyb2688 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2688++
	if yyhl2688 {
		yyb2688 = yyj2688 > l
	} else {
		yyb2688 = r.CheckBreak()
	}
	if yyb2688 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2688++
	if yyhl2688 {
		yyb2688 = yyj2688 > l
	} else {
		yyb2688 = r.CheckBreak()
	}
	if yyb2688 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2688++
	if yyhl2688 {
		yyb2688 = yyj2688 > l
	} else {
		yyb2688 = r.CheckBreak()
	}
	if yyb2688 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj2688++
	if yyhl2688 {
		yyb2688 = yyj2688 > l
	} else {
		yyb2688 = r.CheckBreak()
	}
	if yyb2688 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj2688++
	if yyhl2688 {
		yyb2688 = yyj2688 > l
	} else {
		yyb2688 = r.CheckBreak()
	}
	if yyb2688 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym2695 := z.DecBinary()
		_ = yym2695
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2688++
	if yyhl2688 {
		yyb2688 = yyj2688 > l
	} else {
		yyb2688 = r.CheckBreak()
	}
	if yyb2688 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym2697 := z.DecBinary()
		_ = yym2697
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym2697 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym2697 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj2688++
	if yyhl2688 {
		yyb2688 = yyj2688 > l
	} else {
		yyb2688 = r.CheckBreak()
	}
	if yyb2688 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj2688++
	if yyhl2688 {
		yyb2688 = yyj2688 > l
	} else {
		yyb2688 = r.CheckBreak()
	}
	if yyb2688 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym2700 := z.DecBinary()
		_ = yym2700
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj2688++
	if yyhl2688 {
		yyb2688 = yyj2688 > l
	} else {
		yyb2688 = r.CheckBreak()
	}
	if yyb2688 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym2702 := z.DecBinary()
		_ = yym2702
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2688++
		if yyhl2688 {
			yyb2688 = yyj2688 > l
		} else {
			yyb2688 = r.CheckBreak()
		}
		if yyb2688 {
			break
		}
		z.DecStructFieldNotFound(yyj2688-1, "")
	}
	r.ReadEnd()
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2703 := z.EncBinary()
		_ = yym2703
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2704 := !z.EncBinary()
			yy2arr2704 := z.EncBasicHandle().StructToArray
			var yyq2704 [7]bool
			_, _, _ = yysep2704, yyq2704, yy2arr2704
			const yyr2704 bool = false
			yyq2704[0] = x.Kind != ""
			yyq2704[1] = x.APIVersion != ""
			yyq2704[2] = x.Stdin != false
			yyq2704[3] = x.Stdout != false
			yyq2704[4] = x.Stderr != false
			yyq2704[5] = x.TTY != false
			yyq2704[6] = x.Container != ""
			if yyr2704 || yy2arr2704 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2704 int = 0
				for _, b := range yyq2704 {
					if b {
						yynn2704++
					}
				}
				r.EncodeMapStart(yynn2704)
			}
			if yyr2704 || yy2arr2704 {
				if yyq2704[0] {
					yym2706 := z.EncBinary()
					_ = yym2706
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2704[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2707 := z.EncBinary()
					_ = yym2707
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2704 || yy2arr2704 {
				if yyq2704[1] {
					yym2709 := z.EncBinary()
					_ = yym2709
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2704[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2710 := z.EncBinary()
					_ = yym2710
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2704 || yy2arr2704 {
				if yyq2704[2] {
					yym2712 := z.EncBinary()
					_ = yym2712
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2704[2] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym2713 := z.EncBinary()
					_ = yym2713
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2704 || yy2arr2704 {
				if yyq2704[3] {
					yym2715 := z.EncBinary()
					_ = yym2715
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2704[3] {
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					yym2716 := z.EncBinary()
					_ = yym2716
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2704 || yy2arr2704 {
				if yyq2704[4] {
					yym2718 := z.EncBinary()
					_ = yym2718
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2704[4] {
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					yym2719 := z.EncBinary()
					_ = yym2719
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2704 || yy2arr2704 {
				if yyq2704[5] {
					yym2721 := z.EncBinary()
					_ = yym2721
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2704[5] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym2722 := z.EncBinary()
					_ = yym2722
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2704 || yy2arr2704 {
				if yyq2704[6] {
					yym2724 := z.EncBinary()
					_ = yym2724
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2704[6] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2725 := z.EncBinary()
					_ = yym2725
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yysep2704 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2726 := z.DecBinary()
	_ = yym2726
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2727 := r.ReadMapStart()
			if yyl2727 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2727, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2727 := r.ReadArrayStart()
			if yyl2727 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2727, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2728Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2728Slc
	var yyhl2728 bool = l >= 0
	for yyj2728 := 0; ; yyj2728++ {
		if yyhl2728 {
			if yyj2728 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2728Slc = r.DecodeBytes(yys2728Slc, true, true)
		yys2728 := string(yys2728Slc)
		switch yys2728 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2728)
		} // end switch yys2728
	} // end for yyj2728
	if !yyhl2728 {
		r.ReadEnd()
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2736 int
	var yyb2736 bool
	var yyhl2736 bool = l >= 0
	yyj2736++
	if yyhl2736 {
		yyb2736 = yyj2736 > l
	} else {
		yyb2736 = r.CheckBreak()
	}
	if yyb2736 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2736++
	if yyhl2736 {
		yyb2736 = yyj2736 > l
	} else {
		yyb2736 = r.CheckBreak()
	}
	if yyb2736 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2736++
	if yyhl2736 {
		yyb2736 = yyj2736 > l
	} else {
		yyb2736 = r.CheckBreak()
	}
	if yyb2736 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2736++
	if yyhl2736 {
		yyb2736 = yyj2736 > l
	} else {
		yyb2736 = r.CheckBreak()
	}
	if yyb2736 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2736++
	if yyhl2736 {
		yyb2736 = yyj2736 > l
	} else {
		yyb2736 = r.CheckBreak()
	}
	if yyb2736 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2736++
	if yyhl2736 {
		yyb2736 = yyj2736 > l
	} else {
		yyb2736 = r.CheckBreak()
	}
	if yyb2736 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2736++
	if yyhl2736 {
		yyb2736 = yyj2736 > l
	} else {
		yyb2736 = r.CheckBreak()
	}
	if yyb2736 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj2736++
		if yyhl2736 {
			yyb2736 = yyj2736 > l
		} else {
			yyb2736 = r.CheckBreak()
		}
		if yyb2736 {
			break
		}
		z.DecStructFieldNotFound(yyj2736-1, "")
	}
	r.ReadEnd()
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2744 := z.EncBinary()
		_ = yym2744
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2745 := !z.EncBinary()
			yy2arr2745 := z.EncBasicHandle().StructToArray
			var yyq2745 [8]bool
			_, _, _ = yysep2745, yyq2745, yy2arr2745
			const yyr2745 bool = false
			yyq2745[0] = x.Kind != ""
			yyq2745[1] = x.APIVersion != ""
			yyq2745[2] = x.Stdin != false
			yyq2745[3] = x.Stdout != false
			yyq2745[4] = x.Stderr != false
			yyq2745[5] = x.TTY != false
			yyq2745[6] = x.Container != ""
			if yyr2745 || yy2arr2745 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2745 int = 1
				for _, b := range yyq2745 {
					if b {
						yynn2745++
					}
				}
				r.EncodeMapStart(yynn2745)
			}
			if yyr2745 || yy2arr2745 {
				if yyq2745[0] {
					yym2747 := z.EncBinary()
					_ = yym2747
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2745[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2748 := z.EncBinary()
					_ = yym2748
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2745 || yy2arr2745 {
				if yyq2745[1] {
					yym2750 := z.EncBinary()
					_ = yym2750
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2745[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2751 := z.EncBinary()
					_ = yym2751
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2745 || yy2arr2745 {
				if yyq2745[2] {
					yym2753 := z.EncBinary()
					_ = yym2753
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2745[2] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym2754 := z.EncBinary()
					_ = yym2754
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2745 || yy2arr2745 {
				if yyq2745[3] {
					yym2756 := z.EncBinary()
					_ = yym2756
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2745[3] {
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					yym2757 := z.EncBinary()
					_ = yym2757
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2745 || yy2arr2745 {
				if yyq2745[4] {
					yym2759 := z.EncBinary()
					_ = yym2759
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2745[4] {
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					yym2760 := z.EncBinary()
					_ = yym2760
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2745 || yy2arr2745 {
				if yyq2745[5] {
					yym2762 := z.EncBinary()
					_ = yym2762
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2745[5] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym2763 := z.EncBinary()
					_ = yym2763
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2745 || yy2arr2745 {
				if yyq2745[6] {
					yym2765 := z.EncBinary()
					_ = yym2765
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2745[6] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2766 := z.EncBinary()
					_ = yym2766
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2745 || yy2arr2745 {
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2768 := z.EncBinary()
					_ = yym2768
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2769 := z.EncBinary()
					_ = yym2769
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yysep2745 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2770 := z.DecBinary()
	_ = yym2770
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2771 := r.ReadMapStart()
			if yyl2771 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2771, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2771 := r.ReadArrayStart()
			if yyl2771 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2771, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2772Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2772Slc
	var yyhl2772 bool = l >= 0
	for yyj2772 := 0; ; yyj2772++ {
		if yyhl2772 {
			if yyj2772 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2772Slc = r.DecodeBytes(yys2772Slc, true, true)
		yys2772 := string(yys2772Slc)
		switch yys2772 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv2780 := &x.Command
				yym2781 := z.DecBinary()
				_ = yym2781
				if false {
				} else {
					z.F.DecSliceStringX(yyv2780, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2772)
		} // end switch yys2772
	} // end for yyj2772
	if !yyhl2772 {
		r.ReadEnd()
	}
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2782 int
	var yyb2782 bool
	var yyhl2782 bool = l >= 0
	yyj2782++
	if yyhl2782 {
		yyb2782 = yyj2782 > l
	} else {
		yyb2782 = r.CheckBreak()
	}
	if yyb2782 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2782++
	if yyhl2782 {
		yyb2782 = yyj2782 > l
	} else {
		yyb2782 = r.CheckBreak()
	}
	if yyb2782 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2782++
	if yyhl2782 {
		yyb2782 = yyj2782 > l
	} else {
		yyb2782 = r.CheckBreak()
	}
	if yyb2782 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2782++
	if yyhl2782 {
		yyb2782 = yyj2782 > l
	} else {
		yyb2782 = r.CheckBreak()
	}
	if yyb2782 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2782++
	if yyhl2782 {
		yyb2782 = yyj2782 > l
	} else {
		yyb2782 = r.CheckBreak()
	}
	if yyb2782 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2782++
	if yyhl2782 {
		yyb2782 = yyj2782 > l
	} else {
		yyb2782 = r.CheckBreak()
	}
	if yyb2782 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2782++
	if yyhl2782 {
		yyb2782 = yyj2782 > l
	} else {
		yyb2782 = r.CheckBreak()
	}
	if yyb2782 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2782++
	if yyhl2782 {
		yyb2782 = yyj2782 > l
	} else {
		yyb2782 = r.CheckBreak()
	}
	if yyb2782 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv2790 := &x.Command
		yym2791 := z.DecBinary()
		_ = yym2791
		if false {
		} else {
			z.F.DecSliceStringX(yyv2790, false, d)
		}
	}
	for {
		yyj2782++
		if yyhl2782 {
			yyb2782 = yyj2782 > l
		} else {
			yyb2782 = r.CheckBreak()
		}
		if yyb2782 {
			break
		}
		z.DecStructFieldNotFound(yyj2782-1, "")
	}
	r.ReadEnd()
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2792 := z.EncBinary()
		_ = yym2792
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2793 := !z.EncBinary()
			yy2arr2793 := z.EncBasicHandle().StructToArray
			var yyq2793 [3]bool
			_, _, _ = yysep2793, yyq2793, yy2arr2793
			const yyr2793 bool = false
			yyq2793[0] = x.Kind != ""
			yyq2793[1] = x.APIVersion != ""
			yyq2793[2] = x.Path != ""
			if yyr2793 || yy2arr2793 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2793 int = 0
				for _, b := range yyq2793 {
					if b {
						yynn2793++
					}
				}
				r.EncodeMapStart(yynn2793)
			}
			if yyr2793 || yy2arr2793 {
				if yyq2793[0] {
					yym2795 := z.EncBinary()
					_ = yym2795
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2793[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2796 := z.EncBinary()
					_ = yym2796
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2793 || yy2arr2793 {
				if yyq2793[1] {
					yym2798 := z.EncBinary()
					_ = yym2798
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2793[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2799 := z.EncBinary()
					_ = yym2799
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2793 || yy2arr2793 {
				if yyq2793[2] {
					yym2801 := z.EncBinary()
					_ = yym2801
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2793[2] {
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					yym2802 := z.EncBinary()
					_ = yym2802
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yysep2793 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2803 := z.DecBinary()
	_ = yym2803
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2804 := r.ReadMapStart()
			if yyl2804 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2804, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2804 := r.ReadArrayStart()
			if yyl2804 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2804, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2805Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2805Slc
	var yyhl2805 bool = l >= 0
	for yyj2805 := 0; ; yyj2805++ {
		if yyhl2805 {
			if yyj2805 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2805Slc = r.DecodeBytes(yys2805Slc, true, true)
		yys2805 := string(yys2805Slc)
		switch yys2805 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2805)
		} // end switch yys2805
	} // end for yyj2805
	if !yyhl2805 {
		r.ReadEnd()
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2809 int
	var yyb2809 bool
	var yyhl2809 bool = l >= 0
	yyj2809++
	if yyhl2809 {
		yyb2809 = yyj2809 > l
	} else {
		yyb2809 = r.CheckBreak()
	}
	if yyb2809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2809++
	if yyhl2809 {
		yyb2809 = yyj2809 > l
	} else {
		yyb2809 = r.CheckBreak()
	}
	if yyb2809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2809++
	if yyhl2809 {
		yyb2809 = yyj2809 > l
	} else {
		yyb2809 = r.CheckBreak()
	}
	if yyb2809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj2809++
		if yyhl2809 {
			yyb2809 = yyj2809 > l
		} else {
			yyb2809 = r.CheckBreak()
		}
		if yyb2809 {
			break
		}
		z.DecStructFieldNotFound(yyj2809-1, "")
	}
	r.ReadEnd()
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2813 := z.EncBinary()
		_ = yym2813
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2814 := !z.EncBinary()
			yy2arr2814 := z.EncBasicHandle().StructToArray
			var yyq2814 [7]bool
			_, _, _ = yysep2814, yyq2814, yy2arr2814
			const yyr2814 bool = false
			yyq2814[0] = x.Kind != ""
			yyq2814[1] = x.Namespace != ""
			yyq2814[2] = x.Name != ""
			yyq2814[3] = x.UID != ""
			yyq2814[4] = x.APIVersion != ""
			yyq2814[5] = x.ResourceVersion != ""
			yyq2814[6] = x.FieldPath != ""
			if yyr2814 || yy2arr2814 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2814 int = 0
				for _, b := range yyq2814 {
					if b {
						yynn2814++
					}
				}
				r.EncodeMapStart(yynn2814)
			}
			if yyr2814 || yy2arr2814 {
				if yyq2814[0] {
					yym2816 := z.EncBinary()
					_ = yym2816
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2814[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2817 := z.EncBinary()
					_ = yym2817
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2814 || yy2arr2814 {
				if yyq2814[1] {
					yym2819 := z.EncBinary()
					_ = yym2819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2814[1] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym2820 := z.EncBinary()
					_ = yym2820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2814 || yy2arr2814 {
				if yyq2814[2] {
					yym2822 := z.EncBinary()
					_ = yym2822
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2814[2] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym2823 := z.EncBinary()
					_ = yym2823
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2814 || yy2arr2814 {
				if yyq2814[3] {
					yym2825 := z.EncBinary()
					_ = yym2825
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2814[3] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym2826 := z.EncBinary()
					_ = yym2826
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2814 || yy2arr2814 {
				if yyq2814[4] {
					yym2828 := z.EncBinary()
					_ = yym2828
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2814[4] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2829 := z.EncBinary()
					_ = yym2829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2814 || yy2arr2814 {
				if yyq2814[5] {
					yym2831 := z.EncBinary()
					_ = yym2831
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2814[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym2832 := z.EncBinary()
					_ = yym2832
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2814 || yy2arr2814 {
				if yyq2814[6] {
					yym2834 := z.EncBinary()
					_ = yym2834
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2814[6] {
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					yym2835 := z.EncBinary()
					_ = yym2835
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yysep2814 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2836 := z.DecBinary()
	_ = yym2836
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2837 := r.ReadMapStart()
			if yyl2837 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2837, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2837 := r.ReadArrayStart()
			if yyl2837 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2837, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2838Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2838Slc
	var yyhl2838 bool = l >= 0
	for yyj2838 := 0; ; yyj2838++ {
		if yyhl2838 {
			if yyj2838 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2838Slc = r.DecodeBytes(yys2838Slc, true, true)
		yys2838 := string(yys2838Slc)
		switch yys2838 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2838)
		} // end switch yys2838
	} // end for yyj2838
	if !yyhl2838 {
		r.ReadEnd()
	}
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2846 int
	var yyb2846 bool
	var yyhl2846 bool = l >= 0
	yyj2846++
	if yyhl2846 {
		yyb2846 = yyj2846 > l
	} else {
		yyb2846 = r.CheckBreak()
	}
	if yyb2846 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2846++
	if yyhl2846 {
		yyb2846 = yyj2846 > l
	} else {
		yyb2846 = r.CheckBreak()
	}
	if yyb2846 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj2846++
	if yyhl2846 {
		yyb2846 = yyj2846 > l
	} else {
		yyb2846 = r.CheckBreak()
	}
	if yyb2846 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2846++
	if yyhl2846 {
		yyb2846 = yyj2846 > l
	} else {
		yyb2846 = r.CheckBreak()
	}
	if yyb2846 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj2846++
	if yyhl2846 {
		yyb2846 = yyj2846 > l
	} else {
		yyb2846 = r.CheckBreak()
	}
	if yyb2846 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2846++
	if yyhl2846 {
		yyb2846 = yyj2846 > l
	} else {
		yyb2846 = r.CheckBreak()
	}
	if yyb2846 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2846++
	if yyhl2846 {
		yyb2846 = yyj2846 > l
	} else {
		yyb2846 = r.CheckBreak()
	}
	if yyb2846 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj2846++
		if yyhl2846 {
			yyb2846 = yyj2846 > l
		} else {
			yyb2846 = r.CheckBreak()
		}
		if yyb2846 {
			break
		}
		z.DecStructFieldNotFound(yyj2846-1, "")
	}
	r.ReadEnd()
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2854 := z.EncBinary()
		_ = yym2854
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2855 := !z.EncBinary()
			yy2arr2855 := z.EncBasicHandle().StructToArray
			var yyq2855 [1]bool
			_, _, _ = yysep2855, yyq2855, yy2arr2855
			const yyr2855 bool = false
			yyq2855[0] = x.Name != ""
			if yyr2855 || yy2arr2855 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2855 int = 0
				for _, b := range yyq2855 {
					if b {
						yynn2855++
					}
				}
				r.EncodeMapStart(yynn2855)
			}
			if yyr2855 || yy2arr2855 {
				if yyq2855[0] {
					yym2857 := z.EncBinary()
					_ = yym2857
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2855[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym2858 := z.EncBinary()
					_ = yym2858
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yysep2855 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2859 := z.DecBinary()
	_ = yym2859
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2860 := r.ReadMapStart()
			if yyl2860 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2860, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2860 := r.ReadArrayStart()
			if yyl2860 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2860, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2861Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2861Slc
	var yyhl2861 bool = l >= 0
	for yyj2861 := 0; ; yyj2861++ {
		if yyhl2861 {
			if yyj2861 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2861Slc = r.DecodeBytes(yys2861Slc, true, true)
		yys2861 := string(yys2861Slc)
		switch yys2861 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2861)
		} // end switch yys2861
	} // end for yyj2861
	if !yyhl2861 {
		r.ReadEnd()
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2863 int
	var yyb2863 bool
	var yyhl2863 bool = l >= 0
	yyj2863++
	if yyhl2863 {
		yyb2863 = yyj2863 > l
	} else {
		yyb2863 = r.CheckBreak()
	}
	if yyb2863 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj2863++
		if yyhl2863 {
			yyb2863 = yyj2863 > l
		} else {
			yyb2863 = r.CheckBreak()
		}
		if yyb2863 {
			break
		}
		z.DecStructFieldNotFound(yyj2863-1, "")
	}
	r.ReadEnd()
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2865 := z.EncBinary()
		_ = yym2865
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2866 := !z.EncBinary()
			yy2arr2866 := z.EncBasicHandle().StructToArray
			var yyq2866 [3]bool
			_, _, _ = yysep2866, yyq2866, yy2arr2866
			const yyr2866 bool = false
			yyq2866[0] = x.Kind != ""
			yyq2866[1] = x.APIVersion != ""
			yyq2866[2] = true
			if yyr2866 || yy2arr2866 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2866 int = 0
				for _, b := range yyq2866 {
					if b {
						yynn2866++
					}
				}
				r.EncodeMapStart(yynn2866)
			}
			if yyr2866 || yy2arr2866 {
				if yyq2866[0] {
					yym2868 := z.EncBinary()
					_ = yym2868
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2866[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2869 := z.EncBinary()
					_ = yym2869
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2866 || yy2arr2866 {
				if yyq2866[1] {
					yym2871 := z.EncBinary()
					_ = yym2871
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2866[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2872 := z.EncBinary()
					_ = yym2872
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2866 || yy2arr2866 {
				if yyq2866[2] {
					yy2874 := &x.Reference
					yy2874.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2866[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					yy2875 := &x.Reference
					yy2875.CodecEncodeSelf(e)
				}
			}
			if yysep2866 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2876 := z.DecBinary()
	_ = yym2876
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2877 := r.ReadMapStart()
			if yyl2877 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2877, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2877 := r.ReadArrayStart()
			if yyl2877 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2877, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2878Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2878Slc
	var yyhl2878 bool = l >= 0
	for yyj2878 := 0; ; yyj2878++ {
		if yyhl2878 {
			if yyj2878 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2878Slc = r.DecodeBytes(yys2878Slc, true, true)
		yys2878 := string(yys2878Slc)
		switch yys2878 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv2881 := &x.Reference
				yyv2881.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2878)
		} // end switch yys2878
	} // end for yyj2878
	if !yyhl2878 {
		r.ReadEnd()
	}
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2882 int
	var yyb2882 bool
	var yyhl2882 bool = l >= 0
	yyj2882++
	if yyhl2882 {
		yyb2882 = yyj2882 > l
	} else {
		yyb2882 = r.CheckBreak()
	}
	if yyb2882 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2882++
	if yyhl2882 {
		yyb2882 = yyj2882 > l
	} else {
		yyb2882 = r.CheckBreak()
	}
	if yyb2882 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2882++
	if yyhl2882 {
		yyb2882 = yyj2882 > l
	} else {
		yyb2882 = r.CheckBreak()
	}
	if yyb2882 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv2885 := &x.Reference
		yyv2885.CodecDecodeSelf(d)
	}
	for {
		yyj2882++
		if yyhl2882 {
			yyb2882 = yyj2882 > l
		} else {
			yyb2882 = r.CheckBreak()
		}
		if yyb2882 {
			break
		}
		z.DecStructFieldNotFound(yyj2882-1, "")
	}
	r.ReadEnd()
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2886 := z.EncBinary()
		_ = yym2886
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2887 := !z.EncBinary()
			yy2arr2887 := z.EncBasicHandle().StructToArray
			var yyq2887 [2]bool
			_, _, _ = yysep2887, yyq2887, yy2arr2887
			const yyr2887 bool = false
			yyq2887[0] = x.Component != ""
			yyq2887[1] = x.Host != ""
			if yyr2887 || yy2arr2887 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2887 int = 0
				for _, b := range yyq2887 {
					if b {
						yynn2887++
					}
				}
				r.EncodeMapStart(yynn2887)
			}
			if yyr2887 || yy2arr2887 {
				if yyq2887[0] {
					yym2889 := z.EncBinary()
					_ = yym2889
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2887[0] {
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					yym2890 := z.EncBinary()
					_ = yym2890
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr2887 || yy2arr2887 {
				if yyq2887[1] {
					yym2892 := z.EncBinary()
					_ = yym2892
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2887[1] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym2893 := z.EncBinary()
					_ = yym2893
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yysep2887 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2894 := z.DecBinary()
	_ = yym2894
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2895 := r.ReadMapStart()
			if yyl2895 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2895, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2895 := r.ReadArrayStart()
			if yyl2895 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2895, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2896Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2896Slc
	var yyhl2896 bool = l >= 0
	for yyj2896 := 0; ; yyj2896++ {
		if yyhl2896 {
			if yyj2896 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2896Slc = r.DecodeBytes(yys2896Slc, true, true)
		yys2896 := string(yys2896Slc)
		switch yys2896 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2896)
		} // end switch yys2896
	} // end for yyj2896
	if !yyhl2896 {
		r.ReadEnd()
	}
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2899 int
	var yyb2899 bool
	var yyhl2899 bool = l >= 0
	yyj2899++
	if yyhl2899 {
		yyb2899 = yyj2899 > l
	} else {
		yyb2899 = r.CheckBreak()
	}
	if yyb2899 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj2899++
	if yyhl2899 {
		yyb2899 = yyj2899 > l
	} else {
		yyb2899 = r.CheckBreak()
	}
	if yyb2899 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj2899++
		if yyhl2899 {
			yyb2899 = yyj2899 > l
		} else {
			yyb2899 = r.CheckBreak()
		}
		if yyb2899 {
			break
		}
		z.DecStructFieldNotFound(yyj2899-1, "")
	}
	r.ReadEnd()
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2902 := z.EncBinary()
		_ = yym2902
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2903 := !z.EncBinary()
			yy2arr2903 := z.EncBasicHandle().StructToArray
			var yyq2903 [10]bool
			_, _, _ = yysep2903, yyq2903, yy2arr2903
			const yyr2903 bool = false
			yyq2903[0] = x.Kind != ""
			yyq2903[1] = x.APIVersion != ""
			yyq2903[4] = x.Reason != ""
			yyq2903[5] = x.Message != ""
			yyq2903[6] = true
			yyq2903[7] = true
			yyq2903[8] = true
			yyq2903[9] = x.Count != 0
			if yyr2903 || yy2arr2903 {
				r.EncodeArrayStart(10)
			} else {
				var yynn2903 int = 2
				for _, b := range yyq2903 {
					if b {
						yynn2903++
					}
				}
				r.EncodeMapStart(yynn2903)
			}
			if yyr2903 || yy2arr2903 {
				if yyq2903[0] {
					yym2905 := z.EncBinary()
					_ = yym2905
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2903[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2906 := z.EncBinary()
					_ = yym2906
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2903 || yy2arr2903 {
				if yyq2903[1] {
					yym2908 := z.EncBinary()
					_ = yym2908
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2903[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2909 := z.EncBinary()
					_ = yym2909
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2903 || yy2arr2903 {
				yy2911 := &x.ObjectMeta
				yy2911.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				yy2912 := &x.ObjectMeta
				yy2912.CodecEncodeSelf(e)
			}
			if yyr2903 || yy2arr2903 {
				yy2914 := &x.InvolvedObject
				yy2914.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				yy2915 := &x.InvolvedObject
				yy2915.CodecEncodeSelf(e)
			}
			if yyr2903 || yy2arr2903 {
				if yyq2903[4] {
					yym2917 := z.EncBinary()
					_ = yym2917
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2903[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym2918 := z.EncBinary()
					_ = yym2918
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2903 || yy2arr2903 {
				if yyq2903[5] {
					yym2920 := z.EncBinary()
					_ = yym2920
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2903[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym2921 := z.EncBinary()
					_ = yym2921
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2903 || yy2arr2903 {
				if yyq2903[6] {
					yy2923 := &x.Source
					yy2923.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2903[6] {
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					yy2924 := &x.Source
					yy2924.CodecEncodeSelf(e)
				}
			}
			if yyr2903 || yy2arr2903 {
				if yyq2903[7] {
					yy2926 := &x.FirstTimestamp
					yym2927 := z.EncBinary()
					_ = yym2927
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2926) {
					} else if yym2927 {
						z.EncBinaryMarshal(yy2926)
					} else if !yym2927 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2926)
					} else {
						z.EncFallback(yy2926)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2903[7] {
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					yy2928 := &x.FirstTimestamp
					yym2929 := z.EncBinary()
					_ = yym2929
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2928) {
					} else if yym2929 {
						z.EncBinaryMarshal(yy2928)
					} else if !yym2929 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2928)
					} else {
						z.EncFallback(yy2928)
					}
				}
			}
			if yyr2903 || yy2arr2903 {
				if yyq2903[8] {
					yy2931 := &x.LastTimestamp
					yym2932 := z.EncBinary()
					_ = yym2932
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2931) {
					} else if yym2932 {
						z.EncBinaryMarshal(yy2931)
					} else if !yym2932 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2931)
					} else {
						z.EncFallback(yy2931)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2903[8] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					yy2933 := &x.LastTimestamp
					yym2934 := z.EncBinary()
					_ = yym2934
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2933) {
					} else if yym2934 {
						z.EncBinaryMarshal(yy2933)
					} else if !yym2934 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2933)
					} else {
						z.EncFallback(yy2933)
					}
				}
			}
			if yyr2903 || yy2arr2903 {
				if yyq2903[9] {
					yym2936 := z.EncBinary()
					_ = yym2936
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2903[9] {
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					yym2937 := z.EncBinary()
					_ = yym2937
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yysep2903 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2938 := z.DecBinary()
	_ = yym2938
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2939 := r.ReadMapStart()
			if yyl2939 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2939, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2939 := r.ReadArrayStart()
			if yyl2939 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2939, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2940Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2940Slc
	var yyhl2940 bool = l >= 0
	for yyj2940 := 0; ; yyj2940++ {
		if yyhl2940 {
			if yyj2940 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2940Slc = r.DecodeBytes(yys2940Slc, true, true)
		yys2940 := string(yys2940Slc)
		switch yys2940 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2943 := &x.ObjectMeta
				yyv2943.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv2944 := &x.InvolvedObject
				yyv2944.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv2947 := &x.Source
				yyv2947.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2948 := &x.FirstTimestamp
				yym2949 := z.DecBinary()
				_ = yym2949
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2948) {
				} else if yym2949 {
					z.DecBinaryUnmarshal(yyv2948)
				} else if !yym2949 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2948)
				} else {
					z.DecFallback(yyv2948, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2950 := &x.LastTimestamp
				yym2951 := z.DecBinary()
				_ = yym2951
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2950) {
				} else if yym2951 {
					z.DecBinaryUnmarshal(yyv2950)
				} else if !yym2951 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2950)
				} else {
					z.DecFallback(yyv2950, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2940)
		} // end switch yys2940
	} // end for yyj2940
	if !yyhl2940 {
		r.ReadEnd()
	}
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2953 int
	var yyb2953 bool
	var yyhl2953 bool = l >= 0
	yyj2953++
	if yyhl2953 {
		yyb2953 = yyj2953 > l
	} else {
		yyb2953 = r.CheckBreak()
	}
	if yyb2953 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2953++
	if yyhl2953 {
		yyb2953 = yyj2953 > l
	} else {
		yyb2953 = r.CheckBreak()
	}
	if yyb2953 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2953++
	if yyhl2953 {
		yyb2953 = yyj2953 > l
	} else {
		yyb2953 = r.CheckBreak()
	}
	if yyb2953 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2956 := &x.ObjectMeta
		yyv2956.CodecDecodeSelf(d)
	}
	yyj2953++
	if yyhl2953 {
		yyb2953 = yyj2953 > l
	} else {
		yyb2953 = r.CheckBreak()
	}
	if yyb2953 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv2957 := &x.InvolvedObject
		yyv2957.CodecDecodeSelf(d)
	}
	yyj2953++
	if yyhl2953 {
		yyb2953 = yyj2953 > l
	} else {
		yyb2953 = r.CheckBreak()
	}
	if yyb2953 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2953++
	if yyhl2953 {
		yyb2953 = yyj2953 > l
	} else {
		yyb2953 = r.CheckBreak()
	}
	if yyb2953 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2953++
	if yyhl2953 {
		yyb2953 = yyj2953 > l
	} else {
		yyb2953 = r.CheckBreak()
	}
	if yyb2953 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv2960 := &x.Source
		yyv2960.CodecDecodeSelf(d)
	}
	yyj2953++
	if yyhl2953 {
		yyb2953 = yyj2953 > l
	} else {
		yyb2953 = r.CheckBreak()
	}
	if yyb2953 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2961 := &x.FirstTimestamp
		yym2962 := z.DecBinary()
		_ = yym2962
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2961) {
		} else if yym2962 {
			z.DecBinaryUnmarshal(yyv2961)
		} else if !yym2962 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2961)
		} else {
			z.DecFallback(yyv2961, false)
		}
	}
	yyj2953++
	if yyhl2953 {
		yyb2953 = yyj2953 > l
	} else {
		yyb2953 = r.CheckBreak()
	}
	if yyb2953 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2963 := &x.LastTimestamp
		yym2964 := z.DecBinary()
		_ = yym2964
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2963) {
		} else if yym2964 {
			z.DecBinaryUnmarshal(yyv2963)
		} else if !yym2964 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2963)
		} else {
			z.DecFallback(yyv2963, false)
		}
	}
	yyj2953++
	if yyhl2953 {
		yyb2953 = yyj2953 > l
	} else {
		yyb2953 = r.CheckBreak()
	}
	if yyb2953 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2953++
		if yyhl2953 {
			yyb2953 = yyj2953 > l
		} else {
			yyb2953 = r.CheckBreak()
		}
		if yyb2953 {
			break
		}
		z.DecStructFieldNotFound(yyj2953-1, "")
	}
	r.ReadEnd()
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2966 := z.EncBinary()
		_ = yym2966
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2967 := !z.EncBinary()
			yy2arr2967 := z.EncBasicHandle().StructToArray
			var yyq2967 [4]bool
			_, _, _ = yysep2967, yyq2967, yy2arr2967
			const yyr2967 bool = false
			yyq2967[0] = x.Kind != ""
			yyq2967[1] = x.APIVersion != ""
			yyq2967[2] = true
			if yyr2967 || yy2arr2967 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2967 int = 1
				for _, b := range yyq2967 {
					if b {
						yynn2967++
					}
				}
				r.EncodeMapStart(yynn2967)
			}
			if yyr2967 || yy2arr2967 {
				if yyq2967[0] {
					yym2969 := z.EncBinary()
					_ = yym2969
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2967[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2970 := z.EncBinary()
					_ = yym2970
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2967 || yy2arr2967 {
				if yyq2967[1] {
					yym2972 := z.EncBinary()
					_ = yym2972
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2967[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2973 := z.EncBinary()
					_ = yym2973
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2967 || yy2arr2967 {
				if yyq2967[2] {
					yy2975 := &x.ListMeta
					yym2976 := z.EncBinary()
					_ = yym2976
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2975) {
					} else {
						z.EncFallback(yy2975)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2967[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2977 := &x.ListMeta
					yym2978 := z.EncBinary()
					_ = yym2978
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2977) {
					} else {
						z.EncFallback(yy2977)
					}
				}
			}
			if yyr2967 || yy2arr2967 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2980 := z.EncBinary()
					_ = yym2980
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2981 := z.EncBinary()
					_ = yym2981
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yysep2967 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2982 := z.DecBinary()
	_ = yym2982
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2983 := r.ReadMapStart()
			if yyl2983 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2983, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2983 := r.ReadArrayStart()
			if yyl2983 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2983, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2984Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2984Slc
	var yyhl2984 bool = l >= 0
	for yyj2984 := 0; ; yyj2984++ {
		if yyhl2984 {
			if yyj2984 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2984Slc = r.DecodeBytes(yys2984Slc, true, true)
		yys2984 := string(yys2984Slc)
		switch yys2984 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2987 := &x.ListMeta
				yym2988 := z.DecBinary()
				_ = yym2988
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2987) {
				} else {
					z.DecFallback(yyv2987, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2989 := &x.Items
				yym2990 := z.DecBinary()
				_ = yym2990
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv2989), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2984)
		} // end switch yys2984
	} // end for yyj2984
	if !yyhl2984 {
		r.ReadEnd()
	}
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2991 int
	var yyb2991 bool
	var yyhl2991 bool = l >= 0
	yyj2991++
	if yyhl2991 {
		yyb2991 = yyj2991 > l
	} else {
		yyb2991 = r.CheckBreak()
	}
	if yyb2991 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2991++
	if yyhl2991 {
		yyb2991 = yyj2991 > l
	} else {
		yyb2991 = r.CheckBreak()
	}
	if yyb2991 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2991++
	if yyhl2991 {
		yyb2991 = yyj2991 > l
	} else {
		yyb2991 = r.CheckBreak()
	}
	if yyb2991 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2994 := &x.ListMeta
		yym2995 := z.DecBinary()
		_ = yym2995
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2994) {
		} else {
			z.DecFallback(yyv2994, false)
		}
	}
	yyj2991++
	if yyhl2991 {
		yyb2991 = yyj2991 > l
	} else {
		yyb2991 = r.CheckBreak()
	}
	if yyb2991 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2996 := &x.Items
		yym2997 := z.DecBinary()
		_ = yym2997
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv2996), d)
		}
	}
	for {
		yyj2991++
		if yyhl2991 {
			yyb2991 = yyj2991 > l
		} else {
			yyb2991 = r.CheckBreak()
		}
		if yyb2991 {
			break
		}
		z.DecStructFieldNotFound(yyj2991-1, "")
	}
	r.ReadEnd()
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2998 := z.EncBinary()
		_ = yym2998
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2999 := !z.EncBinary()
			yy2arr2999 := z.EncBasicHandle().StructToArray
			var yyq2999 [4]bool
			_, _, _ = yysep2999, yyq2999, yy2arr2999
			const yyr2999 bool = false
			yyq2999[0] = x.Kind != ""
			yyq2999[1] = x.APIVersion != ""
			yyq2999[2] = true
			if yyr2999 || yy2arr2999 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2999 int = 1
				for _, b := range yyq2999 {
					if b {
						yynn2999++
					}
				}
				r.EncodeMapStart(yynn2999)
			}
			if yyr2999 || yy2arr2999 {
				if yyq2999[0] {
					yym3001 := z.EncBinary()
					_ = yym3001
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2999[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3002 := z.EncBinary()
					_ = yym3002
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2999 || yy2arr2999 {
				if yyq2999[1] {
					yym3004 := z.EncBinary()
					_ = yym3004
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2999[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3005 := z.EncBinary()
					_ = yym3005
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2999 || yy2arr2999 {
				if yyq2999[2] {
					yy3007 := &x.ListMeta
					yym3008 := z.EncBinary()
					_ = yym3008
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3007) {
					} else {
						z.EncFallback(yy3007)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2999[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3009 := &x.ListMeta
					yym3010 := z.EncBinary()
					_ = yym3010
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3009) {
					} else {
						z.EncFallback(yy3009)
					}
				}
			}
			if yyr2999 || yy2arr2999 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3012 := z.EncBinary()
					_ = yym3012
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg6_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3013 := z.EncBinary()
					_ = yym3013
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg6_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yysep2999 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3014 := z.DecBinary()
	_ = yym3014
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3015 := r.ReadMapStart()
			if yyl3015 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3015, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3015 := r.ReadArrayStart()
			if yyl3015 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3015, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3016Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3016Slc
	var yyhl3016 bool = l >= 0
	for yyj3016 := 0; ; yyj3016++ {
		if yyhl3016 {
			if yyj3016 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3016Slc = r.DecodeBytes(yys3016Slc, true, true)
		yys3016 := string(yys3016Slc)
		switch yys3016 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3019 := &x.ListMeta
				yym3020 := z.DecBinary()
				_ = yym3020
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3019) {
				} else {
					z.DecFallback(yyv3019, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3021 := &x.Items
				yym3022 := z.DecBinary()
				_ = yym3022
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg6_runtime.RawExtension)(yyv3021), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3016)
		} // end switch yys3016
	} // end for yyj3016
	if !yyhl3016 {
		r.ReadEnd()
	}
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3023 int
	var yyb3023 bool
	var yyhl3023 bool = l >= 0
	yyj3023++
	if yyhl3023 {
		yyb3023 = yyj3023 > l
	} else {
		yyb3023 = r.CheckBreak()
	}
	if yyb3023 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3023++
	if yyhl3023 {
		yyb3023 = yyj3023 > l
	} else {
		yyb3023 = r.CheckBreak()
	}
	if yyb3023 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3023++
	if yyhl3023 {
		yyb3023 = yyj3023 > l
	} else {
		yyb3023 = r.CheckBreak()
	}
	if yyb3023 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3026 := &x.ListMeta
		yym3027 := z.DecBinary()
		_ = yym3027
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3026) {
		} else {
			z.DecFallback(yyv3026, false)
		}
	}
	yyj3023++
	if yyhl3023 {
		yyb3023 = yyj3023 > l
	} else {
		yyb3023 = r.CheckBreak()
	}
	if yyb3023 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3028 := &x.Items
		yym3029 := z.DecBinary()
		_ = yym3029
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg6_runtime.RawExtension)(yyv3028), d)
		}
	}
	for {
		yyj3023++
		if yyhl3023 {
			yyb3023 = yyj3023 > l
		} else {
			yyb3023 = r.CheckBreak()
		}
		if yyb3023 {
			break
		}
		z.DecStructFieldNotFound(yyj3023-1, "")
	}
	r.ReadEnd()
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3030 := z.EncBinary()
	_ = yym3030
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3031 := z.DecBinary()
	_ = yym3031
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3032 := z.EncBinary()
		_ = yym3032
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3033 := !z.EncBinary()
			yy2arr3033 := z.EncBasicHandle().StructToArray
			var yyq3033 [6]bool
			_, _, _ = yysep3033, yyq3033, yy2arr3033
			const yyr3033 bool = false
			yyq3033[0] = x.Type != ""
			yyq3033[1] = len(x.Max) != 0
			yyq3033[2] = len(x.Min) != 0
			yyq3033[3] = len(x.Default) != 0
			yyq3033[4] = len(x.DefaultRequest) != 0
			yyq3033[5] = len(x.MaxLimitRequestRatio) != 0
			if yyr3033 || yy2arr3033 {
				r.EncodeArrayStart(6)
			} else {
				var yynn3033 int = 0
				for _, b := range yyq3033 {
					if b {
						yynn3033++
					}
				}
				r.EncodeMapStart(yynn3033)
			}
			if yyr3033 || yy2arr3033 {
				if yyq3033[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3033[0] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3033 || yy2arr3033 {
				if yyq3033[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3033[1] {
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3033 || yy2arr3033 {
				if yyq3033[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3033[2] {
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3033 || yy2arr3033 {
				if yyq3033[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3033[3] {
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3033 || yy2arr3033 {
				if yyq3033[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3033[4] {
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3033 || yy2arr3033 {
				if yyq3033[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3033[5] {
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3033 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3040 := z.DecBinary()
	_ = yym3040
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3041 := r.ReadMapStart()
			if yyl3041 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3041, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3041 := r.ReadArrayStart()
			if yyl3041 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3041, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3042Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3042Slc
	var yyhl3042 bool = l >= 0
	for yyj3042 := 0; ; yyj3042++ {
		if yyhl3042 {
			if yyj3042 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3042Slc = r.DecodeBytes(yys3042Slc, true, true)
		yys3042 := string(yys3042Slc)
		switch yys3042 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3044 := &x.Max
				yyv3044.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3045 := &x.Min
				yyv3045.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3046 := &x.Default
				yyv3046.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3047 := &x.DefaultRequest
				yyv3047.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3048 := &x.MaxLimitRequestRatio
				yyv3048.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3042)
		} // end switch yys3042
	} // end for yyj3042
	if !yyhl3042 {
		r.ReadEnd()
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3049 int
	var yyb3049 bool
	var yyhl3049 bool = l >= 0
	yyj3049++
	if yyhl3049 {
		yyb3049 = yyj3049 > l
	} else {
		yyb3049 = r.CheckBreak()
	}
	if yyb3049 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3049++
	if yyhl3049 {
		yyb3049 = yyj3049 > l
	} else {
		yyb3049 = r.CheckBreak()
	}
	if yyb3049 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3051 := &x.Max
		yyv3051.CodecDecodeSelf(d)
	}
	yyj3049++
	if yyhl3049 {
		yyb3049 = yyj3049 > l
	} else {
		yyb3049 = r.CheckBreak()
	}
	if yyb3049 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3052 := &x.Min
		yyv3052.CodecDecodeSelf(d)
	}
	yyj3049++
	if yyhl3049 {
		yyb3049 = yyj3049 > l
	} else {
		yyb3049 = r.CheckBreak()
	}
	if yyb3049 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3053 := &x.Default
		yyv3053.CodecDecodeSelf(d)
	}
	yyj3049++
	if yyhl3049 {
		yyb3049 = yyj3049 > l
	} else {
		yyb3049 = r.CheckBreak()
	}
	if yyb3049 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3054 := &x.DefaultRequest
		yyv3054.CodecDecodeSelf(d)
	}
	yyj3049++
	if yyhl3049 {
		yyb3049 = yyj3049 > l
	} else {
		yyb3049 = r.CheckBreak()
	}
	if yyb3049 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3055 := &x.MaxLimitRequestRatio
		yyv3055.CodecDecodeSelf(d)
	}
	for {
		yyj3049++
		if yyhl3049 {
			yyb3049 = yyj3049 > l
		} else {
			yyb3049 = r.CheckBreak()
		}
		if yyb3049 {
			break
		}
		z.DecStructFieldNotFound(yyj3049-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3056 := z.EncBinary()
		_ = yym3056
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3057 := !z.EncBinary()
			yy2arr3057 := z.EncBasicHandle().StructToArray
			var yyq3057 [1]bool
			_, _, _ = yysep3057, yyq3057, yy2arr3057
			const yyr3057 bool = false
			if yyr3057 || yy2arr3057 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3057 int = 1
				for _, b := range yyq3057 {
					if b {
						yynn3057++
					}
				}
				r.EncodeMapStart(yynn3057)
			}
			if yyr3057 || yy2arr3057 {
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3059 := z.EncBinary()
					_ = yym3059
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3060 := z.EncBinary()
					_ = yym3060
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yysep3057 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3061 := z.DecBinary()
	_ = yym3061
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3062 := r.ReadMapStart()
			if yyl3062 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3062, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3062 := r.ReadArrayStart()
			if yyl3062 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3062, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3063Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3063Slc
	var yyhl3063 bool = l >= 0
	for yyj3063 := 0; ; yyj3063++ {
		if yyhl3063 {
			if yyj3063 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3063Slc = r.DecodeBytes(yys3063Slc, true, true)
		yys3063 := string(yys3063Slc)
		switch yys3063 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3064 := &x.Limits
				yym3065 := z.DecBinary()
				_ = yym3065
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3064), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3063)
		} // end switch yys3063
	} // end for yyj3063
	if !yyhl3063 {
		r.ReadEnd()
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3066 int
	var yyb3066 bool
	var yyhl3066 bool = l >= 0
	yyj3066++
	if yyhl3066 {
		yyb3066 = yyj3066 > l
	} else {
		yyb3066 = r.CheckBreak()
	}
	if yyb3066 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3067 := &x.Limits
		yym3068 := z.DecBinary()
		_ = yym3068
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3067), d)
		}
	}
	for {
		yyj3066++
		if yyhl3066 {
			yyb3066 = yyj3066 > l
		} else {
			yyb3066 = r.CheckBreak()
		}
		if yyb3066 {
			break
		}
		z.DecStructFieldNotFound(yyj3066-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3069 := z.EncBinary()
		_ = yym3069
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3070 := !z.EncBinary()
			yy2arr3070 := z.EncBasicHandle().StructToArray
			var yyq3070 [4]bool
			_, _, _ = yysep3070, yyq3070, yy2arr3070
			const yyr3070 bool = false
			yyq3070[0] = x.Kind != ""
			yyq3070[1] = x.APIVersion != ""
			yyq3070[2] = true
			yyq3070[3] = true
			if yyr3070 || yy2arr3070 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3070 int = 0
				for _, b := range yyq3070 {
					if b {
						yynn3070++
					}
				}
				r.EncodeMapStart(yynn3070)
			}
			if yyr3070 || yy2arr3070 {
				if yyq3070[0] {
					yym3072 := z.EncBinary()
					_ = yym3072
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3070[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3073 := z.EncBinary()
					_ = yym3073
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3070 || yy2arr3070 {
				if yyq3070[1] {
					yym3075 := z.EncBinary()
					_ = yym3075
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3070[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3076 := z.EncBinary()
					_ = yym3076
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3070 || yy2arr3070 {
				if yyq3070[2] {
					yy3078 := &x.ObjectMeta
					yy3078.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3070[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3079 := &x.ObjectMeta
					yy3079.CodecEncodeSelf(e)
				}
			}
			if yyr3070 || yy2arr3070 {
				if yyq3070[3] {
					yy3081 := &x.Spec
					yy3081.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3070[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy3082 := &x.Spec
					yy3082.CodecEncodeSelf(e)
				}
			}
			if yysep3070 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3083 := z.DecBinary()
	_ = yym3083
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3084 := r.ReadMapStart()
			if yyl3084 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3084, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3084 := r.ReadArrayStart()
			if yyl3084 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3084, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3085Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3085Slc
	var yyhl3085 bool = l >= 0
	for yyj3085 := 0; ; yyj3085++ {
		if yyhl3085 {
			if yyj3085 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3085Slc = r.DecodeBytes(yys3085Slc, true, true)
		yys3085 := string(yys3085Slc)
		switch yys3085 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3088 := &x.ObjectMeta
				yyv3088.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3089 := &x.Spec
				yyv3089.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3085)
		} // end switch yys3085
	} // end for yyj3085
	if !yyhl3085 {
		r.ReadEnd()
	}
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3090 int
	var yyb3090 bool
	var yyhl3090 bool = l >= 0
	yyj3090++
	if yyhl3090 {
		yyb3090 = yyj3090 > l
	} else {
		yyb3090 = r.CheckBreak()
	}
	if yyb3090 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3090++
	if yyhl3090 {
		yyb3090 = yyj3090 > l
	} else {
		yyb3090 = r.CheckBreak()
	}
	if yyb3090 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3090++
	if yyhl3090 {
		yyb3090 = yyj3090 > l
	} else {
		yyb3090 = r.CheckBreak()
	}
	if yyb3090 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3093 := &x.ObjectMeta
		yyv3093.CodecDecodeSelf(d)
	}
	yyj3090++
	if yyhl3090 {
		yyb3090 = yyj3090 > l
	} else {
		yyb3090 = r.CheckBreak()
	}
	if yyb3090 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3094 := &x.Spec
		yyv3094.CodecDecodeSelf(d)
	}
	for {
		yyj3090++
		if yyhl3090 {
			yyb3090 = yyj3090 > l
		} else {
			yyb3090 = r.CheckBreak()
		}
		if yyb3090 {
			break
		}
		z.DecStructFieldNotFound(yyj3090-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3095 := z.EncBinary()
		_ = yym3095
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3096 := !z.EncBinary()
			yy2arr3096 := z.EncBasicHandle().StructToArray
			var yyq3096 [4]bool
			_, _, _ = yysep3096, yyq3096, yy2arr3096
			const yyr3096 bool = false
			yyq3096[0] = x.Kind != ""
			yyq3096[1] = x.APIVersion != ""
			yyq3096[2] = true
			if yyr3096 || yy2arr3096 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3096 int = 1
				for _, b := range yyq3096 {
					if b {
						yynn3096++
					}
				}
				r.EncodeMapStart(yynn3096)
			}
			if yyr3096 || yy2arr3096 {
				if yyq3096[0] {
					yym3098 := z.EncBinary()
					_ = yym3098
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3096[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3099 := z.EncBinary()
					_ = yym3099
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3096 || yy2arr3096 {
				if yyq3096[1] {
					yym3101 := z.EncBinary()
					_ = yym3101
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3096[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3102 := z.EncBinary()
					_ = yym3102
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3096 || yy2arr3096 {
				if yyq3096[2] {
					yy3104 := &x.ListMeta
					yym3105 := z.EncBinary()
					_ = yym3105
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3104) {
					} else {
						z.EncFallback(yy3104)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3096[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3106 := &x.ListMeta
					yym3107 := z.EncBinary()
					_ = yym3107
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3106) {
					} else {
						z.EncFallback(yy3106)
					}
				}
			}
			if yyr3096 || yy2arr3096 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3109 := z.EncBinary()
					_ = yym3109
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3110 := z.EncBinary()
					_ = yym3110
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yysep3096 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3111 := z.DecBinary()
	_ = yym3111
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3112 := r.ReadMapStart()
			if yyl3112 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3112, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3112 := r.ReadArrayStart()
			if yyl3112 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3112, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3113Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3113Slc
	var yyhl3113 bool = l >= 0
	for yyj3113 := 0; ; yyj3113++ {
		if yyhl3113 {
			if yyj3113 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3113Slc = r.DecodeBytes(yys3113Slc, true, true)
		yys3113 := string(yys3113Slc)
		switch yys3113 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3116 := &x.ListMeta
				yym3117 := z.DecBinary()
				_ = yym3117
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3116) {
				} else {
					z.DecFallback(yyv3116, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3118 := &x.Items
				yym3119 := z.DecBinary()
				_ = yym3119
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3118), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3113)
		} // end switch yys3113
	} // end for yyj3113
	if !yyhl3113 {
		r.ReadEnd()
	}
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3120 int
	var yyb3120 bool
	var yyhl3120 bool = l >= 0
	yyj3120++
	if yyhl3120 {
		yyb3120 = yyj3120 > l
	} else {
		yyb3120 = r.CheckBreak()
	}
	if yyb3120 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3120++
	if yyhl3120 {
		yyb3120 = yyj3120 > l
	} else {
		yyb3120 = r.CheckBreak()
	}
	if yyb3120 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3120++
	if yyhl3120 {
		yyb3120 = yyj3120 > l
	} else {
		yyb3120 = r.CheckBreak()
	}
	if yyb3120 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3123 := &x.ListMeta
		yym3124 := z.DecBinary()
		_ = yym3124
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3123) {
		} else {
			z.DecFallback(yyv3123, false)
		}
	}
	yyj3120++
	if yyhl3120 {
		yyb3120 = yyj3120 > l
	} else {
		yyb3120 = r.CheckBreak()
	}
	if yyb3120 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3125 := &x.Items
		yym3126 := z.DecBinary()
		_ = yym3126
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3125), d)
		}
	}
	for {
		yyj3120++
		if yyhl3120 {
			yyb3120 = yyj3120 > l
		} else {
			yyb3120 = r.CheckBreak()
		}
		if yyb3120 {
			break
		}
		z.DecStructFieldNotFound(yyj3120-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3127 := z.EncBinary()
		_ = yym3127
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3128 := !z.EncBinary()
			yy2arr3128 := z.EncBasicHandle().StructToArray
			var yyq3128 [1]bool
			_, _, _ = yysep3128, yyq3128, yy2arr3128
			const yyr3128 bool = false
			yyq3128[0] = len(x.Hard) != 0
			if yyr3128 || yy2arr3128 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3128 int = 0
				for _, b := range yyq3128 {
					if b {
						yynn3128++
					}
				}
				r.EncodeMapStart(yynn3128)
			}
			if yyr3128 || yy2arr3128 {
				if yyq3128[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3128[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3128 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3130 := z.DecBinary()
	_ = yym3130
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3131 := r.ReadMapStart()
			if yyl3131 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3131, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3131 := r.ReadArrayStart()
			if yyl3131 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3131, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3132Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3132Slc
	var yyhl3132 bool = l >= 0
	for yyj3132 := 0; ; yyj3132++ {
		if yyhl3132 {
			if yyj3132 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3132Slc = r.DecodeBytes(yys3132Slc, true, true)
		yys3132 := string(yys3132Slc)
		switch yys3132 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3133 := &x.Hard
				yyv3133.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3132)
		} // end switch yys3132
	} // end for yyj3132
	if !yyhl3132 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3134 int
	var yyb3134 bool
	var yyhl3134 bool = l >= 0
	yyj3134++
	if yyhl3134 {
		yyb3134 = yyj3134 > l
	} else {
		yyb3134 = r.CheckBreak()
	}
	if yyb3134 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3135 := &x.Hard
		yyv3135.CodecDecodeSelf(d)
	}
	for {
		yyj3134++
		if yyhl3134 {
			yyb3134 = yyj3134 > l
		} else {
			yyb3134 = r.CheckBreak()
		}
		if yyb3134 {
			break
		}
		z.DecStructFieldNotFound(yyj3134-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3136 := z.EncBinary()
		_ = yym3136
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3137 := !z.EncBinary()
			yy2arr3137 := z.EncBasicHandle().StructToArray
			var yyq3137 [2]bool
			_, _, _ = yysep3137, yyq3137, yy2arr3137
			const yyr3137 bool = false
			yyq3137[0] = len(x.Hard) != 0
			yyq3137[1] = len(x.Used) != 0
			if yyr3137 || yy2arr3137 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3137 int = 0
				for _, b := range yyq3137 {
					if b {
						yynn3137++
					}
				}
				r.EncodeMapStart(yynn3137)
			}
			if yyr3137 || yy2arr3137 {
				if yyq3137[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3137[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3137 || yy2arr3137 {
				if yyq3137[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3137[1] {
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3137 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3140 := z.DecBinary()
	_ = yym3140
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3141 := r.ReadMapStart()
			if yyl3141 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3141, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3141 := r.ReadArrayStart()
			if yyl3141 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3141, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3142Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3142Slc
	var yyhl3142 bool = l >= 0
	for yyj3142 := 0; ; yyj3142++ {
		if yyhl3142 {
			if yyj3142 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3142Slc = r.DecodeBytes(yys3142Slc, true, true)
		yys3142 := string(yys3142Slc)
		switch yys3142 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3143 := &x.Hard
				yyv3143.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3144 := &x.Used
				yyv3144.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3142)
		} // end switch yys3142
	} // end for yyj3142
	if !yyhl3142 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3145 int
	var yyb3145 bool
	var yyhl3145 bool = l >= 0
	yyj3145++
	if yyhl3145 {
		yyb3145 = yyj3145 > l
	} else {
		yyb3145 = r.CheckBreak()
	}
	if yyb3145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3146 := &x.Hard
		yyv3146.CodecDecodeSelf(d)
	}
	yyj3145++
	if yyhl3145 {
		yyb3145 = yyj3145 > l
	} else {
		yyb3145 = r.CheckBreak()
	}
	if yyb3145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3147 := &x.Used
		yyv3147.CodecDecodeSelf(d)
	}
	for {
		yyj3145++
		if yyhl3145 {
			yyb3145 = yyj3145 > l
		} else {
			yyb3145 = r.CheckBreak()
		}
		if yyb3145 {
			break
		}
		z.DecStructFieldNotFound(yyj3145-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3148 := z.EncBinary()
		_ = yym3148
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3149 := !z.EncBinary()
			yy2arr3149 := z.EncBasicHandle().StructToArray
			var yyq3149 [5]bool
			_, _, _ = yysep3149, yyq3149, yy2arr3149
			const yyr3149 bool = false
			yyq3149[0] = x.Kind != ""
			yyq3149[1] = x.APIVersion != ""
			yyq3149[2] = true
			yyq3149[3] = true
			yyq3149[4] = true
			if yyr3149 || yy2arr3149 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3149 int = 0
				for _, b := range yyq3149 {
					if b {
						yynn3149++
					}
				}
				r.EncodeMapStart(yynn3149)
			}
			if yyr3149 || yy2arr3149 {
				if yyq3149[0] {
					yym3151 := z.EncBinary()
					_ = yym3151
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3149[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3152 := z.EncBinary()
					_ = yym3152
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3149 || yy2arr3149 {
				if yyq3149[1] {
					yym3154 := z.EncBinary()
					_ = yym3154
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3149[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3155 := z.EncBinary()
					_ = yym3155
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3149 || yy2arr3149 {
				if yyq3149[2] {
					yy3157 := &x.ObjectMeta
					yy3157.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3149[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3158 := &x.ObjectMeta
					yy3158.CodecEncodeSelf(e)
				}
			}
			if yyr3149 || yy2arr3149 {
				if yyq3149[3] {
					yy3160 := &x.Spec
					yy3160.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3149[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy3161 := &x.Spec
					yy3161.CodecEncodeSelf(e)
				}
			}
			if yyr3149 || yy2arr3149 {
				if yyq3149[4] {
					yy3163 := &x.Status
					yy3163.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3149[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy3164 := &x.Status
					yy3164.CodecEncodeSelf(e)
				}
			}
			if yysep3149 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3165 := z.DecBinary()
	_ = yym3165
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3166 := r.ReadMapStart()
			if yyl3166 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3166, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3166 := r.ReadArrayStart()
			if yyl3166 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3166, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3167Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3167Slc
	var yyhl3167 bool = l >= 0
	for yyj3167 := 0; ; yyj3167++ {
		if yyhl3167 {
			if yyj3167 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3167Slc = r.DecodeBytes(yys3167Slc, true, true)
		yys3167 := string(yys3167Slc)
		switch yys3167 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3170 := &x.ObjectMeta
				yyv3170.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3171 := &x.Spec
				yyv3171.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3172 := &x.Status
				yyv3172.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3167)
		} // end switch yys3167
	} // end for yyj3167
	if !yyhl3167 {
		r.ReadEnd()
	}
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3173 int
	var yyb3173 bool
	var yyhl3173 bool = l >= 0
	yyj3173++
	if yyhl3173 {
		yyb3173 = yyj3173 > l
	} else {
		yyb3173 = r.CheckBreak()
	}
	if yyb3173 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3173++
	if yyhl3173 {
		yyb3173 = yyj3173 > l
	} else {
		yyb3173 = r.CheckBreak()
	}
	if yyb3173 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3173++
	if yyhl3173 {
		yyb3173 = yyj3173 > l
	} else {
		yyb3173 = r.CheckBreak()
	}
	if yyb3173 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3176 := &x.ObjectMeta
		yyv3176.CodecDecodeSelf(d)
	}
	yyj3173++
	if yyhl3173 {
		yyb3173 = yyj3173 > l
	} else {
		yyb3173 = r.CheckBreak()
	}
	if yyb3173 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3177 := &x.Spec
		yyv3177.CodecDecodeSelf(d)
	}
	yyj3173++
	if yyhl3173 {
		yyb3173 = yyj3173 > l
	} else {
		yyb3173 = r.CheckBreak()
	}
	if yyb3173 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3178 := &x.Status
		yyv3178.CodecDecodeSelf(d)
	}
	for {
		yyj3173++
		if yyhl3173 {
			yyb3173 = yyj3173 > l
		} else {
			yyb3173 = r.CheckBreak()
		}
		if yyb3173 {
			break
		}
		z.DecStructFieldNotFound(yyj3173-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3179 := z.EncBinary()
		_ = yym3179
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3180 := !z.EncBinary()
			yy2arr3180 := z.EncBasicHandle().StructToArray
			var yyq3180 [4]bool
			_, _, _ = yysep3180, yyq3180, yy2arr3180
			const yyr3180 bool = false
			yyq3180[0] = x.Kind != ""
			yyq3180[1] = x.APIVersion != ""
			yyq3180[2] = true
			if yyr3180 || yy2arr3180 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3180 int = 1
				for _, b := range yyq3180 {
					if b {
						yynn3180++
					}
				}
				r.EncodeMapStart(yynn3180)
			}
			if yyr3180 || yy2arr3180 {
				if yyq3180[0] {
					yym3182 := z.EncBinary()
					_ = yym3182
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3180[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3183 := z.EncBinary()
					_ = yym3183
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3180 || yy2arr3180 {
				if yyq3180[1] {
					yym3185 := z.EncBinary()
					_ = yym3185
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3180[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3186 := z.EncBinary()
					_ = yym3186
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3180 || yy2arr3180 {
				if yyq3180[2] {
					yy3188 := &x.ListMeta
					yym3189 := z.EncBinary()
					_ = yym3189
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3188) {
					} else {
						z.EncFallback(yy3188)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3180[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3190 := &x.ListMeta
					yym3191 := z.EncBinary()
					_ = yym3191
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3190) {
					} else {
						z.EncFallback(yy3190)
					}
				}
			}
			if yyr3180 || yy2arr3180 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3193 := z.EncBinary()
					_ = yym3193
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3194 := z.EncBinary()
					_ = yym3194
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yysep3180 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3195 := z.DecBinary()
	_ = yym3195
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3196 := r.ReadMapStart()
			if yyl3196 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3196, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3196 := r.ReadArrayStart()
			if yyl3196 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3196, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3197Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3197Slc
	var yyhl3197 bool = l >= 0
	for yyj3197 := 0; ; yyj3197++ {
		if yyhl3197 {
			if yyj3197 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3197Slc = r.DecodeBytes(yys3197Slc, true, true)
		yys3197 := string(yys3197Slc)
		switch yys3197 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3200 := &x.ListMeta
				yym3201 := z.DecBinary()
				_ = yym3201
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3200) {
				} else {
					z.DecFallback(yyv3200, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3202 := &x.Items
				yym3203 := z.DecBinary()
				_ = yym3203
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3202), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3197)
		} // end switch yys3197
	} // end for yyj3197
	if !yyhl3197 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3204 int
	var yyb3204 bool
	var yyhl3204 bool = l >= 0
	yyj3204++
	if yyhl3204 {
		yyb3204 = yyj3204 > l
	} else {
		yyb3204 = r.CheckBreak()
	}
	if yyb3204 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3204++
	if yyhl3204 {
		yyb3204 = yyj3204 > l
	} else {
		yyb3204 = r.CheckBreak()
	}
	if yyb3204 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3204++
	if yyhl3204 {
		yyb3204 = yyj3204 > l
	} else {
		yyb3204 = r.CheckBreak()
	}
	if yyb3204 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3207 := &x.ListMeta
		yym3208 := z.DecBinary()
		_ = yym3208
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3207) {
		} else {
			z.DecFallback(yyv3207, false)
		}
	}
	yyj3204++
	if yyhl3204 {
		yyb3204 = yyj3204 > l
	} else {
		yyb3204 = r.CheckBreak()
	}
	if yyb3204 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3209 := &x.Items
		yym3210 := z.DecBinary()
		_ = yym3210
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3209), d)
		}
	}
	for {
		yyj3204++
		if yyhl3204 {
			yyb3204 = yyj3204 > l
		} else {
			yyb3204 = r.CheckBreak()
		}
		if yyb3204 {
			break
		}
		z.DecStructFieldNotFound(yyj3204-1, "")
	}
	r.ReadEnd()
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3211 := z.EncBinary()
		_ = yym3211
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3212 := !z.EncBinary()
			yy2arr3212 := z.EncBasicHandle().StructToArray
			var yyq3212 [5]bool
			_, _, _ = yysep3212, yyq3212, yy2arr3212
			const yyr3212 bool = false
			yyq3212[0] = x.Kind != ""
			yyq3212[1] = x.APIVersion != ""
			yyq3212[2] = true
			yyq3212[3] = len(x.Data) != 0
			yyq3212[4] = x.Type != ""
			if yyr3212 || yy2arr3212 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3212 int = 0
				for _, b := range yyq3212 {
					if b {
						yynn3212++
					}
				}
				r.EncodeMapStart(yynn3212)
			}
			if yyr3212 || yy2arr3212 {
				if yyq3212[0] {
					yym3214 := z.EncBinary()
					_ = yym3214
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3212[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3215 := z.EncBinary()
					_ = yym3215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3212 || yy2arr3212 {
				if yyq3212[1] {
					yym3217 := z.EncBinary()
					_ = yym3217
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3212[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3218 := z.EncBinary()
					_ = yym3218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3212 || yy2arr3212 {
				if yyq3212[2] {
					yy3220 := &x.ObjectMeta
					yy3220.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3212[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3221 := &x.ObjectMeta
					yy3221.CodecEncodeSelf(e)
				}
			}
			if yyr3212 || yy2arr3212 {
				if yyq3212[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3223 := z.EncBinary()
						_ = yym3223
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3212[3] {
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3224 := z.EncBinary()
						_ = yym3224
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3212 || yy2arr3212 {
				if yyq3212[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3212[4] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yysep3212 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3226 := z.DecBinary()
	_ = yym3226
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3227 := r.ReadMapStart()
			if yyl3227 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3227, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3227 := r.ReadArrayStart()
			if yyl3227 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3227, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3228Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3228Slc
	var yyhl3228 bool = l >= 0
	for yyj3228 := 0; ; yyj3228++ {
		if yyhl3228 {
			if yyj3228 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3228Slc = r.DecodeBytes(yys3228Slc, true, true)
		yys3228 := string(yys3228Slc)
		switch yys3228 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3231 := &x.ObjectMeta
				yyv3231.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3232 := &x.Data
				yym3233 := z.DecBinary()
				_ = yym3233
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3232), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3228)
		} // end switch yys3228
	} // end for yyj3228
	if !yyhl3228 {
		r.ReadEnd()
	}
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3235 int
	var yyb3235 bool
	var yyhl3235 bool = l >= 0
	yyj3235++
	if yyhl3235 {
		yyb3235 = yyj3235 > l
	} else {
		yyb3235 = r.CheckBreak()
	}
	if yyb3235 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3235++
	if yyhl3235 {
		yyb3235 = yyj3235 > l
	} else {
		yyb3235 = r.CheckBreak()
	}
	if yyb3235 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3235++
	if yyhl3235 {
		yyb3235 = yyj3235 > l
	} else {
		yyb3235 = r.CheckBreak()
	}
	if yyb3235 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3238 := &x.ObjectMeta
		yyv3238.CodecDecodeSelf(d)
	}
	yyj3235++
	if yyhl3235 {
		yyb3235 = yyj3235 > l
	} else {
		yyb3235 = r.CheckBreak()
	}
	if yyb3235 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3239 := &x.Data
		yym3240 := z.DecBinary()
		_ = yym3240
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3239), d)
		}
	}
	yyj3235++
	if yyhl3235 {
		yyb3235 = yyj3235 > l
	} else {
		yyb3235 = r.CheckBreak()
	}
	if yyb3235 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj3235++
		if yyhl3235 {
			yyb3235 = yyj3235 > l
		} else {
			yyb3235 = r.CheckBreak()
		}
		if yyb3235 {
			break
		}
		z.DecStructFieldNotFound(yyj3235-1, "")
	}
	r.ReadEnd()
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3242 := z.EncBinary()
	_ = yym3242
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3243 := z.DecBinary()
	_ = yym3243
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3244 := z.EncBinary()
		_ = yym3244
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3245 := !z.EncBinary()
			yy2arr3245 := z.EncBasicHandle().StructToArray
			var yyq3245 [4]bool
			_, _, _ = yysep3245, yyq3245, yy2arr3245
			const yyr3245 bool = false
			yyq3245[0] = x.Kind != ""
			yyq3245[1] = x.APIVersion != ""
			yyq3245[2] = true
			if yyr3245 || yy2arr3245 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3245 int = 1
				for _, b := range yyq3245 {
					if b {
						yynn3245++
					}
				}
				r.EncodeMapStart(yynn3245)
			}
			if yyr3245 || yy2arr3245 {
				if yyq3245[0] {
					yym3247 := z.EncBinary()
					_ = yym3247
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3245[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3248 := z.EncBinary()
					_ = yym3248
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3245 || yy2arr3245 {
				if yyq3245[1] {
					yym3250 := z.EncBinary()
					_ = yym3250
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3245[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3251 := z.EncBinary()
					_ = yym3251
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3245 || yy2arr3245 {
				if yyq3245[2] {
					yy3253 := &x.ListMeta
					yym3254 := z.EncBinary()
					_ = yym3254
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3253) {
					} else {
						z.EncFallback(yy3253)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3245[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3255 := &x.ListMeta
					yym3256 := z.EncBinary()
					_ = yym3256
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3255) {
					} else {
						z.EncFallback(yy3255)
					}
				}
			}
			if yyr3245 || yy2arr3245 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3258 := z.EncBinary()
					_ = yym3258
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3259 := z.EncBinary()
					_ = yym3259
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yysep3245 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3260 := z.DecBinary()
	_ = yym3260
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3261 := r.ReadMapStart()
			if yyl3261 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3261, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3261 := r.ReadArrayStart()
			if yyl3261 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3261, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3262Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3262Slc
	var yyhl3262 bool = l >= 0
	for yyj3262 := 0; ; yyj3262++ {
		if yyhl3262 {
			if yyj3262 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3262Slc = r.DecodeBytes(yys3262Slc, true, true)
		yys3262 := string(yys3262Slc)
		switch yys3262 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3265 := &x.ListMeta
				yym3266 := z.DecBinary()
				_ = yym3266
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3265) {
				} else {
					z.DecFallback(yyv3265, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3267 := &x.Items
				yym3268 := z.DecBinary()
				_ = yym3268
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3267), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3262)
		} // end switch yys3262
	} // end for yyj3262
	if !yyhl3262 {
		r.ReadEnd()
	}
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3269 int
	var yyb3269 bool
	var yyhl3269 bool = l >= 0
	yyj3269++
	if yyhl3269 {
		yyb3269 = yyj3269 > l
	} else {
		yyb3269 = r.CheckBreak()
	}
	if yyb3269 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3269++
	if yyhl3269 {
		yyb3269 = yyj3269 > l
	} else {
		yyb3269 = r.CheckBreak()
	}
	if yyb3269 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3269++
	if yyhl3269 {
		yyb3269 = yyj3269 > l
	} else {
		yyb3269 = r.CheckBreak()
	}
	if yyb3269 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3272 := &x.ListMeta
		yym3273 := z.DecBinary()
		_ = yym3273
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3272) {
		} else {
			z.DecFallback(yyv3272, false)
		}
	}
	yyj3269++
	if yyhl3269 {
		yyb3269 = yyj3269 > l
	} else {
		yyb3269 = r.CheckBreak()
	}
	if yyb3269 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3274 := &x.Items
		yym3275 := z.DecBinary()
		_ = yym3275
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3274), d)
		}
	}
	for {
		yyj3269++
		if yyhl3269 {
			yyb3269 = yyj3269 > l
		} else {
			yyb3269 = r.CheckBreak()
		}
		if yyb3269 {
			break
		}
		z.DecStructFieldNotFound(yyj3269-1, "")
	}
	r.ReadEnd()
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3276 := z.EncBinary()
	_ = yym3276
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3277 := z.DecBinary()
	_ = yym3277
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3278 := z.EncBinary()
		_ = yym3278
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3279 := !z.EncBinary()
			yy2arr3279 := z.EncBasicHandle().StructToArray
			var yyq3279 [4]bool
			_, _, _ = yysep3279, yyq3279, yy2arr3279
			const yyr3279 bool = false
			yyq3279[2] = x.Message != ""
			yyq3279[3] = x.Error != ""
			if yyr3279 || yy2arr3279 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3279 int = 2
				for _, b := range yyq3279 {
					if b {
						yynn3279++
					}
				}
				r.EncodeMapStart(yynn3279)
			}
			if yyr3279 || yy2arr3279 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3279 || yy2arr3279 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3279 || yy2arr3279 {
				if yyq3279[2] {
					yym3283 := z.EncBinary()
					_ = yym3283
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3279[2] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym3284 := z.EncBinary()
					_ = yym3284
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3279 || yy2arr3279 {
				if yyq3279[3] {
					yym3286 := z.EncBinary()
					_ = yym3286
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3279[3] {
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					yym3287 := z.EncBinary()
					_ = yym3287
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yysep3279 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3288 := z.DecBinary()
	_ = yym3288
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3289 := r.ReadMapStart()
			if yyl3289 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3289, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3289 := r.ReadArrayStart()
			if yyl3289 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3289, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3290Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3290Slc
	var yyhl3290 bool = l >= 0
	for yyj3290 := 0; ; yyj3290++ {
		if yyhl3290 {
			if yyj3290 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3290Slc = r.DecodeBytes(yys3290Slc, true, true)
		yys3290 := string(yys3290Slc)
		switch yys3290 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3290)
		} // end switch yys3290
	} // end for yyj3290
	if !yyhl3290 {
		r.ReadEnd()
	}
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3295 int
	var yyb3295 bool
	var yyhl3295 bool = l >= 0
	yyj3295++
	if yyhl3295 {
		yyb3295 = yyj3295 > l
	} else {
		yyb3295 = r.CheckBreak()
	}
	if yyb3295 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3295++
	if yyhl3295 {
		yyb3295 = yyj3295 > l
	} else {
		yyb3295 = r.CheckBreak()
	}
	if yyb3295 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3295++
	if yyhl3295 {
		yyb3295 = yyj3295 > l
	} else {
		yyb3295 = r.CheckBreak()
	}
	if yyb3295 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3295++
	if yyhl3295 {
		yyb3295 = yyj3295 > l
	} else {
		yyb3295 = r.CheckBreak()
	}
	if yyb3295 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3295++
		if yyhl3295 {
			yyb3295 = yyj3295 > l
		} else {
			yyb3295 = r.CheckBreak()
		}
		if yyb3295 {
			break
		}
		z.DecStructFieldNotFound(yyj3295-1, "")
	}
	r.ReadEnd()
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3300 := z.EncBinary()
		_ = yym3300
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3301 := !z.EncBinary()
			yy2arr3301 := z.EncBasicHandle().StructToArray
			var yyq3301 [4]bool
			_, _, _ = yysep3301, yyq3301, yy2arr3301
			const yyr3301 bool = false
			yyq3301[0] = x.Kind != ""
			yyq3301[1] = x.APIVersion != ""
			yyq3301[2] = true
			yyq3301[3] = len(x.Conditions) != 0
			if yyr3301 || yy2arr3301 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3301 int = 0
				for _, b := range yyq3301 {
					if b {
						yynn3301++
					}
				}
				r.EncodeMapStart(yynn3301)
			}
			if yyr3301 || yy2arr3301 {
				if yyq3301[0] {
					yym3303 := z.EncBinary()
					_ = yym3303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3301[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3304 := z.EncBinary()
					_ = yym3304
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3301 || yy2arr3301 {
				if yyq3301[1] {
					yym3306 := z.EncBinary()
					_ = yym3306
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3301[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3307 := z.EncBinary()
					_ = yym3307
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3301 || yy2arr3301 {
				if yyq3301[2] {
					yy3309 := &x.ObjectMeta
					yy3309.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3301[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3310 := &x.ObjectMeta
					yy3310.CodecEncodeSelf(e)
				}
			}
			if yyr3301 || yy2arr3301 {
				if yyq3301[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3312 := z.EncBinary()
						_ = yym3312
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3301[3] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3313 := z.EncBinary()
						_ = yym3313
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yysep3301 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3314 := z.DecBinary()
	_ = yym3314
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3315 := r.ReadMapStart()
			if yyl3315 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3315, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3315 := r.ReadArrayStart()
			if yyl3315 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3315, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3316Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3316Slc
	var yyhl3316 bool = l >= 0
	for yyj3316 := 0; ; yyj3316++ {
		if yyhl3316 {
			if yyj3316 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3316Slc = r.DecodeBytes(yys3316Slc, true, true)
		yys3316 := string(yys3316Slc)
		switch yys3316 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3319 := &x.ObjectMeta
				yyv3319.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3320 := &x.Conditions
				yym3321 := z.DecBinary()
				_ = yym3321
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3320), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3316)
		} // end switch yys3316
	} // end for yyj3316
	if !yyhl3316 {
		r.ReadEnd()
	}
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3322 int
	var yyb3322 bool
	var yyhl3322 bool = l >= 0
	yyj3322++
	if yyhl3322 {
		yyb3322 = yyj3322 > l
	} else {
		yyb3322 = r.CheckBreak()
	}
	if yyb3322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3322++
	if yyhl3322 {
		yyb3322 = yyj3322 > l
	} else {
		yyb3322 = r.CheckBreak()
	}
	if yyb3322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3322++
	if yyhl3322 {
		yyb3322 = yyj3322 > l
	} else {
		yyb3322 = r.CheckBreak()
	}
	if yyb3322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3325 := &x.ObjectMeta
		yyv3325.CodecDecodeSelf(d)
	}
	yyj3322++
	if yyhl3322 {
		yyb3322 = yyj3322 > l
	} else {
		yyb3322 = r.CheckBreak()
	}
	if yyb3322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3326 := &x.Conditions
		yym3327 := z.DecBinary()
		_ = yym3327
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3326), d)
		}
	}
	for {
		yyj3322++
		if yyhl3322 {
			yyb3322 = yyj3322 > l
		} else {
			yyb3322 = r.CheckBreak()
		}
		if yyb3322 {
			break
		}
		z.DecStructFieldNotFound(yyj3322-1, "")
	}
	r.ReadEnd()
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3328 := z.EncBinary()
		_ = yym3328
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3329 := !z.EncBinary()
			yy2arr3329 := z.EncBasicHandle().StructToArray
			var yyq3329 [4]bool
			_, _, _ = yysep3329, yyq3329, yy2arr3329
			const yyr3329 bool = false
			yyq3329[0] = x.Kind != ""
			yyq3329[1] = x.APIVersion != ""
			yyq3329[2] = true
			if yyr3329 || yy2arr3329 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3329 int = 1
				for _, b := range yyq3329 {
					if b {
						yynn3329++
					}
				}
				r.EncodeMapStart(yynn3329)
			}
			if yyr3329 || yy2arr3329 {
				if yyq3329[0] {
					yym3331 := z.EncBinary()
					_ = yym3331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3329[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3332 := z.EncBinary()
					_ = yym3332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3329 || yy2arr3329 {
				if yyq3329[1] {
					yym3334 := z.EncBinary()
					_ = yym3334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3329[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3335 := z.EncBinary()
					_ = yym3335
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3329 || yy2arr3329 {
				if yyq3329[2] {
					yy3337 := &x.ListMeta
					yym3338 := z.EncBinary()
					_ = yym3338
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3337) {
					} else {
						z.EncFallback(yy3337)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3329[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3339 := &x.ListMeta
					yym3340 := z.EncBinary()
					_ = yym3340
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3339) {
					} else {
						z.EncFallback(yy3339)
					}
				}
			}
			if yyr3329 || yy2arr3329 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3342 := z.EncBinary()
					_ = yym3342
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3343 := z.EncBinary()
					_ = yym3343
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yysep3329 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3344 := z.DecBinary()
	_ = yym3344
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3345 := r.ReadMapStart()
			if yyl3345 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3345, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3345 := r.ReadArrayStart()
			if yyl3345 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3345, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3346Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3346Slc
	var yyhl3346 bool = l >= 0
	for yyj3346 := 0; ; yyj3346++ {
		if yyhl3346 {
			if yyj3346 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3346Slc = r.DecodeBytes(yys3346Slc, true, true)
		yys3346 := string(yys3346Slc)
		switch yys3346 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3349 := &x.ListMeta
				yym3350 := z.DecBinary()
				_ = yym3350
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3349) {
				} else {
					z.DecFallback(yyv3349, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3351 := &x.Items
				yym3352 := z.DecBinary()
				_ = yym3352
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3351), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3346)
		} // end switch yys3346
	} // end for yyj3346
	if !yyhl3346 {
		r.ReadEnd()
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3353 int
	var yyb3353 bool
	var yyhl3353 bool = l >= 0
	yyj3353++
	if yyhl3353 {
		yyb3353 = yyj3353 > l
	} else {
		yyb3353 = r.CheckBreak()
	}
	if yyb3353 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3353++
	if yyhl3353 {
		yyb3353 = yyj3353 > l
	} else {
		yyb3353 = r.CheckBreak()
	}
	if yyb3353 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3353++
	if yyhl3353 {
		yyb3353 = yyj3353 > l
	} else {
		yyb3353 = r.CheckBreak()
	}
	if yyb3353 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3356 := &x.ListMeta
		yym3357 := z.DecBinary()
		_ = yym3357
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3356) {
		} else {
			z.DecFallback(yyv3356, false)
		}
	}
	yyj3353++
	if yyhl3353 {
		yyb3353 = yyj3353 > l
	} else {
		yyb3353 = r.CheckBreak()
	}
	if yyb3353 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3358 := &x.Items
		yym3359 := z.DecBinary()
		_ = yym3359
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3358), d)
		}
	}
	for {
		yyj3353++
		if yyhl3353 {
			yyb3353 = yyj3353 > l
		} else {
			yyb3353 = r.CheckBreak()
		}
		if yyb3353 {
			break
		}
		z.DecStructFieldNotFound(yyj3353-1, "")
	}
	r.ReadEnd()
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3360 := z.EncBinary()
		_ = yym3360
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3361 := !z.EncBinary()
			yy2arr3361 := z.EncBasicHandle().StructToArray
			var yyq3361 [1]bool
			_, _, _ = yysep3361, yyq3361, yy2arr3361
			const yyr3361 bool = false
			yyq3361[0] = len(x.Items) != 0
			if yyr3361 || yy2arr3361 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3361 int = 0
				for _, b := range yyq3361 {
					if b {
						yynn3361++
					}
				}
				r.EncodeMapStart(yynn3361)
			}
			if yyr3361 || yy2arr3361 {
				if yyq3361[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3363 := z.EncBinary()
						_ = yym3363
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3361[0] {
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3364 := z.EncBinary()
						_ = yym3364
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yysep3361 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3365 := z.DecBinary()
	_ = yym3365
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3366 := r.ReadMapStart()
			if yyl3366 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3366, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3366 := r.ReadArrayStart()
			if yyl3366 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3366, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3367Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3367Slc
	var yyhl3367 bool = l >= 0
	for yyj3367 := 0; ; yyj3367++ {
		if yyhl3367 {
			if yyj3367 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3367Slc = r.DecodeBytes(yys3367Slc, true, true)
		yys3367 := string(yys3367Slc)
		switch yys3367 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3368 := &x.Items
				yym3369 := z.DecBinary()
				_ = yym3369
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv3368), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3367)
		} // end switch yys3367
	} // end for yyj3367
	if !yyhl3367 {
		r.ReadEnd()
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3370 int
	var yyb3370 bool
	var yyhl3370 bool = l >= 0
	yyj3370++
	if yyhl3370 {
		yyb3370 = yyj3370 > l
	} else {
		yyb3370 = r.CheckBreak()
	}
	if yyb3370 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3371 := &x.Items
		yym3372 := z.DecBinary()
		_ = yym3372
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv3371), d)
		}
	}
	for {
		yyj3370++
		if yyhl3370 {
			yyb3370 = yyj3370 > l
		} else {
			yyb3370 = r.CheckBreak()
		}
		if yyb3370 {
			break
		}
		z.DecStructFieldNotFound(yyj3370-1, "")
	}
	r.ReadEnd()
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3373 := z.EncBinary()
		_ = yym3373
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3374 := !z.EncBinary()
			yy2arr3374 := z.EncBasicHandle().StructToArray
			var yyq3374 [2]bool
			_, _, _ = yysep3374, yyq3374, yy2arr3374
			const yyr3374 bool = false
			if yyr3374 || yy2arr3374 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3374 int = 2
				for _, b := range yyq3374 {
					if b {
						yynn3374++
					}
				}
				r.EncodeMapStart(yynn3374)
			}
			if yyr3374 || yy2arr3374 {
				yym3376 := z.EncBinary()
				_ = yym3376
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym3377 := z.EncBinary()
				_ = yym3377
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3374 || yy2arr3374 {
				yy3379 := &x.FieldRef
				yy3379.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				yy3380 := &x.FieldRef
				yy3380.CodecEncodeSelf(e)
			}
			if yysep3374 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3381 := z.DecBinary()
	_ = yym3381
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3382 := r.ReadMapStart()
			if yyl3382 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3382, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3382 := r.ReadArrayStart()
			if yyl3382 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3382, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3383Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3383Slc
	var yyhl3383 bool = l >= 0
	for yyj3383 := 0; ; yyj3383++ {
		if yyhl3383 {
			if yyj3383 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3383Slc = r.DecodeBytes(yys3383Slc, true, true)
		yys3383 := string(yys3383Slc)
		switch yys3383 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv3385 := &x.FieldRef
				yyv3385.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3383)
		} // end switch yys3383
	} // end for yyj3383
	if !yyhl3383 {
		r.ReadEnd()
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3386 int
	var yyb3386 bool
	var yyhl3386 bool = l >= 0
	yyj3386++
	if yyhl3386 {
		yyb3386 = yyj3386 > l
	} else {
		yyb3386 = r.CheckBreak()
	}
	if yyb3386 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj3386++
	if yyhl3386 {
		yyb3386 = yyj3386 > l
	} else {
		yyb3386 = r.CheckBreak()
	}
	if yyb3386 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv3388 := &x.FieldRef
		yyv3388.CodecDecodeSelf(d)
	}
	for {
		yyj3386++
		if yyhl3386 {
			yyb3386 = yyj3386 > l
		} else {
			yyb3386 = r.CheckBreak()
		}
		if yyb3386 {
			break
		}
		z.DecStructFieldNotFound(yyj3386-1, "")
	}
	r.ReadEnd()
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3389 := z.EncBinary()
		_ = yym3389
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3390 := !z.EncBinary()
			yy2arr3390 := z.EncBasicHandle().StructToArray
			var yyq3390 [5]bool
			_, _, _ = yysep3390, yyq3390, yy2arr3390
			const yyr3390 bool = false
			yyq3390[0] = x.Capabilities != nil
			yyq3390[1] = x.Privileged != nil
			yyq3390[2] = x.SELinuxOptions != nil
			yyq3390[3] = x.RunAsUser != nil
			yyq3390[4] = x.RunAsNonRoot != nil
			if yyr3390 || yy2arr3390 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3390 int = 0
				for _, b := range yyq3390 {
					if b {
						yynn3390++
					}
				}
				r.EncodeMapStart(yynn3390)
			}
			if yyr3390 || yy2arr3390 {
				if yyq3390[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3390[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3390 || yy2arr3390 {
				if yyq3390[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3393 := *x.Privileged
						yym3394 := z.EncBinary()
						_ = yym3394
						if false {
						} else {
							r.EncodeBool(bool(yy3393))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3390[1] {
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3395 := *x.Privileged
						yym3396 := z.EncBinary()
						_ = yym3396
						if false {
						} else {
							r.EncodeBool(bool(yy3395))
						}
					}
				}
			}
			if yyr3390 || yy2arr3390 {
				if yyq3390[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3390[2] {
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3390 || yy2arr3390 {
				if yyq3390[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3399 := *x.RunAsUser
						yym3400 := z.EncBinary()
						_ = yym3400
						if false {
						} else {
							r.EncodeInt(int64(yy3399))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3390[3] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3401 := *x.RunAsUser
						yym3402 := z.EncBinary()
						_ = yym3402
						if false {
						} else {
							r.EncodeInt(int64(yy3401))
						}
					}
				}
			}
			if yyr3390 || yy2arr3390 {
				if yyq3390[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3404 := *x.RunAsNonRoot
						yym3405 := z.EncBinary()
						_ = yym3405
						if false {
						} else {
							r.EncodeBool(bool(yy3404))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3390[4] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3406 := *x.RunAsNonRoot
						yym3407 := z.EncBinary()
						_ = yym3407
						if false {
						} else {
							r.EncodeBool(bool(yy3406))
						}
					}
				}
			}
			if yysep3390 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3408 := z.DecBinary()
	_ = yym3408
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3409 := r.ReadMapStart()
			if yyl3409 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3409, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3409 := r.ReadArrayStart()
			if yyl3409 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3409, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3410Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3410Slc
	var yyhl3410 bool = l >= 0
	for yyj3410 := 0; ; yyj3410++ {
		if yyhl3410 {
			if yyj3410 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3410Slc = r.DecodeBytes(yys3410Slc, true, true)
		yys3410 := string(yys3410Slc)
		switch yys3410 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3413 := z.DecBinary()
				_ = yym3413
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3416 := z.DecBinary()
				_ = yym3416
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym3418 := z.DecBinary()
				_ = yym3418
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3410)
		} // end switch yys3410
	} // end for yyj3410
	if !yyhl3410 {
		r.ReadEnd()
	}
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3419 int
	var yyb3419 bool
	var yyhl3419 bool = l >= 0
	yyj3419++
	if yyhl3419 {
		yyb3419 = yyj3419 > l
	} else {
		yyb3419 = r.CheckBreak()
	}
	if yyb3419 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3419++
	if yyhl3419 {
		yyb3419 = yyj3419 > l
	} else {
		yyb3419 = r.CheckBreak()
	}
	if yyb3419 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3422 := z.DecBinary()
		_ = yym3422
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3419++
	if yyhl3419 {
		yyb3419 = yyj3419 > l
	} else {
		yyb3419 = r.CheckBreak()
	}
	if yyb3419 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3419++
	if yyhl3419 {
		yyb3419 = yyj3419 > l
	} else {
		yyb3419 = r.CheckBreak()
	}
	if yyb3419 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3425 := z.DecBinary()
		_ = yym3425
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3419++
	if yyhl3419 {
		yyb3419 = yyj3419 > l
	} else {
		yyb3419 = r.CheckBreak()
	}
	if yyb3419 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym3427 := z.DecBinary()
		_ = yym3427
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	for {
		yyj3419++
		if yyhl3419 {
			yyb3419 = yyj3419 > l
		} else {
			yyb3419 = r.CheckBreak()
		}
		if yyb3419 {
			break
		}
		z.DecStructFieldNotFound(yyj3419-1, "")
	}
	r.ReadEnd()
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3428 := z.EncBinary()
		_ = yym3428
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3429 := !z.EncBinary()
			yy2arr3429 := z.EncBasicHandle().StructToArray
			var yyq3429 [4]bool
			_, _, _ = yysep3429, yyq3429, yy2arr3429
			const yyr3429 bool = false
			yyq3429[0] = x.User != ""
			yyq3429[1] = x.Role != ""
			yyq3429[2] = x.Type != ""
			yyq3429[3] = x.Level != ""
			if yyr3429 || yy2arr3429 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3429 int = 0
				for _, b := range yyq3429 {
					if b {
						yynn3429++
					}
				}
				r.EncodeMapStart(yynn3429)
			}
			if yyr3429 || yy2arr3429 {
				if yyq3429[0] {
					yym3431 := z.EncBinary()
					_ = yym3431
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3429[0] {
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					yym3432 := z.EncBinary()
					_ = yym3432
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3429 || yy2arr3429 {
				if yyq3429[1] {
					yym3434 := z.EncBinary()
					_ = yym3434
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3429[1] {
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					yym3435 := z.EncBinary()
					_ = yym3435
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3429 || yy2arr3429 {
				if yyq3429[2] {
					yym3437 := z.EncBinary()
					_ = yym3437
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3429[2] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					yym3438 := z.EncBinary()
					_ = yym3438
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3429 || yy2arr3429 {
				if yyq3429[3] {
					yym3440 := z.EncBinary()
					_ = yym3440
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3429[3] {
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					yym3441 := z.EncBinary()
					_ = yym3441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yysep3429 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3442 := z.DecBinary()
	_ = yym3442
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3443 := r.ReadMapStart()
			if yyl3443 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3443, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3443 := r.ReadArrayStart()
			if yyl3443 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3443, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3444Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3444Slc
	var yyhl3444 bool = l >= 0
	for yyj3444 := 0; ; yyj3444++ {
		if yyhl3444 {
			if yyj3444 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3444Slc = r.DecodeBytes(yys3444Slc, true, true)
		yys3444 := string(yys3444Slc)
		switch yys3444 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3444)
		} // end switch yys3444
	} // end for yyj3444
	if !yyhl3444 {
		r.ReadEnd()
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3449 int
	var yyb3449 bool
	var yyhl3449 bool = l >= 0
	yyj3449++
	if yyhl3449 {
		yyb3449 = yyj3449 > l
	} else {
		yyb3449 = r.CheckBreak()
	}
	if yyb3449 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3449++
	if yyhl3449 {
		yyb3449 = yyj3449 > l
	} else {
		yyb3449 = r.CheckBreak()
	}
	if yyb3449 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3449++
	if yyhl3449 {
		yyb3449 = yyj3449 > l
	} else {
		yyb3449 = r.CheckBreak()
	}
	if yyb3449 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3449++
	if yyhl3449 {
		yyb3449 = yyj3449 > l
	} else {
		yyb3449 = r.CheckBreak()
	}
	if yyb3449 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3449++
		if yyhl3449 {
			yyb3449 = yyj3449 > l
		} else {
			yyb3449 = r.CheckBreak()
		}
		if yyb3449 {
			break
		}
		z.DecStructFieldNotFound(yyj3449-1, "")
	}
	r.ReadEnd()
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3454 := z.EncBinary()
		_ = yym3454
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3455 := !z.EncBinary()
			yy2arr3455 := z.EncBasicHandle().StructToArray
			var yyq3455 [5]bool
			_, _, _ = yysep3455, yyq3455, yy2arr3455
			const yyr3455 bool = false
			yyq3455[0] = x.Kind != ""
			yyq3455[1] = x.APIVersion != ""
			yyq3455[2] = true
			if yyr3455 || yy2arr3455 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3455 int = 2
				for _, b := range yyq3455 {
					if b {
						yynn3455++
					}
				}
				r.EncodeMapStart(yynn3455)
			}
			if yyr3455 || yy2arr3455 {
				if yyq3455[0] {
					yym3457 := z.EncBinary()
					_ = yym3457
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3455[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3458 := z.EncBinary()
					_ = yym3458
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3455 || yy2arr3455 {
				if yyq3455[1] {
					yym3460 := z.EncBinary()
					_ = yym3460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3455[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3461 := z.EncBinary()
					_ = yym3461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3455 || yy2arr3455 {
				if yyq3455[2] {
					yy3463 := &x.ObjectMeta
					yy3463.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3455[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3464 := &x.ObjectMeta
					yy3464.CodecEncodeSelf(e)
				}
			}
			if yyr3455 || yy2arr3455 {
				yym3466 := z.EncBinary()
				_ = yym3466
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				yym3467 := z.EncBinary()
				_ = yym3467
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3455 || yy2arr3455 {
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3469 := z.EncBinary()
					_ = yym3469
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3470 := z.EncBinary()
					_ = yym3470
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yysep3455 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3471 := z.DecBinary()
	_ = yym3471
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3472 := r.ReadMapStart()
			if yyl3472 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3472, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3472 := r.ReadArrayStart()
			if yyl3472 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3472, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3473Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3473Slc
	var yyhl3473 bool = l >= 0
	for yyj3473 := 0; ; yyj3473++ {
		if yyhl3473 {
			if yyj3473 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3473Slc = r.DecodeBytes(yys3473Slc, true, true)
		yys3473 := string(yys3473Slc)
		switch yys3473 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3476 := &x.ObjectMeta
				yyv3476.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3478 := &x.Data
				yym3479 := z.DecBinary()
				_ = yym3479
				if false {
				} else {
					*yyv3478 = r.DecodeBytes(*(*[]byte)(yyv3478), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3473)
		} // end switch yys3473
	} // end for yyj3473
	if !yyhl3473 {
		r.ReadEnd()
	}
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3480 int
	var yyb3480 bool
	var yyhl3480 bool = l >= 0
	yyj3480++
	if yyhl3480 {
		yyb3480 = yyj3480 > l
	} else {
		yyb3480 = r.CheckBreak()
	}
	if yyb3480 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3480++
	if yyhl3480 {
		yyb3480 = yyj3480 > l
	} else {
		yyb3480 = r.CheckBreak()
	}
	if yyb3480 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3480++
	if yyhl3480 {
		yyb3480 = yyj3480 > l
	} else {
		yyb3480 = r.CheckBreak()
	}
	if yyb3480 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3483 := &x.ObjectMeta
		yyv3483.CodecDecodeSelf(d)
	}
	yyj3480++
	if yyhl3480 {
		yyb3480 = yyj3480 > l
	} else {
		yyb3480 = r.CheckBreak()
	}
	if yyb3480 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3480++
	if yyhl3480 {
		yyb3480 = yyj3480 > l
	} else {
		yyb3480 = r.CheckBreak()
	}
	if yyb3480 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3485 := &x.Data
		yym3486 := z.DecBinary()
		_ = yym3486
		if false {
		} else {
			*yyv3485 = r.DecodeBytes(*(*[]byte)(yyv3485), false, false)
		}
	}
	for {
		yyj3480++
		if yyhl3480 {
			yyb3480 = yyj3480 > l
		} else {
			yyb3480 = r.CheckBreak()
		}
		if yyb3480 {
			break
		}
		z.DecStructFieldNotFound(yyj3480-1, "")
	}
	r.ReadEnd()
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3487 := range v {
		yyv3487.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3488 := *v
	yyh3488, yyl3488 := z.DecSliceHelperStart()

	var yyrr3488, yyrl3488 int
	var yyc3488, yyrt3488 bool
	_, _, _ = yyc3488, yyrt3488, yyrl3488
	yyrr3488 = yyl3488

	if yyv3488 == nil {
		if yyrl3488, yyrt3488 = z.DecInferLen(yyl3488, z.DecBasicHandle().MaxInitLen, 16); yyrt3488 {
			yyrr3488 = yyrl3488
		}
		yyv3488 = make([]PersistentVolumeAccessMode, yyrl3488)
		yyc3488 = true
	}

	if yyl3488 == 0 {
		if len(yyv3488) != 0 {
			yyv3488 = yyv3488[:0]
			yyc3488 = true
		}
	} else if yyl3488 > 0 {

		if yyl3488 > cap(yyv3488) {
			yyrl3488, yyrt3488 = z.DecInferLen(yyl3488, z.DecBasicHandle().MaxInitLen, 16)

			yyv23488 := yyv3488
			yyv3488 = make([]PersistentVolumeAccessMode, yyrl3488)
			if len(yyv3488) > 0 {
				copy(yyv3488, yyv23488[:cap(yyv23488)])
			}
			yyc3488 = true

			yyrr3488 = len(yyv3488)
		} else if yyl3488 != len(yyv3488) {
			yyv3488 = yyv3488[:yyl3488]
			yyc3488 = true
		}
		yyj3488 := 0
		for ; yyj3488 < yyrr3488; yyj3488++ {
			if r.TryDecodeAsNil() {
				yyv3488[yyj3488] = ""
			} else {
				yyv3488[yyj3488] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt3488 {
			for ; yyj3488 < yyl3488; yyj3488++ {
				yyv3488 = append(yyv3488, "")
				if r.TryDecodeAsNil() {
					yyv3488[yyj3488] = ""
				} else {
					yyv3488[yyj3488] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3488 := 0; !r.CheckBreak(); yyj3488++ {
			if yyj3488 >= len(yyv3488) {
				yyv3488 = append(yyv3488, "") // var yyz3488 PersistentVolumeAccessMode
				yyc3488 = true
			}

			if yyj3488 < len(yyv3488) {
				if r.TryDecodeAsNil() {
					yyv3488[yyj3488] = ""
				} else {
					yyv3488[yyj3488] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3488.End()
	}
	if yyc3488 {
		*v = yyv3488
	}

}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3492 := range v {
		yy3493 := &yyv3492
		yy3493.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3494 := *v
	yyh3494, yyl3494 := z.DecSliceHelperStart()

	var yyrr3494, yyrl3494 int
	var yyc3494, yyrt3494 bool
	_, _, _ = yyc3494, yyrt3494, yyrl3494
	yyrr3494 = yyl3494

	if yyv3494 == nil {
		if yyrl3494, yyrt3494 = z.DecInferLen(yyl3494, z.DecBasicHandle().MaxInitLen, 384); yyrt3494 {
			yyrr3494 = yyrl3494
		}
		yyv3494 = make([]PersistentVolume, yyrl3494)
		yyc3494 = true
	}

	if yyl3494 == 0 {
		if len(yyv3494) != 0 {
			yyv3494 = yyv3494[:0]
			yyc3494 = true
		}
	} else if yyl3494 > 0 {

		if yyl3494 > cap(yyv3494) {
			yyrl3494, yyrt3494 = z.DecInferLen(yyl3494, z.DecBasicHandle().MaxInitLen, 384)
			yyv3494 = make([]PersistentVolume, yyrl3494)
			yyc3494 = true

			yyrr3494 = len(yyv3494)
		} else if yyl3494 != len(yyv3494) {
			yyv3494 = yyv3494[:yyl3494]
			yyc3494 = true
		}
		yyj3494 := 0
		for ; yyj3494 < yyrr3494; yyj3494++ {
			if r.TryDecodeAsNil() {
				yyv3494[yyj3494] = PersistentVolume{}
			} else {
				yyv3495 := &yyv3494[yyj3494]
				yyv3495.CodecDecodeSelf(d)
			}

		}
		if yyrt3494 {
			for ; yyj3494 < yyl3494; yyj3494++ {
				yyv3494 = append(yyv3494, PersistentVolume{})
				if r.TryDecodeAsNil() {
					yyv3494[yyj3494] = PersistentVolume{}
				} else {
					yyv3496 := &yyv3494[yyj3494]
					yyv3496.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3494 := 0; !r.CheckBreak(); yyj3494++ {
			if yyj3494 >= len(yyv3494) {
				yyv3494 = append(yyv3494, PersistentVolume{}) // var yyz3494 PersistentVolume
				yyc3494 = true
			}

			if yyj3494 < len(yyv3494) {
				if r.TryDecodeAsNil() {
					yyv3494[yyj3494] = PersistentVolume{}
				} else {
					yyv3497 := &yyv3494[yyj3494]
					yyv3497.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3494.End()
	}
	if yyc3494 {
		*v = yyv3494
	}

}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3498 := range v {
		yy3499 := &yyv3498
		yy3499.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3500 := *v
	yyh3500, yyl3500 := z.DecSliceHelperStart()

	var yyrr3500, yyrl3500 int
	var yyc3500, yyrt3500 bool
	_, _, _ = yyc3500, yyrt3500, yyrl3500
	yyrr3500 = yyl3500

	if yyv3500 == nil {
		if yyrl3500, yyrt3500 = z.DecInferLen(yyl3500, z.DecBasicHandle().MaxInitLen, 296); yyrt3500 {
			yyrr3500 = yyrl3500
		}
		yyv3500 = make([]PersistentVolumeClaim, yyrl3500)
		yyc3500 = true
	}

	if yyl3500 == 0 {
		if len(yyv3500) != 0 {
			yyv3500 = yyv3500[:0]
			yyc3500 = true
		}
	} else if yyl3500 > 0 {

		if yyl3500 > cap(yyv3500) {
			yyrl3500, yyrt3500 = z.DecInferLen(yyl3500, z.DecBasicHandle().MaxInitLen, 296)
			yyv3500 = make([]PersistentVolumeClaim, yyrl3500)
			yyc3500 = true

			yyrr3500 = len(yyv3500)
		} else if yyl3500 != len(yyv3500) {
			yyv3500 = yyv3500[:yyl3500]
			yyc3500 = true
		}
		yyj3500 := 0
		for ; yyj3500 < yyrr3500; yyj3500++ {
			if r.TryDecodeAsNil() {
				yyv3500[yyj3500] = PersistentVolumeClaim{}
			} else {
				yyv3501 := &yyv3500[yyj3500]
				yyv3501.CodecDecodeSelf(d)
			}

		}
		if yyrt3500 {
			for ; yyj3500 < yyl3500; yyj3500++ {
				yyv3500 = append(yyv3500, PersistentVolumeClaim{})
				if r.TryDecodeAsNil() {
					yyv3500[yyj3500] = PersistentVolumeClaim{}
				} else {
					yyv3502 := &yyv3500[yyj3500]
					yyv3502.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3500 := 0; !r.CheckBreak(); yyj3500++ {
			if yyj3500 >= len(yyv3500) {
				yyv3500 = append(yyv3500, PersistentVolumeClaim{}) // var yyz3500 PersistentVolumeClaim
				yyc3500 = true
			}

			if yyj3500 < len(yyv3500) {
				if r.TryDecodeAsNil() {
					yyv3500[yyj3500] = PersistentVolumeClaim{}
				} else {
					yyv3503 := &yyv3500[yyj3500]
					yyv3503.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3500.End()
	}
	if yyc3500 {
		*v = yyv3500
	}

}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3504 := range v {
		yyv3504.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3505 := *v
	yyh3505, yyl3505 := z.DecSliceHelperStart()

	var yyrr3505, yyrl3505 int
	var yyc3505, yyrt3505 bool
	_, _, _ = yyc3505, yyrt3505, yyrl3505
	yyrr3505 = yyl3505

	if yyv3505 == nil {
		if yyrl3505, yyrt3505 = z.DecInferLen(yyl3505, z.DecBasicHandle().MaxInitLen, 16); yyrt3505 {
			yyrr3505 = yyrl3505
		}
		yyv3505 = make([]Capability, yyrl3505)
		yyc3505 = true
	}

	if yyl3505 == 0 {
		if len(yyv3505) != 0 {
			yyv3505 = yyv3505[:0]
			yyc3505 = true
		}
	} else if yyl3505 > 0 {

		if yyl3505 > cap(yyv3505) {
			yyrl3505, yyrt3505 = z.DecInferLen(yyl3505, z.DecBasicHandle().MaxInitLen, 16)

			yyv23505 := yyv3505
			yyv3505 = make([]Capability, yyrl3505)
			if len(yyv3505) > 0 {
				copy(yyv3505, yyv23505[:cap(yyv23505)])
			}
			yyc3505 = true

			yyrr3505 = len(yyv3505)
		} else if yyl3505 != len(yyv3505) {
			yyv3505 = yyv3505[:yyl3505]
			yyc3505 = true
		}
		yyj3505 := 0
		for ; yyj3505 < yyrr3505; yyj3505++ {
			if r.TryDecodeAsNil() {
				yyv3505[yyj3505] = ""
			} else {
				yyv3505[yyj3505] = Capability(r.DecodeString())
			}

		}
		if yyrt3505 {
			for ; yyj3505 < yyl3505; yyj3505++ {
				yyv3505 = append(yyv3505, "")
				if r.TryDecodeAsNil() {
					yyv3505[yyj3505] = ""
				} else {
					yyv3505[yyj3505] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3505 := 0; !r.CheckBreak(); yyj3505++ {
			if yyj3505 >= len(yyv3505) {
				yyv3505 = append(yyv3505, "") // var yyz3505 Capability
				yyc3505 = true
			}

			if yyj3505 < len(yyv3505) {
				if r.TryDecodeAsNil() {
					yyv3505[yyj3505] = ""
				} else {
					yyv3505[yyj3505] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3505.End()
	}
	if yyc3505 {
		*v = yyv3505
	}

}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3509 := range v {
		yy3510 := &yyv3509
		yy3510.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3511 := *v
	yyh3511, yyl3511 := z.DecSliceHelperStart()

	var yyrr3511, yyrl3511 int
	var yyc3511, yyrt3511 bool
	_, _, _ = yyc3511, yyrt3511, yyrl3511
	yyrr3511 = yyl3511

	if yyv3511 == nil {
		if yyrl3511, yyrt3511 = z.DecInferLen(yyl3511, z.DecBasicHandle().MaxInitLen, 64); yyrt3511 {
			yyrr3511 = yyrl3511
		}
		yyv3511 = make([]ContainerPort, yyrl3511)
		yyc3511 = true
	}

	if yyl3511 == 0 {
		if len(yyv3511) != 0 {
			yyv3511 = yyv3511[:0]
			yyc3511 = true
		}
	} else if yyl3511 > 0 {

		if yyl3511 > cap(yyv3511) {
			yyrl3511, yyrt3511 = z.DecInferLen(yyl3511, z.DecBasicHandle().MaxInitLen, 64)
			yyv3511 = make([]ContainerPort, yyrl3511)
			yyc3511 = true

			yyrr3511 = len(yyv3511)
		} else if yyl3511 != len(yyv3511) {
			yyv3511 = yyv3511[:yyl3511]
			yyc3511 = true
		}
		yyj3511 := 0
		for ; yyj3511 < yyrr3511; yyj3511++ {
			if r.TryDecodeAsNil() {
				yyv3511[yyj3511] = ContainerPort{}
			} else {
				yyv3512 := &yyv3511[yyj3511]
				yyv3512.CodecDecodeSelf(d)
			}

		}
		if yyrt3511 {
			for ; yyj3511 < yyl3511; yyj3511++ {
				yyv3511 = append(yyv3511, ContainerPort{})
				if r.TryDecodeAsNil() {
					yyv3511[yyj3511] = ContainerPort{}
				} else {
					yyv3513 := &yyv3511[yyj3511]
					yyv3513.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3511 := 0; !r.CheckBreak(); yyj3511++ {
			if yyj3511 >= len(yyv3511) {
				yyv3511 = append(yyv3511, ContainerPort{}) // var yyz3511 ContainerPort
				yyc3511 = true
			}

			if yyj3511 < len(yyv3511) {
				if r.TryDecodeAsNil() {
					yyv3511[yyj3511] = ContainerPort{}
				} else {
					yyv3514 := &yyv3511[yyj3511]
					yyv3514.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3511.End()
	}
	if yyc3511 {
		*v = yyv3511
	}

}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3515 := range v {
		yy3516 := &yyv3515
		yy3516.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3517 := *v
	yyh3517, yyl3517 := z.DecSliceHelperStart()

	var yyrr3517, yyrl3517 int
	var yyc3517, yyrt3517 bool
	_, _, _ = yyc3517, yyrt3517, yyrl3517
	yyrr3517 = yyl3517

	if yyv3517 == nil {
		if yyrl3517, yyrt3517 = z.DecInferLen(yyl3517, z.DecBasicHandle().MaxInitLen, 40); yyrt3517 {
			yyrr3517 = yyrl3517
		}
		yyv3517 = make([]EnvVar, yyrl3517)
		yyc3517 = true
	}

	if yyl3517 == 0 {
		if len(yyv3517) != 0 {
			yyv3517 = yyv3517[:0]
			yyc3517 = true
		}
	} else if yyl3517 > 0 {

		if yyl3517 > cap(yyv3517) {
			yyrl3517, yyrt3517 = z.DecInferLen(yyl3517, z.DecBasicHandle().MaxInitLen, 40)
			yyv3517 = make([]EnvVar, yyrl3517)
			yyc3517 = true

			yyrr3517 = len(yyv3517)
		} else if yyl3517 != len(yyv3517) {
			yyv3517 = yyv3517[:yyl3517]
			yyc3517 = true
		}
		yyj3517 := 0
		for ; yyj3517 < yyrr3517; yyj3517++ {
			if r.TryDecodeAsNil() {
				yyv3517[yyj3517] = EnvVar{}
			} else {
				yyv3518 := &yyv3517[yyj3517]
				yyv3518.CodecDecodeSelf(d)
			}

		}
		if yyrt3517 {
			for ; yyj3517 < yyl3517; yyj3517++ {
				yyv3517 = append(yyv3517, EnvVar{})
				if r.TryDecodeAsNil() {
					yyv3517[yyj3517] = EnvVar{}
				} else {
					yyv3519 := &yyv3517[yyj3517]
					yyv3519.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3517 := 0; !r.CheckBreak(); yyj3517++ {
			if yyj3517 >= len(yyv3517) {
				yyv3517 = append(yyv3517, EnvVar{}) // var yyz3517 EnvVar
				yyc3517 = true
			}

			if yyj3517 < len(yyv3517) {
				if r.TryDecodeAsNil() {
					yyv3517[yyj3517] = EnvVar{}
				} else {
					yyv3520 := &yyv3517[yyj3517]
					yyv3520.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3517.End()
	}
	if yyc3517 {
		*v = yyv3517
	}

}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3521 := range v {
		yy3522 := &yyv3521
		yy3522.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3523 := *v
	yyh3523, yyl3523 := z.DecSliceHelperStart()

	var yyrr3523, yyrl3523 int
	var yyc3523, yyrt3523 bool
	_, _, _ = yyc3523, yyrt3523, yyrl3523
	yyrr3523 = yyl3523

	if yyv3523 == nil {
		if yyrl3523, yyrt3523 = z.DecInferLen(yyl3523, z.DecBasicHandle().MaxInitLen, 40); yyrt3523 {
			yyrr3523 = yyrl3523
		}
		yyv3523 = make([]VolumeMount, yyrl3523)
		yyc3523 = true
	}

	if yyl3523 == 0 {
		if len(yyv3523) != 0 {
			yyv3523 = yyv3523[:0]
			yyc3523 = true
		}
	} else if yyl3523 > 0 {

		if yyl3523 > cap(yyv3523) {
			yyrl3523, yyrt3523 = z.DecInferLen(yyl3523, z.DecBasicHandle().MaxInitLen, 40)
			yyv3523 = make([]VolumeMount, yyrl3523)
			yyc3523 = true

			yyrr3523 = len(yyv3523)
		} else if yyl3523 != len(yyv3523) {
			yyv3523 = yyv3523[:yyl3523]
			yyc3523 = true
		}
		yyj3523 := 0
		for ; yyj3523 < yyrr3523; yyj3523++ {
			if r.TryDecodeAsNil() {
				yyv3523[yyj3523] = VolumeMount{}
			} else {
				yyv3524 := &yyv3523[yyj3523]
				yyv3524.CodecDecodeSelf(d)
			}

		}
		if yyrt3523 {
			for ; yyj3523 < yyl3523; yyj3523++ {
				yyv3523 = append(yyv3523, VolumeMount{})
				if r.TryDecodeAsNil() {
					yyv3523[yyj3523] = VolumeMount{}
				} else {
					yyv3525 := &yyv3523[yyj3523]
					yyv3525.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3523 := 0; !r.CheckBreak(); yyj3523++ {
			if yyj3523 >= len(yyv3523) {
				yyv3523 = append(yyv3523, VolumeMount{}) // var yyz3523 VolumeMount
				yyc3523 = true
			}

			if yyj3523 < len(yyv3523) {
				if r.TryDecodeAsNil() {
					yyv3523[yyj3523] = VolumeMount{}
				} else {
					yyv3526 := &yyv3523[yyj3523]
					yyv3526.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3523.End()
	}
	if yyc3523 {
		*v = yyv3523
	}

}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3527 := range v {
		yy3528 := &yyv3527
		yy3528.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3529 := *v
	yyh3529, yyl3529 := z.DecSliceHelperStart()

	var yyrr3529, yyrl3529 int
	var yyc3529, yyrt3529 bool
	_, _, _ = yyc3529, yyrt3529, yyrl3529
	yyrr3529 = yyl3529

	if yyv3529 == nil {
		if yyrl3529, yyrt3529 = z.DecInferLen(yyl3529, z.DecBasicHandle().MaxInitLen, 144); yyrt3529 {
			yyrr3529 = yyrl3529
		}
		yyv3529 = make([]Volume, yyrl3529)
		yyc3529 = true
	}

	if yyl3529 == 0 {
		if len(yyv3529) != 0 {
			yyv3529 = yyv3529[:0]
			yyc3529 = true
		}
	} else if yyl3529 > 0 {

		if yyl3529 > cap(yyv3529) {
			yyrl3529, yyrt3529 = z.DecInferLen(yyl3529, z.DecBasicHandle().MaxInitLen, 144)
			yyv3529 = make([]Volume, yyrl3529)
			yyc3529 = true

			yyrr3529 = len(yyv3529)
		} else if yyl3529 != len(yyv3529) {
			yyv3529 = yyv3529[:yyl3529]
			yyc3529 = true
		}
		yyj3529 := 0
		for ; yyj3529 < yyrr3529; yyj3529++ {
			if r.TryDecodeAsNil() {
				yyv3529[yyj3529] = Volume{}
			} else {
				yyv3530 := &yyv3529[yyj3529]
				yyv3530.CodecDecodeSelf(d)
			}

		}
		if yyrt3529 {
			for ; yyj3529 < yyl3529; yyj3529++ {
				yyv3529 = append(yyv3529, Volume{})
				if r.TryDecodeAsNil() {
					yyv3529[yyj3529] = Volume{}
				} else {
					yyv3531 := &yyv3529[yyj3529]
					yyv3531.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3529 := 0; !r.CheckBreak(); yyj3529++ {
			if yyj3529 >= len(yyv3529) {
				yyv3529 = append(yyv3529, Volume{}) // var yyz3529 Volume
				yyc3529 = true
			}

			if yyj3529 < len(yyv3529) {
				if r.TryDecodeAsNil() {
					yyv3529[yyj3529] = Volume{}
				} else {
					yyv3532 := &yyv3529[yyj3529]
					yyv3532.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3529.End()
	}
	if yyc3529 {
		*v = yyv3529
	}

}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3533 := range v {
		yy3534 := &yyv3533
		yy3534.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3535 := *v
	yyh3535, yyl3535 := z.DecSliceHelperStart()

	var yyrr3535, yyrl3535 int
	var yyc3535, yyrt3535 bool
	_, _, _ = yyc3535, yyrt3535, yyrl3535
	yyrr3535 = yyl3535

	if yyv3535 == nil {
		if yyrl3535, yyrt3535 = z.DecInferLen(yyl3535, z.DecBasicHandle().MaxInitLen, 272); yyrt3535 {
			yyrr3535 = yyrl3535
		}
		yyv3535 = make([]Container, yyrl3535)
		yyc3535 = true
	}

	if yyl3535 == 0 {
		if len(yyv3535) != 0 {
			yyv3535 = yyv3535[:0]
			yyc3535 = true
		}
	} else if yyl3535 > 0 {

		if yyl3535 > cap(yyv3535) {
			yyrl3535, yyrt3535 = z.DecInferLen(yyl3535, z.DecBasicHandle().MaxInitLen, 272)
			yyv3535 = make([]Container, yyrl3535)
			yyc3535 = true

			yyrr3535 = len(yyv3535)
		} else if yyl3535 != len(yyv3535) {
			yyv3535 = yyv3535[:yyl3535]
			yyc3535 = true
		}
		yyj3535 := 0
		for ; yyj3535 < yyrr3535; yyj3535++ {
			if r.TryDecodeAsNil() {
				yyv3535[yyj3535] = Container{}
			} else {
				yyv3536 := &yyv3535[yyj3535]
				yyv3536.CodecDecodeSelf(d)
			}

		}
		if yyrt3535 {
			for ; yyj3535 < yyl3535; yyj3535++ {
				yyv3535 = append(yyv3535, Container{})
				if r.TryDecodeAsNil() {
					yyv3535[yyj3535] = Container{}
				} else {
					yyv3537 := &yyv3535[yyj3535]
					yyv3537.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3535 := 0; !r.CheckBreak(); yyj3535++ {
			if yyj3535 >= len(yyv3535) {
				yyv3535 = append(yyv3535, Container{}) // var yyz3535 Container
				yyc3535 = true
			}

			if yyj3535 < len(yyv3535) {
				if r.TryDecodeAsNil() {
					yyv3535[yyj3535] = Container{}
				} else {
					yyv3538 := &yyv3535[yyj3535]
					yyv3538.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3535.End()
	}
	if yyc3535 {
		*v = yyv3535
	}

}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3539 := range v {
		yy3540 := &yyv3539
		yy3540.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3541 := *v
	yyh3541, yyl3541 := z.DecSliceHelperStart()

	var yyrr3541, yyrl3541 int
	var yyc3541, yyrt3541 bool
	_, _, _ = yyc3541, yyrt3541, yyrl3541
	yyrr3541 = yyl3541

	if yyv3541 == nil {
		if yyrl3541, yyrt3541 = z.DecInferLen(yyl3541, z.DecBasicHandle().MaxInitLen, 16); yyrt3541 {
			yyrr3541 = yyrl3541
		}
		yyv3541 = make([]LocalObjectReference, yyrl3541)
		yyc3541 = true
	}

	if yyl3541 == 0 {
		if len(yyv3541) != 0 {
			yyv3541 = yyv3541[:0]
			yyc3541 = true
		}
	} else if yyl3541 > 0 {

		if yyl3541 > cap(yyv3541) {
			yyrl3541, yyrt3541 = z.DecInferLen(yyl3541, z.DecBasicHandle().MaxInitLen, 16)
			yyv3541 = make([]LocalObjectReference, yyrl3541)
			yyc3541 = true

			yyrr3541 = len(yyv3541)
		} else if yyl3541 != len(yyv3541) {
			yyv3541 = yyv3541[:yyl3541]
			yyc3541 = true
		}
		yyj3541 := 0
		for ; yyj3541 < yyrr3541; yyj3541++ {
			if r.TryDecodeAsNil() {
				yyv3541[yyj3541] = LocalObjectReference{}
			} else {
				yyv3542 := &yyv3541[yyj3541]
				yyv3542.CodecDecodeSelf(d)
			}

		}
		if yyrt3541 {
			for ; yyj3541 < yyl3541; yyj3541++ {
				yyv3541 = append(yyv3541, LocalObjectReference{})
				if r.TryDecodeAsNil() {
					yyv3541[yyj3541] = LocalObjectReference{}
				} else {
					yyv3543 := &yyv3541[yyj3541]
					yyv3543.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3541 := 0; !r.CheckBreak(); yyj3541++ {
			if yyj3541 >= len(yyv3541) {
				yyv3541 = append(yyv3541, LocalObjectReference{}) // var yyz3541 LocalObjectReference
				yyc3541 = true
			}

			if yyj3541 < len(yyv3541) {
				if r.TryDecodeAsNil() {
					yyv3541[yyj3541] = LocalObjectReference{}
				} else {
					yyv3544 := &yyv3541[yyj3541]
					yyv3544.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3541.End()
	}
	if yyc3541 {
		*v = yyv3541
	}

}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3545 := range v {
		yy3546 := &yyv3545
		yy3546.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3547 := *v
	yyh3547, yyl3547 := z.DecSliceHelperStart()

	var yyrr3547, yyrl3547 int
	var yyc3547, yyrt3547 bool
	_, _, _ = yyc3547, yyrt3547, yyrl3547
	yyrr3547 = yyl3547

	if yyv3547 == nil {
		if yyrl3547, yyrt3547 = z.DecInferLen(yyl3547, z.DecBasicHandle().MaxInitLen, 112); yyrt3547 {
			yyrr3547 = yyrl3547
		}
		yyv3547 = make([]PodCondition, yyrl3547)
		yyc3547 = true
	}

	if yyl3547 == 0 {
		if len(yyv3547) != 0 {
			yyv3547 = yyv3547[:0]
			yyc3547 = true
		}
	} else if yyl3547 > 0 {

		if yyl3547 > cap(yyv3547) {
			yyrl3547, yyrt3547 = z.DecInferLen(yyl3547, z.DecBasicHandle().MaxInitLen, 112)
			yyv3547 = make([]PodCondition, yyrl3547)
			yyc3547 = true

			yyrr3547 = len(yyv3547)
		} else if yyl3547 != len(yyv3547) {
			yyv3547 = yyv3547[:yyl3547]
			yyc3547 = true
		}
		yyj3547 := 0
		for ; yyj3547 < yyrr3547; yyj3547++ {
			if r.TryDecodeAsNil() {
				yyv3547[yyj3547] = PodCondition{}
			} else {
				yyv3548 := &yyv3547[yyj3547]
				yyv3548.CodecDecodeSelf(d)
			}

		}
		if yyrt3547 {
			for ; yyj3547 < yyl3547; yyj3547++ {
				yyv3547 = append(yyv3547, PodCondition{})
				if r.TryDecodeAsNil() {
					yyv3547[yyj3547] = PodCondition{}
				} else {
					yyv3549 := &yyv3547[yyj3547]
					yyv3549.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3547 := 0; !r.CheckBreak(); yyj3547++ {
			if yyj3547 >= len(yyv3547) {
				yyv3547 = append(yyv3547, PodCondition{}) // var yyz3547 PodCondition
				yyc3547 = true
			}

			if yyj3547 < len(yyv3547) {
				if r.TryDecodeAsNil() {
					yyv3547[yyj3547] = PodCondition{}
				} else {
					yyv3550 := &yyv3547[yyj3547]
					yyv3550.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3547.End()
	}
	if yyc3547 {
		*v = yyv3547
	}

}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3551 := range v {
		yy3552 := &yyv3551
		yy3552.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3553 := *v
	yyh3553, yyl3553 := z.DecSliceHelperStart()

	var yyrr3553, yyrl3553 int
	var yyc3553, yyrt3553 bool
	_, _, _ = yyc3553, yyrt3553, yyrl3553
	yyrr3553 = yyl3553

	if yyv3553 == nil {
		if yyrl3553, yyrt3553 = z.DecInferLen(yyl3553, z.DecBasicHandle().MaxInitLen, 128); yyrt3553 {
			yyrr3553 = yyrl3553
		}
		yyv3553 = make([]ContainerStatus, yyrl3553)
		yyc3553 = true
	}

	if yyl3553 == 0 {
		if len(yyv3553) != 0 {
			yyv3553 = yyv3553[:0]
			yyc3553 = true
		}
	} else if yyl3553 > 0 {

		if yyl3553 > cap(yyv3553) {
			yyrl3553, yyrt3553 = z.DecInferLen(yyl3553, z.DecBasicHandle().MaxInitLen, 128)
			yyv3553 = make([]ContainerStatus, yyrl3553)
			yyc3553 = true

			yyrr3553 = len(yyv3553)
		} else if yyl3553 != len(yyv3553) {
			yyv3553 = yyv3553[:yyl3553]
			yyc3553 = true
		}
		yyj3553 := 0
		for ; yyj3553 < yyrr3553; yyj3553++ {
			if r.TryDecodeAsNil() {
				yyv3553[yyj3553] = ContainerStatus{}
			} else {
				yyv3554 := &yyv3553[yyj3553]
				yyv3554.CodecDecodeSelf(d)
			}

		}
		if yyrt3553 {
			for ; yyj3553 < yyl3553; yyj3553++ {
				yyv3553 = append(yyv3553, ContainerStatus{})
				if r.TryDecodeAsNil() {
					yyv3553[yyj3553] = ContainerStatus{}
				} else {
					yyv3555 := &yyv3553[yyj3553]
					yyv3555.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3553 := 0; !r.CheckBreak(); yyj3553++ {
			if yyj3553 >= len(yyv3553) {
				yyv3553 = append(yyv3553, ContainerStatus{}) // var yyz3553 ContainerStatus
				yyc3553 = true
			}

			if yyj3553 < len(yyv3553) {
				if r.TryDecodeAsNil() {
					yyv3553[yyj3553] = ContainerStatus{}
				} else {
					yyv3556 := &yyv3553[yyj3553]
					yyv3556.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3553.End()
	}
	if yyc3553 {
		*v = yyv3553
	}

}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3557 := range v {
		yy3558 := &yyv3557
		yy3558.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3559 := *v
	yyh3559, yyl3559 := z.DecSliceHelperStart()

	var yyrr3559, yyrl3559 int
	var yyc3559, yyrt3559 bool
	_, _, _ = yyc3559, yyrt3559, yyrl3559
	yyrr3559 = yyl3559

	if yyv3559 == nil {
		if yyrl3559, yyrt3559 = z.DecInferLen(yyl3559, z.DecBasicHandle().MaxInitLen, 520); yyrt3559 {
			yyrr3559 = yyrl3559
		}
		yyv3559 = make([]Pod, yyrl3559)
		yyc3559 = true
	}

	if yyl3559 == 0 {
		if len(yyv3559) != 0 {
			yyv3559 = yyv3559[:0]
			yyc3559 = true
		}
	} else if yyl3559 > 0 {

		if yyl3559 > cap(yyv3559) {
			yyrl3559, yyrt3559 = z.DecInferLen(yyl3559, z.DecBasicHandle().MaxInitLen, 520)
			yyv3559 = make([]Pod, yyrl3559)
			yyc3559 = true

			yyrr3559 = len(yyv3559)
		} else if yyl3559 != len(yyv3559) {
			yyv3559 = yyv3559[:yyl3559]
			yyc3559 = true
		}
		yyj3559 := 0
		for ; yyj3559 < yyrr3559; yyj3559++ {
			if r.TryDecodeAsNil() {
				yyv3559[yyj3559] = Pod{}
			} else {
				yyv3560 := &yyv3559[yyj3559]
				yyv3560.CodecDecodeSelf(d)
			}

		}
		if yyrt3559 {
			for ; yyj3559 < yyl3559; yyj3559++ {
				yyv3559 = append(yyv3559, Pod{})
				if r.TryDecodeAsNil() {
					yyv3559[yyj3559] = Pod{}
				} else {
					yyv3561 := &yyv3559[yyj3559]
					yyv3561.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3559 := 0; !r.CheckBreak(); yyj3559++ {
			if yyj3559 >= len(yyv3559) {
				yyv3559 = append(yyv3559, Pod{}) // var yyz3559 Pod
				yyc3559 = true
			}

			if yyj3559 < len(yyv3559) {
				if r.TryDecodeAsNil() {
					yyv3559[yyj3559] = Pod{}
				} else {
					yyv3562 := &yyv3559[yyj3559]
					yyv3562.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3559.End()
	}
	if yyc3559 {
		*v = yyv3559
	}

}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3563 := range v {
		yy3564 := &yyv3563
		yy3564.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3565 := *v
	yyh3565, yyl3565 := z.DecSliceHelperStart()

	var yyrr3565, yyrl3565 int
	var yyc3565, yyrt3565 bool
	_, _, _ = yyc3565, yyrt3565, yyrl3565
	yyrr3565 = yyl3565

	if yyv3565 == nil {
		if yyrl3565, yyrt3565 = z.DecInferLen(yyl3565, z.DecBasicHandle().MaxInitLen, 544); yyrt3565 {
			yyrr3565 = yyrl3565
		}
		yyv3565 = make([]PodTemplate, yyrl3565)
		yyc3565 = true
	}

	if yyl3565 == 0 {
		if len(yyv3565) != 0 {
			yyv3565 = yyv3565[:0]
			yyc3565 = true
		}
	} else if yyl3565 > 0 {

		if yyl3565 > cap(yyv3565) {
			yyrl3565, yyrt3565 = z.DecInferLen(yyl3565, z.DecBasicHandle().MaxInitLen, 544)
			yyv3565 = make([]PodTemplate, yyrl3565)
			yyc3565 = true

			yyrr3565 = len(yyv3565)
		} else if yyl3565 != len(yyv3565) {
			yyv3565 = yyv3565[:yyl3565]
			yyc3565 = true
		}
		yyj3565 := 0
		for ; yyj3565 < yyrr3565; yyj3565++ {
			if r.TryDecodeAsNil() {
				yyv3565[yyj3565] = PodTemplate{}
			} else {
				yyv3566 := &yyv3565[yyj3565]
				yyv3566.CodecDecodeSelf(d)
			}

		}
		if yyrt3565 {
			for ; yyj3565 < yyl3565; yyj3565++ {
				yyv3565 = append(yyv3565, PodTemplate{})
				if r.TryDecodeAsNil() {
					yyv3565[yyj3565] = PodTemplate{}
				} else {
					yyv3567 := &yyv3565[yyj3565]
					yyv3567.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3565 := 0; !r.CheckBreak(); yyj3565++ {
			if yyj3565 >= len(yyv3565) {
				yyv3565 = append(yyv3565, PodTemplate{}) // var yyz3565 PodTemplate
				yyc3565 = true
			}

			if yyj3565 < len(yyv3565) {
				if r.TryDecodeAsNil() {
					yyv3565[yyj3565] = PodTemplate{}
				} else {
					yyv3568 := &yyv3565[yyj3565]
					yyv3568.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3565.End()
	}
	if yyc3565 {
		*v = yyv3565
	}

}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3569 := range v {
		yy3570 := &yyv3569
		yy3570.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3571 := *v
	yyh3571, yyl3571 := z.DecSliceHelperStart()

	var yyrr3571, yyrl3571 int
	var yyc3571, yyrt3571 bool
	_, _, _ = yyc3571, yyrt3571, yyrl3571
	yyrr3571 = yyl3571

	if yyv3571 == nil {
		if yyrl3571, yyrt3571 = z.DecInferLen(yyl3571, z.DecBasicHandle().MaxInitLen, 232); yyrt3571 {
			yyrr3571 = yyrl3571
		}
		yyv3571 = make([]ReplicationController, yyrl3571)
		yyc3571 = true
	}

	if yyl3571 == 0 {
		if len(yyv3571) != 0 {
			yyv3571 = yyv3571[:0]
			yyc3571 = true
		}
	} else if yyl3571 > 0 {

		if yyl3571 > cap(yyv3571) {
			yyrl3571, yyrt3571 = z.DecInferLen(yyl3571, z.DecBasicHandle().MaxInitLen, 232)
			yyv3571 = make([]ReplicationController, yyrl3571)
			yyc3571 = true

			yyrr3571 = len(yyv3571)
		} else if yyl3571 != len(yyv3571) {
			yyv3571 = yyv3571[:yyl3571]
			yyc3571 = true
		}
		yyj3571 := 0
		for ; yyj3571 < yyrr3571; yyj3571++ {
			if r.TryDecodeAsNil() {
				yyv3571[yyj3571] = ReplicationController{}
			} else {
				yyv3572 := &yyv3571[yyj3571]
				yyv3572.CodecDecodeSelf(d)
			}

		}
		if yyrt3571 {
			for ; yyj3571 < yyl3571; yyj3571++ {
				yyv3571 = append(yyv3571, ReplicationController{})
				if r.TryDecodeAsNil() {
					yyv3571[yyj3571] = ReplicationController{}
				} else {
					yyv3573 := &yyv3571[yyj3571]
					yyv3573.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3571 := 0; !r.CheckBreak(); yyj3571++ {
			if yyj3571 >= len(yyv3571) {
				yyv3571 = append(yyv3571, ReplicationController{}) // var yyz3571 ReplicationController
				yyc3571 = true
			}

			if yyj3571 < len(yyv3571) {
				if r.TryDecodeAsNil() {
					yyv3571[yyj3571] = ReplicationController{}
				} else {
					yyv3574 := &yyv3571[yyj3571]
					yyv3574.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3571.End()
	}
	if yyc3571 {
		*v = yyv3571
	}

}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3575 := range v {
		yy3576 := &yyv3575
		yy3576.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3577 := *v
	yyh3577, yyl3577 := z.DecSliceHelperStart()

	var yyrr3577, yyrl3577 int
	var yyc3577, yyrt3577 bool
	_, _, _ = yyc3577, yyrt3577, yyrl3577
	yyrr3577 = yyl3577

	if yyv3577 == nil {
		if yyrl3577, yyrt3577 = z.DecInferLen(yyl3577, z.DecBasicHandle().MaxInitLen, 32); yyrt3577 {
			yyrr3577 = yyrl3577
		}
		yyv3577 = make([]LoadBalancerIngress, yyrl3577)
		yyc3577 = true
	}

	if yyl3577 == 0 {
		if len(yyv3577) != 0 {
			yyv3577 = yyv3577[:0]
			yyc3577 = true
		}
	} else if yyl3577 > 0 {

		if yyl3577 > cap(yyv3577) {
			yyrl3577, yyrt3577 = z.DecInferLen(yyl3577, z.DecBasicHandle().MaxInitLen, 32)
			yyv3577 = make([]LoadBalancerIngress, yyrl3577)
			yyc3577 = true

			yyrr3577 = len(yyv3577)
		} else if yyl3577 != len(yyv3577) {
			yyv3577 = yyv3577[:yyl3577]
			yyc3577 = true
		}
		yyj3577 := 0
		for ; yyj3577 < yyrr3577; yyj3577++ {
			if r.TryDecodeAsNil() {
				yyv3577[yyj3577] = LoadBalancerIngress{}
			} else {
				yyv3578 := &yyv3577[yyj3577]
				yyv3578.CodecDecodeSelf(d)
			}

		}
		if yyrt3577 {
			for ; yyj3577 < yyl3577; yyj3577++ {
				yyv3577 = append(yyv3577, LoadBalancerIngress{})
				if r.TryDecodeAsNil() {
					yyv3577[yyj3577] = LoadBalancerIngress{}
				} else {
					yyv3579 := &yyv3577[yyj3577]
					yyv3579.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3577 := 0; !r.CheckBreak(); yyj3577++ {
			if yyj3577 >= len(yyv3577) {
				yyv3577 = append(yyv3577, LoadBalancerIngress{}) // var yyz3577 LoadBalancerIngress
				yyc3577 = true
			}

			if yyj3577 < len(yyv3577) {
				if r.TryDecodeAsNil() {
					yyv3577[yyj3577] = LoadBalancerIngress{}
				} else {
					yyv3580 := &yyv3577[yyj3577]
					yyv3580.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3577.End()
	}
	if yyc3577 {
		*v = yyv3577
	}

}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3581 := range v {
		yy3582 := &yyv3581
		yy3582.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3583 := *v
	yyh3583, yyl3583 := z.DecSliceHelperStart()

	var yyrr3583, yyrl3583 int
	var yyc3583, yyrt3583 bool
	_, _, _ = yyc3583, yyrt3583, yyrl3583
	yyrr3583 = yyl3583

	if yyv3583 == nil {
		if yyrl3583, yyrt3583 = z.DecInferLen(yyl3583, z.DecBasicHandle().MaxInitLen, 80); yyrt3583 {
			yyrr3583 = yyrl3583
		}
		yyv3583 = make([]ServicePort, yyrl3583)
		yyc3583 = true
	}

	if yyl3583 == 0 {
		if len(yyv3583) != 0 {
			yyv3583 = yyv3583[:0]
			yyc3583 = true
		}
	} else if yyl3583 > 0 {

		if yyl3583 > cap(yyv3583) {
			yyrl3583, yyrt3583 = z.DecInferLen(yyl3583, z.DecBasicHandle().MaxInitLen, 80)
			yyv3583 = make([]ServicePort, yyrl3583)
			yyc3583 = true

			yyrr3583 = len(yyv3583)
		} else if yyl3583 != len(yyv3583) {
			yyv3583 = yyv3583[:yyl3583]
			yyc3583 = true
		}
		yyj3583 := 0
		for ; yyj3583 < yyrr3583; yyj3583++ {
			if r.TryDecodeAsNil() {
				yyv3583[yyj3583] = ServicePort{}
			} else {
				yyv3584 := &yyv3583[yyj3583]
				yyv3584.CodecDecodeSelf(d)
			}

		}
		if yyrt3583 {
			for ; yyj3583 < yyl3583; yyj3583++ {
				yyv3583 = append(yyv3583, ServicePort{})
				if r.TryDecodeAsNil() {
					yyv3583[yyj3583] = ServicePort{}
				} else {
					yyv3585 := &yyv3583[yyj3583]
					yyv3585.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3583 := 0; !r.CheckBreak(); yyj3583++ {
			if yyj3583 >= len(yyv3583) {
				yyv3583 = append(yyv3583, ServicePort{}) // var yyz3583 ServicePort
				yyc3583 = true
			}

			if yyj3583 < len(yyv3583) {
				if r.TryDecodeAsNil() {
					yyv3583[yyj3583] = ServicePort{}
				} else {
					yyv3586 := &yyv3583[yyj3583]
					yyv3586.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3583.End()
	}
	if yyc3583 {
		*v = yyv3583
	}

}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3587 := range v {
		yy3588 := &yyv3587
		yy3588.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3589 := *v
	yyh3589, yyl3589 := z.DecSliceHelperStart()

	var yyrr3589, yyrl3589 int
	var yyc3589, yyrt3589 bool
	_, _, _ = yyc3589, yyrt3589, yyrl3589
	yyrr3589 = yyl3589

	if yyv3589 == nil {
		if yyrl3589, yyrt3589 = z.DecInferLen(yyl3589, z.DecBasicHandle().MaxInitLen, 360); yyrt3589 {
			yyrr3589 = yyrl3589
		}
		yyv3589 = make([]Service, yyrl3589)
		yyc3589 = true
	}

	if yyl3589 == 0 {
		if len(yyv3589) != 0 {
			yyv3589 = yyv3589[:0]
			yyc3589 = true
		}
	} else if yyl3589 > 0 {

		if yyl3589 > cap(yyv3589) {
			yyrl3589, yyrt3589 = z.DecInferLen(yyl3589, z.DecBasicHandle().MaxInitLen, 360)
			yyv3589 = make([]Service, yyrl3589)
			yyc3589 = true

			yyrr3589 = len(yyv3589)
		} else if yyl3589 != len(yyv3589) {
			yyv3589 = yyv3589[:yyl3589]
			yyc3589 = true
		}
		yyj3589 := 0
		for ; yyj3589 < yyrr3589; yyj3589++ {
			if r.TryDecodeAsNil() {
				yyv3589[yyj3589] = Service{}
			} else {
				yyv3590 := &yyv3589[yyj3589]
				yyv3590.CodecDecodeSelf(d)
			}

		}
		if yyrt3589 {
			for ; yyj3589 < yyl3589; yyj3589++ {
				yyv3589 = append(yyv3589, Service{})
				if r.TryDecodeAsNil() {
					yyv3589[yyj3589] = Service{}
				} else {
					yyv3591 := &yyv3589[yyj3589]
					yyv3591.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3589 := 0; !r.CheckBreak(); yyj3589++ {
			if yyj3589 >= len(yyv3589) {
				yyv3589 = append(yyv3589, Service{}) // var yyz3589 Service
				yyc3589 = true
			}

			if yyj3589 < len(yyv3589) {
				if r.TryDecodeAsNil() {
					yyv3589[yyj3589] = Service{}
				} else {
					yyv3592 := &yyv3589[yyj3589]
					yyv3592.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3589.End()
	}
	if yyc3589 {
		*v = yyv3589
	}

}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3593 := range v {
		yy3594 := &yyv3593
		yy3594.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3595 := *v
	yyh3595, yyl3595 := z.DecSliceHelperStart()

	var yyrr3595, yyrl3595 int
	var yyc3595, yyrt3595 bool
	_, _, _ = yyc3595, yyrt3595, yyrl3595
	yyrr3595 = yyl3595

	if yyv3595 == nil {
		if yyrl3595, yyrt3595 = z.DecInferLen(yyl3595, z.DecBasicHandle().MaxInitLen, 112); yyrt3595 {
			yyrr3595 = yyrl3595
		}
		yyv3595 = make([]ObjectReference, yyrl3595)
		yyc3595 = true
	}

	if yyl3595 == 0 {
		if len(yyv3595) != 0 {
			yyv3595 = yyv3595[:0]
			yyc3595 = true
		}
	} else if yyl3595 > 0 {

		if yyl3595 > cap(yyv3595) {
			yyrl3595, yyrt3595 = z.DecInferLen(yyl3595, z.DecBasicHandle().MaxInitLen, 112)
			yyv3595 = make([]ObjectReference, yyrl3595)
			yyc3595 = true

			yyrr3595 = len(yyv3595)
		} else if yyl3595 != len(yyv3595) {
			yyv3595 = yyv3595[:yyl3595]
			yyc3595 = true
		}
		yyj3595 := 0
		for ; yyj3595 < yyrr3595; yyj3595++ {
			if r.TryDecodeAsNil() {
				yyv3595[yyj3595] = ObjectReference{}
			} else {
				yyv3596 := &yyv3595[yyj3595]
				yyv3596.CodecDecodeSelf(d)
			}

		}
		if yyrt3595 {
			for ; yyj3595 < yyl3595; yyj3595++ {
				yyv3595 = append(yyv3595, ObjectReference{})
				if r.TryDecodeAsNil() {
					yyv3595[yyj3595] = ObjectReference{}
				} else {
					yyv3597 := &yyv3595[yyj3595]
					yyv3597.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3595 := 0; !r.CheckBreak(); yyj3595++ {
			if yyj3595 >= len(yyv3595) {
				yyv3595 = append(yyv3595, ObjectReference{}) // var yyz3595 ObjectReference
				yyc3595 = true
			}

			if yyj3595 < len(yyv3595) {
				if r.TryDecodeAsNil() {
					yyv3595[yyj3595] = ObjectReference{}
				} else {
					yyv3598 := &yyv3595[yyj3595]
					yyv3598.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3595.End()
	}
	if yyc3595 {
		*v = yyv3595
	}

}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3599 := range v {
		yy3600 := &yyv3599
		yy3600.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3601 := *v
	yyh3601, yyl3601 := z.DecSliceHelperStart()

	var yyrr3601, yyrl3601 int
	var yyc3601, yyrt3601 bool
	_, _, _ = yyc3601, yyrt3601, yyrl3601
	yyrr3601 = yyl3601

	if yyv3601 == nil {
		if yyrl3601, yyrt3601 = z.DecInferLen(yyl3601, z.DecBasicHandle().MaxInitLen, 240); yyrt3601 {
			yyrr3601 = yyrl3601
		}
		yyv3601 = make([]ServiceAccount, yyrl3601)
		yyc3601 = true
	}

	if yyl3601 == 0 {
		if len(yyv3601) != 0 {
			yyv3601 = yyv3601[:0]
			yyc3601 = true
		}
	} else if yyl3601 > 0 {

		if yyl3601 > cap(yyv3601) {
			yyrl3601, yyrt3601 = z.DecInferLen(yyl3601, z.DecBasicHandle().MaxInitLen, 240)
			yyv3601 = make([]ServiceAccount, yyrl3601)
			yyc3601 = true

			yyrr3601 = len(yyv3601)
		} else if yyl3601 != len(yyv3601) {
			yyv3601 = yyv3601[:yyl3601]
			yyc3601 = true
		}
		yyj3601 := 0
		for ; yyj3601 < yyrr3601; yyj3601++ {
			if r.TryDecodeAsNil() {
				yyv3601[yyj3601] = ServiceAccount{}
			} else {
				yyv3602 := &yyv3601[yyj3601]
				yyv3602.CodecDecodeSelf(d)
			}

		}
		if yyrt3601 {
			for ; yyj3601 < yyl3601; yyj3601++ {
				yyv3601 = append(yyv3601, ServiceAccount{})
				if r.TryDecodeAsNil() {
					yyv3601[yyj3601] = ServiceAccount{}
				} else {
					yyv3603 := &yyv3601[yyj3601]
					yyv3603.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3601 := 0; !r.CheckBreak(); yyj3601++ {
			if yyj3601 >= len(yyv3601) {
				yyv3601 = append(yyv3601, ServiceAccount{}) // var yyz3601 ServiceAccount
				yyc3601 = true
			}

			if yyj3601 < len(yyv3601) {
				if r.TryDecodeAsNil() {
					yyv3601[yyj3601] = ServiceAccount{}
				} else {
					yyv3604 := &yyv3601[yyj3601]
					yyv3604.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3601.End()
	}
	if yyc3601 {
		*v = yyv3601
	}

}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3605 := range v {
		yy3606 := &yyv3605
		yy3606.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3607 := *v
	yyh3607, yyl3607 := z.DecSliceHelperStart()

	var yyrr3607, yyrl3607 int
	var yyc3607, yyrt3607 bool
	_, _, _ = yyc3607, yyrt3607, yyrl3607
	yyrr3607 = yyl3607

	if yyv3607 == nil {
		if yyrl3607, yyrt3607 = z.DecInferLen(yyl3607, z.DecBasicHandle().MaxInitLen, 72); yyrt3607 {
			yyrr3607 = yyrl3607
		}
		yyv3607 = make([]EndpointSubset, yyrl3607)
		yyc3607 = true
	}

	if yyl3607 == 0 {
		if len(yyv3607) != 0 {
			yyv3607 = yyv3607[:0]
			yyc3607 = true
		}
	} else if yyl3607 > 0 {

		if yyl3607 > cap(yyv3607) {
			yyrl3607, yyrt3607 = z.DecInferLen(yyl3607, z.DecBasicHandle().MaxInitLen, 72)
			yyv3607 = make([]EndpointSubset, yyrl3607)
			yyc3607 = true

			yyrr3607 = len(yyv3607)
		} else if yyl3607 != len(yyv3607) {
			yyv3607 = yyv3607[:yyl3607]
			yyc3607 = true
		}
		yyj3607 := 0
		for ; yyj3607 < yyrr3607; yyj3607++ {
			if r.TryDecodeAsNil() {
				yyv3607[yyj3607] = EndpointSubset{}
			} else {
				yyv3608 := &yyv3607[yyj3607]
				yyv3608.CodecDecodeSelf(d)
			}

		}
		if yyrt3607 {
			for ; yyj3607 < yyl3607; yyj3607++ {
				yyv3607 = append(yyv3607, EndpointSubset{})
				if r.TryDecodeAsNil() {
					yyv3607[yyj3607] = EndpointSubset{}
				} else {
					yyv3609 := &yyv3607[yyj3607]
					yyv3609.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3607 := 0; !r.CheckBreak(); yyj3607++ {
			if yyj3607 >= len(yyv3607) {
				yyv3607 = append(yyv3607, EndpointSubset{}) // var yyz3607 EndpointSubset
				yyc3607 = true
			}

			if yyj3607 < len(yyv3607) {
				if r.TryDecodeAsNil() {
					yyv3607[yyj3607] = EndpointSubset{}
				} else {
					yyv3610 := &yyv3607[yyj3607]
					yyv3610.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3607.End()
	}
	if yyc3607 {
		*v = yyv3607
	}

}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3611 := range v {
		yy3612 := &yyv3611
		yy3612.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3613 := *v
	yyh3613, yyl3613 := z.DecSliceHelperStart()

	var yyrr3613, yyrl3613 int
	var yyc3613, yyrt3613 bool
	_, _, _ = yyc3613, yyrt3613, yyrl3613
	yyrr3613 = yyl3613

	if yyv3613 == nil {
		if yyrl3613, yyrt3613 = z.DecInferLen(yyl3613, z.DecBasicHandle().MaxInitLen, 24); yyrt3613 {
			yyrr3613 = yyrl3613
		}
		yyv3613 = make([]EndpointAddress, yyrl3613)
		yyc3613 = true
	}

	if yyl3613 == 0 {
		if len(yyv3613) != 0 {
			yyv3613 = yyv3613[:0]
			yyc3613 = true
		}
	} else if yyl3613 > 0 {

		if yyl3613 > cap(yyv3613) {
			yyrl3613, yyrt3613 = z.DecInferLen(yyl3613, z.DecBasicHandle().MaxInitLen, 24)
			yyv3613 = make([]EndpointAddress, yyrl3613)
			yyc3613 = true

			yyrr3613 = len(yyv3613)
		} else if yyl3613 != len(yyv3613) {
			yyv3613 = yyv3613[:yyl3613]
			yyc3613 = true
		}
		yyj3613 := 0
		for ; yyj3613 < yyrr3613; yyj3613++ {
			if r.TryDecodeAsNil() {
				yyv3613[yyj3613] = EndpointAddress{}
			} else {
				yyv3614 := &yyv3613[yyj3613]
				yyv3614.CodecDecodeSelf(d)
			}

		}
		if yyrt3613 {
			for ; yyj3613 < yyl3613; yyj3613++ {
				yyv3613 = append(yyv3613, EndpointAddress{})
				if r.TryDecodeAsNil() {
					yyv3613[yyj3613] = EndpointAddress{}
				} else {
					yyv3615 := &yyv3613[yyj3613]
					yyv3615.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3613 := 0; !r.CheckBreak(); yyj3613++ {
			if yyj3613 >= len(yyv3613) {
				yyv3613 = append(yyv3613, EndpointAddress{}) // var yyz3613 EndpointAddress
				yyc3613 = true
			}

			if yyj3613 < len(yyv3613) {
				if r.TryDecodeAsNil() {
					yyv3613[yyj3613] = EndpointAddress{}
				} else {
					yyv3616 := &yyv3613[yyj3613]
					yyv3616.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3613.End()
	}
	if yyc3613 {
		*v = yyv3613
	}

}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3617 := range v {
		yy3618 := &yyv3617
		yy3618.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3619 := *v
	yyh3619, yyl3619 := z.DecSliceHelperStart()

	var yyrr3619, yyrl3619 int
	var yyc3619, yyrt3619 bool
	_, _, _ = yyc3619, yyrt3619, yyrl3619
	yyrr3619 = yyl3619

	if yyv3619 == nil {
		if yyrl3619, yyrt3619 = z.DecInferLen(yyl3619, z.DecBasicHandle().MaxInitLen, 40); yyrt3619 {
			yyrr3619 = yyrl3619
		}
		yyv3619 = make([]EndpointPort, yyrl3619)
		yyc3619 = true
	}

	if yyl3619 == 0 {
		if len(yyv3619) != 0 {
			yyv3619 = yyv3619[:0]
			yyc3619 = true
		}
	} else if yyl3619 > 0 {

		if yyl3619 > cap(yyv3619) {
			yyrl3619, yyrt3619 = z.DecInferLen(yyl3619, z.DecBasicHandle().MaxInitLen, 40)
			yyv3619 = make([]EndpointPort, yyrl3619)
			yyc3619 = true

			yyrr3619 = len(yyv3619)
		} else if yyl3619 != len(yyv3619) {
			yyv3619 = yyv3619[:yyl3619]
			yyc3619 = true
		}
		yyj3619 := 0
		for ; yyj3619 < yyrr3619; yyj3619++ {
			if r.TryDecodeAsNil() {
				yyv3619[yyj3619] = EndpointPort{}
			} else {
				yyv3620 := &yyv3619[yyj3619]
				yyv3620.CodecDecodeSelf(d)
			}

		}
		if yyrt3619 {
			for ; yyj3619 < yyl3619; yyj3619++ {
				yyv3619 = append(yyv3619, EndpointPort{})
				if r.TryDecodeAsNil() {
					yyv3619[yyj3619] = EndpointPort{}
				} else {
					yyv3621 := &yyv3619[yyj3619]
					yyv3621.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3619 := 0; !r.CheckBreak(); yyj3619++ {
			if yyj3619 >= len(yyv3619) {
				yyv3619 = append(yyv3619, EndpointPort{}) // var yyz3619 EndpointPort
				yyc3619 = true
			}

			if yyj3619 < len(yyv3619) {
				if r.TryDecodeAsNil() {
					yyv3619[yyj3619] = EndpointPort{}
				} else {
					yyv3622 := &yyv3619[yyj3619]
					yyv3622.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3619.End()
	}
	if yyc3619 {
		*v = yyv3619
	}

}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3623 := range v {
		yy3624 := &yyv3623
		yy3624.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3625 := *v
	yyh3625, yyl3625 := z.DecSliceHelperStart()

	var yyrr3625, yyrl3625 int
	var yyc3625, yyrt3625 bool
	_, _, _ = yyc3625, yyrt3625, yyrl3625
	yyrr3625 = yyl3625

	if yyv3625 == nil {
		if yyrl3625, yyrt3625 = z.DecInferLen(yyl3625, z.DecBasicHandle().MaxInitLen, 216); yyrt3625 {
			yyrr3625 = yyrl3625
		}
		yyv3625 = make([]Endpoints, yyrl3625)
		yyc3625 = true
	}

	if yyl3625 == 0 {
		if len(yyv3625) != 0 {
			yyv3625 = yyv3625[:0]
			yyc3625 = true
		}
	} else if yyl3625 > 0 {

		if yyl3625 > cap(yyv3625) {
			yyrl3625, yyrt3625 = z.DecInferLen(yyl3625, z.DecBasicHandle().MaxInitLen, 216)
			yyv3625 = make([]Endpoints, yyrl3625)
			yyc3625 = true

			yyrr3625 = len(yyv3625)
		} else if yyl3625 != len(yyv3625) {
			yyv3625 = yyv3625[:yyl3625]
			yyc3625 = true
		}
		yyj3625 := 0
		for ; yyj3625 < yyrr3625; yyj3625++ {
			if r.TryDecodeAsNil() {
				yyv3625[yyj3625] = Endpoints{}
			} else {
				yyv3626 := &yyv3625[yyj3625]
				yyv3626.CodecDecodeSelf(d)
			}

		}
		if yyrt3625 {
			for ; yyj3625 < yyl3625; yyj3625++ {
				yyv3625 = append(yyv3625, Endpoints{})
				if r.TryDecodeAsNil() {
					yyv3625[yyj3625] = Endpoints{}
				} else {
					yyv3627 := &yyv3625[yyj3625]
					yyv3627.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3625 := 0; !r.CheckBreak(); yyj3625++ {
			if yyj3625 >= len(yyv3625) {
				yyv3625 = append(yyv3625, Endpoints{}) // var yyz3625 Endpoints
				yyc3625 = true
			}

			if yyj3625 < len(yyv3625) {
				if r.TryDecodeAsNil() {
					yyv3625[yyj3625] = Endpoints{}
				} else {
					yyv3628 := &yyv3625[yyj3625]
					yyv3628.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3625.End()
	}
	if yyc3625 {
		*v = yyv3625
	}

}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3629 := range v {
		yy3630 := &yyv3629
		yy3630.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3631 := *v
	yyh3631, yyl3631 := z.DecSliceHelperStart()

	var yyrr3631, yyrl3631 int
	var yyc3631, yyrt3631 bool
	_, _, _ = yyc3631, yyrt3631, yyrl3631
	yyrr3631 = yyl3631

	if yyv3631 == nil {
		if yyrl3631, yyrt3631 = z.DecInferLen(yyl3631, z.DecBasicHandle().MaxInitLen, 112); yyrt3631 {
			yyrr3631 = yyrl3631
		}
		yyv3631 = make([]NodeCondition, yyrl3631)
		yyc3631 = true
	}

	if yyl3631 == 0 {
		if len(yyv3631) != 0 {
			yyv3631 = yyv3631[:0]
			yyc3631 = true
		}
	} else if yyl3631 > 0 {

		if yyl3631 > cap(yyv3631) {
			yyrl3631, yyrt3631 = z.DecInferLen(yyl3631, z.DecBasicHandle().MaxInitLen, 112)
			yyv3631 = make([]NodeCondition, yyrl3631)
			yyc3631 = true

			yyrr3631 = len(yyv3631)
		} else if yyl3631 != len(yyv3631) {
			yyv3631 = yyv3631[:yyl3631]
			yyc3631 = true
		}
		yyj3631 := 0
		for ; yyj3631 < yyrr3631; yyj3631++ {
			if r.TryDecodeAsNil() {
				yyv3631[yyj3631] = NodeCondition{}
			} else {
				yyv3632 := &yyv3631[yyj3631]
				yyv3632.CodecDecodeSelf(d)
			}

		}
		if yyrt3631 {
			for ; yyj3631 < yyl3631; yyj3631++ {
				yyv3631 = append(yyv3631, NodeCondition{})
				if r.TryDecodeAsNil() {
					yyv3631[yyj3631] = NodeCondition{}
				} else {
					yyv3633 := &yyv3631[yyj3631]
					yyv3633.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3631 := 0; !r.CheckBreak(); yyj3631++ {
			if yyj3631 >= len(yyv3631) {
				yyv3631 = append(yyv3631, NodeCondition{}) // var yyz3631 NodeCondition
				yyc3631 = true
			}

			if yyj3631 < len(yyv3631) {
				if r.TryDecodeAsNil() {
					yyv3631[yyj3631] = NodeCondition{}
				} else {
					yyv3634 := &yyv3631[yyj3631]
					yyv3634.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3631.End()
	}
	if yyc3631 {
		*v = yyv3631
	}

}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3635 := range v {
		yy3636 := &yyv3635
		yy3636.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3637 := *v
	yyh3637, yyl3637 := z.DecSliceHelperStart()

	var yyrr3637, yyrl3637 int
	var yyc3637, yyrt3637 bool
	_, _, _ = yyc3637, yyrt3637, yyrl3637
	yyrr3637 = yyl3637

	if yyv3637 == nil {
		if yyrl3637, yyrt3637 = z.DecInferLen(yyl3637, z.DecBasicHandle().MaxInitLen, 32); yyrt3637 {
			yyrr3637 = yyrl3637
		}
		yyv3637 = make([]NodeAddress, yyrl3637)
		yyc3637 = true
	}

	if yyl3637 == 0 {
		if len(yyv3637) != 0 {
			yyv3637 = yyv3637[:0]
			yyc3637 = true
		}
	} else if yyl3637 > 0 {

		if yyl3637 > cap(yyv3637) {
			yyrl3637, yyrt3637 = z.DecInferLen(yyl3637, z.DecBasicHandle().MaxInitLen, 32)
			yyv3637 = make([]NodeAddress, yyrl3637)
			yyc3637 = true

			yyrr3637 = len(yyv3637)
		} else if yyl3637 != len(yyv3637) {
			yyv3637 = yyv3637[:yyl3637]
			yyc3637 = true
		}
		yyj3637 := 0
		for ; yyj3637 < yyrr3637; yyj3637++ {
			if r.TryDecodeAsNil() {
				yyv3637[yyj3637] = NodeAddress{}
			} else {
				yyv3638 := &yyv3637[yyj3637]
				yyv3638.CodecDecodeSelf(d)
			}

		}
		if yyrt3637 {
			for ; yyj3637 < yyl3637; yyj3637++ {
				yyv3637 = append(yyv3637, NodeAddress{})
				if r.TryDecodeAsNil() {
					yyv3637[yyj3637] = NodeAddress{}
				} else {
					yyv3639 := &yyv3637[yyj3637]
					yyv3639.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3637 := 0; !r.CheckBreak(); yyj3637++ {
			if yyj3637 >= len(yyv3637) {
				yyv3637 = append(yyv3637, NodeAddress{}) // var yyz3637 NodeAddress
				yyc3637 = true
			}

			if yyj3637 < len(yyv3637) {
				if r.TryDecodeAsNil() {
					yyv3637[yyj3637] = NodeAddress{}
				} else {
					yyv3640 := &yyv3637[yyj3637]
					yyv3640.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3637.End()
	}
	if yyc3637 {
		*v = yyv3637
	}

}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3641, yyv3641 := range v {
		yyk3641.CodecEncodeSelf(e)
		yy3642 := &yyv3641
		yym3643 := z.EncBinary()
		_ = yym3643
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3642) {
		} else if !yym3643 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3642)
		} else {
			z.EncFallback(yy3642)
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3644 := *v
	yyl3644 := r.ReadMapStart()
	yybh3644 := z.DecBasicHandle()
	if yyv3644 == nil {
		yyrl3644, _ := z.DecInferLen(yyl3644, yybh3644.MaxInitLen, 40)
		yyv3644 = make(map[ResourceName]pkg3_resource.Quantity, yyrl3644)
		*v = yyv3644
	}
	var yymk3644 ResourceName
	var yymv3644 pkg3_resource.Quantity
	var yymg3644 bool
	if yybh3644.MapValueReset {
		yymg3644 = true
	}
	if yyl3644 > 0 {
		for yyj3644 := 0; yyj3644 < yyl3644; yyj3644++ {
			if r.TryDecodeAsNil() {
				yymk3644 = ""
			} else {
				yymk3644 = ResourceName(r.DecodeString())
			}

			if yymg3644 {
				yymv3644 = yyv3644[yymk3644]
			} else {
				yymv3644 = pkg3_resource.Quantity{}
			}
			if r.TryDecodeAsNil() {
				yymv3644 = pkg3_resource.Quantity{}
			} else {
				yyv3646 := &yymv3644
				yym3647 := z.DecBinary()
				_ = yym3647
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3646) {
				} else if !yym3647 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3646)
				} else {
					z.DecFallback(yyv3646, false)
				}
			}

			if yyv3644 != nil {
				yyv3644[yymk3644] = yymv3644
			}
		}
	} else if yyl3644 < 0 {
		for yyj3644 := 0; !r.CheckBreak(); yyj3644++ {
			if r.TryDecodeAsNil() {
				yymk3644 = ""
			} else {
				yymk3644 = ResourceName(r.DecodeString())
			}

			if yymg3644 {
				yymv3644 = yyv3644[yymk3644]
			} else {
				yymv3644 = pkg3_resource.Quantity{}
			}
			if r.TryDecodeAsNil() {
				yymv3644 = pkg3_resource.Quantity{}
			} else {
				yyv3649 := &yymv3644
				yym3650 := z.DecBinary()
				_ = yym3650
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3649) {
				} else if !yym3650 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3649)
				} else {
					z.DecFallback(yyv3649, false)
				}
			}

			if yyv3644 != nil {
				yyv3644[yymk3644] = yymv3644
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3651 := range v {
		yy3652 := &yyv3651
		yy3652.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3653 := *v
	yyh3653, yyl3653 := z.DecSliceHelperStart()

	var yyrr3653, yyrl3653 int
	var yyc3653, yyrt3653 bool
	_, _, _ = yyc3653, yyrt3653, yyrl3653
	yyrr3653 = yyl3653

	if yyv3653 == nil {
		if yyrl3653, yyrt3653 = z.DecInferLen(yyl3653, z.DecBasicHandle().MaxInitLen, 456); yyrt3653 {
			yyrr3653 = yyrl3653
		}
		yyv3653 = make([]Node, yyrl3653)
		yyc3653 = true
	}

	if yyl3653 == 0 {
		if len(yyv3653) != 0 {
			yyv3653 = yyv3653[:0]
			yyc3653 = true
		}
	} else if yyl3653 > 0 {

		if yyl3653 > cap(yyv3653) {
			yyrl3653, yyrt3653 = z.DecInferLen(yyl3653, z.DecBasicHandle().MaxInitLen, 456)
			yyv3653 = make([]Node, yyrl3653)
			yyc3653 = true

			yyrr3653 = len(yyv3653)
		} else if yyl3653 != len(yyv3653) {
			yyv3653 = yyv3653[:yyl3653]
			yyc3653 = true
		}
		yyj3653 := 0
		for ; yyj3653 < yyrr3653; yyj3653++ {
			if r.TryDecodeAsNil() {
				yyv3653[yyj3653] = Node{}
			} else {
				yyv3654 := &yyv3653[yyj3653]
				yyv3654.CodecDecodeSelf(d)
			}

		}
		if yyrt3653 {
			for ; yyj3653 < yyl3653; yyj3653++ {
				yyv3653 = append(yyv3653, Node{})
				if r.TryDecodeAsNil() {
					yyv3653[yyj3653] = Node{}
				} else {
					yyv3655 := &yyv3653[yyj3653]
					yyv3655.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3653 := 0; !r.CheckBreak(); yyj3653++ {
			if yyj3653 >= len(yyv3653) {
				yyv3653 = append(yyv3653, Node{}) // var yyz3653 Node
				yyc3653 = true
			}

			if yyj3653 < len(yyv3653) {
				if r.TryDecodeAsNil() {
					yyv3653[yyj3653] = Node{}
				} else {
					yyv3656 := &yyv3653[yyj3653]
					yyv3656.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3653.End()
	}
	if yyc3653 {
		*v = yyv3653
	}

}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3657 := range v {
		yyv3657.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3658 := *v
	yyh3658, yyl3658 := z.DecSliceHelperStart()

	var yyrr3658, yyrl3658 int
	var yyc3658, yyrt3658 bool
	_, _, _ = yyc3658, yyrt3658, yyrl3658
	yyrr3658 = yyl3658

	if yyv3658 == nil {
		if yyrl3658, yyrt3658 = z.DecInferLen(yyl3658, z.DecBasicHandle().MaxInitLen, 16); yyrt3658 {
			yyrr3658 = yyrl3658
		}
		yyv3658 = make([]FinalizerName, yyrl3658)
		yyc3658 = true
	}

	if yyl3658 == 0 {
		if len(yyv3658) != 0 {
			yyv3658 = yyv3658[:0]
			yyc3658 = true
		}
	} else if yyl3658 > 0 {

		if yyl3658 > cap(yyv3658) {
			yyrl3658, yyrt3658 = z.DecInferLen(yyl3658, z.DecBasicHandle().MaxInitLen, 16)

			yyv23658 := yyv3658
			yyv3658 = make([]FinalizerName, yyrl3658)
			if len(yyv3658) > 0 {
				copy(yyv3658, yyv23658[:cap(yyv23658)])
			}
			yyc3658 = true

			yyrr3658 = len(yyv3658)
		} else if yyl3658 != len(yyv3658) {
			yyv3658 = yyv3658[:yyl3658]
			yyc3658 = true
		}
		yyj3658 := 0
		for ; yyj3658 < yyrr3658; yyj3658++ {
			if r.TryDecodeAsNil() {
				yyv3658[yyj3658] = ""
			} else {
				yyv3658[yyj3658] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt3658 {
			for ; yyj3658 < yyl3658; yyj3658++ {
				yyv3658 = append(yyv3658, "")
				if r.TryDecodeAsNil() {
					yyv3658[yyj3658] = ""
				} else {
					yyv3658[yyj3658] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3658 := 0; !r.CheckBreak(); yyj3658++ {
			if yyj3658 >= len(yyv3658) {
				yyv3658 = append(yyv3658, "") // var yyz3658 FinalizerName
				yyc3658 = true
			}

			if yyj3658 < len(yyv3658) {
				if r.TryDecodeAsNil() {
					yyv3658[yyj3658] = ""
				} else {
					yyv3658[yyj3658] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3658.End()
	}
	if yyc3658 {
		*v = yyv3658
	}

}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3662 := range v {
		yy3663 := &yyv3662
		yy3663.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3664 := *v
	yyh3664, yyl3664 := z.DecSliceHelperStart()

	var yyrr3664, yyrl3664 int
	var yyc3664, yyrt3664 bool
	_, _, _ = yyc3664, yyrt3664, yyrl3664
	yyrr3664 = yyl3664

	if yyv3664 == nil {
		if yyrl3664, yyrt3664 = z.DecInferLen(yyl3664, z.DecBasicHandle().MaxInitLen, 232); yyrt3664 {
			yyrr3664 = yyrl3664
		}
		yyv3664 = make([]Namespace, yyrl3664)
		yyc3664 = true
	}

	if yyl3664 == 0 {
		if len(yyv3664) != 0 {
			yyv3664 = yyv3664[:0]
			yyc3664 = true
		}
	} else if yyl3664 > 0 {

		if yyl3664 > cap(yyv3664) {
			yyrl3664, yyrt3664 = z.DecInferLen(yyl3664, z.DecBasicHandle().MaxInitLen, 232)
			yyv3664 = make([]Namespace, yyrl3664)
			yyc3664 = true

			yyrr3664 = len(yyv3664)
		} else if yyl3664 != len(yyv3664) {
			yyv3664 = yyv3664[:yyl3664]
			yyc3664 = true
		}
		yyj3664 := 0
		for ; yyj3664 < yyrr3664; yyj3664++ {
			if r.TryDecodeAsNil() {
				yyv3664[yyj3664] = Namespace{}
			} else {
				yyv3665 := &yyv3664[yyj3664]
				yyv3665.CodecDecodeSelf(d)
			}

		}
		if yyrt3664 {
			for ; yyj3664 < yyl3664; yyj3664++ {
				yyv3664 = append(yyv3664, Namespace{})
				if r.TryDecodeAsNil() {
					yyv3664[yyj3664] = Namespace{}
				} else {
					yyv3666 := &yyv3664[yyj3664]
					yyv3666.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3664 := 0; !r.CheckBreak(); yyj3664++ {
			if yyj3664 >= len(yyv3664) {
				yyv3664 = append(yyv3664, Namespace{}) // var yyz3664 Namespace
				yyc3664 = true
			}

			if yyj3664 < len(yyv3664) {
				if r.TryDecodeAsNil() {
					yyv3664[yyj3664] = Namespace{}
				} else {
					yyv3667 := &yyv3664[yyj3664]
					yyv3667.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3664.End()
	}
	if yyc3664 {
		*v = yyv3664
	}

}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3668 := range v {
		yy3669 := &yyv3668
		yy3669.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3670 := *v
	yyh3670, yyl3670 := z.DecSliceHelperStart()

	var yyrr3670, yyrl3670 int
	var yyc3670, yyrt3670 bool
	_, _, _ = yyc3670, yyrt3670, yyrl3670
	yyrr3670 = yyl3670

	if yyv3670 == nil {
		if yyrl3670, yyrt3670 = z.DecInferLen(yyl3670, z.DecBasicHandle().MaxInitLen, 424); yyrt3670 {
			yyrr3670 = yyrl3670
		}
		yyv3670 = make([]Event, yyrl3670)
		yyc3670 = true
	}

	if yyl3670 == 0 {
		if len(yyv3670) != 0 {
			yyv3670 = yyv3670[:0]
			yyc3670 = true
		}
	} else if yyl3670 > 0 {

		if yyl3670 > cap(yyv3670) {
			yyrl3670, yyrt3670 = z.DecInferLen(yyl3670, z.DecBasicHandle().MaxInitLen, 424)
			yyv3670 = make([]Event, yyrl3670)
			yyc3670 = true

			yyrr3670 = len(yyv3670)
		} else if yyl3670 != len(yyv3670) {
			yyv3670 = yyv3670[:yyl3670]
			yyc3670 = true
		}
		yyj3670 := 0
		for ; yyj3670 < yyrr3670; yyj3670++ {
			if r.TryDecodeAsNil() {
				yyv3670[yyj3670] = Event{}
			} else {
				yyv3671 := &yyv3670[yyj3670]
				yyv3671.CodecDecodeSelf(d)
			}

		}
		if yyrt3670 {
			for ; yyj3670 < yyl3670; yyj3670++ {
				yyv3670 = append(yyv3670, Event{})
				if r.TryDecodeAsNil() {
					yyv3670[yyj3670] = Event{}
				} else {
					yyv3672 := &yyv3670[yyj3670]
					yyv3672.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3670 := 0; !r.CheckBreak(); yyj3670++ {
			if yyj3670 >= len(yyv3670) {
				yyv3670 = append(yyv3670, Event{}) // var yyz3670 Event
				yyc3670 = true
			}

			if yyj3670 < len(yyv3670) {
				if r.TryDecodeAsNil() {
					yyv3670[yyj3670] = Event{}
				} else {
					yyv3673 := &yyv3670[yyj3670]
					yyv3673.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3670.End()
	}
	if yyc3670 {
		*v = yyv3670
	}

}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg6_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3674 := range v {
		yy3675 := &yyv3674
		yym3676 := z.EncBinary()
		_ = yym3676
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3675) {
		} else if !yym3676 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3675)
		} else {
			z.EncFallback(yy3675)
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg6_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3677 := *v
	yyh3677, yyl3677 := z.DecSliceHelperStart()

	var yyrr3677, yyrl3677 int
	var yyc3677, yyrt3677 bool
	_, _, _ = yyc3677, yyrt3677, yyrl3677
	yyrr3677 = yyl3677

	if yyv3677 == nil {
		if yyrl3677, yyrt3677 = z.DecInferLen(yyl3677, z.DecBasicHandle().MaxInitLen, 24); yyrt3677 {
			yyrr3677 = yyrl3677
		}
		yyv3677 = make([]pkg6_runtime.RawExtension, yyrl3677)
		yyc3677 = true
	}

	if yyl3677 == 0 {
		if len(yyv3677) != 0 {
			yyv3677 = yyv3677[:0]
			yyc3677 = true
		}
	} else if yyl3677 > 0 {

		if yyl3677 > cap(yyv3677) {
			yyrl3677, yyrt3677 = z.DecInferLen(yyl3677, z.DecBasicHandle().MaxInitLen, 24)
			yyv3677 = make([]pkg6_runtime.RawExtension, yyrl3677)
			yyc3677 = true

			yyrr3677 = len(yyv3677)
		} else if yyl3677 != len(yyv3677) {
			yyv3677 = yyv3677[:yyl3677]
			yyc3677 = true
		}
		yyj3677 := 0
		for ; yyj3677 < yyrr3677; yyj3677++ {
			if r.TryDecodeAsNil() {
				yyv3677[yyj3677] = pkg6_runtime.RawExtension{}
			} else {
				yyv3678 := &yyv3677[yyj3677]
				yym3679 := z.DecBinary()
				_ = yym3679
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3678) {
				} else if !yym3679 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3678)
				} else {
					z.DecFallback(yyv3678, false)
				}
			}

		}
		if yyrt3677 {
			for ; yyj3677 < yyl3677; yyj3677++ {
				yyv3677 = append(yyv3677, pkg6_runtime.RawExtension{})
				if r.TryDecodeAsNil() {
					yyv3677[yyj3677] = pkg6_runtime.RawExtension{}
				} else {
					yyv3680 := &yyv3677[yyj3677]
					yym3681 := z.DecBinary()
					_ = yym3681
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3680) {
					} else if !yym3681 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv3680)
					} else {
						z.DecFallback(yyv3680, false)
					}
				}

			}
		}

	} else {
		for yyj3677 := 0; !r.CheckBreak(); yyj3677++ {
			if yyj3677 >= len(yyv3677) {
				yyv3677 = append(yyv3677, pkg6_runtime.RawExtension{}) // var yyz3677 pkg6_runtime.RawExtension
				yyc3677 = true
			}

			if yyj3677 < len(yyv3677) {
				if r.TryDecodeAsNil() {
					yyv3677[yyj3677] = pkg6_runtime.RawExtension{}
				} else {
					yyv3682 := &yyv3677[yyj3677]
					yym3683 := z.DecBinary()
					_ = yym3683
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3682) {
					} else if !yym3683 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv3682)
					} else {
						z.DecFallback(yyv3682, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3677.End()
	}
	if yyc3677 {
		*v = yyv3677
	}

}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3684 := range v {
		yy3685 := &yyv3684
		yy3685.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3686 := *v
	yyh3686, yyl3686 := z.DecSliceHelperStart()

	var yyrr3686, yyrl3686 int
	var yyc3686, yyrt3686 bool
	_, _, _ = yyc3686, yyrt3686, yyrl3686
	yyrr3686 = yyl3686

	if yyv3686 == nil {
		if yyrl3686, yyrt3686 = z.DecInferLen(yyl3686, z.DecBasicHandle().MaxInitLen, 56); yyrt3686 {
			yyrr3686 = yyrl3686
		}
		yyv3686 = make([]LimitRangeItem, yyrl3686)
		yyc3686 = true
	}

	if yyl3686 == 0 {
		if len(yyv3686) != 0 {
			yyv3686 = yyv3686[:0]
			yyc3686 = true
		}
	} else if yyl3686 > 0 {

		if yyl3686 > cap(yyv3686) {
			yyrl3686, yyrt3686 = z.DecInferLen(yyl3686, z.DecBasicHandle().MaxInitLen, 56)
			yyv3686 = make([]LimitRangeItem, yyrl3686)
			yyc3686 = true

			yyrr3686 = len(yyv3686)
		} else if yyl3686 != len(yyv3686) {
			yyv3686 = yyv3686[:yyl3686]
			yyc3686 = true
		}
		yyj3686 := 0
		for ; yyj3686 < yyrr3686; yyj3686++ {
			if r.TryDecodeAsNil() {
				yyv3686[yyj3686] = LimitRangeItem{}
			} else {
				yyv3687 := &yyv3686[yyj3686]
				yyv3687.CodecDecodeSelf(d)
			}

		}
		if yyrt3686 {
			for ; yyj3686 < yyl3686; yyj3686++ {
				yyv3686 = append(yyv3686, LimitRangeItem{})
				if r.TryDecodeAsNil() {
					yyv3686[yyj3686] = LimitRangeItem{}
				} else {
					yyv3688 := &yyv3686[yyj3686]
					yyv3688.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3686 := 0; !r.CheckBreak(); yyj3686++ {
			if yyj3686 >= len(yyv3686) {
				yyv3686 = append(yyv3686, LimitRangeItem{}) // var yyz3686 LimitRangeItem
				yyc3686 = true
			}

			if yyj3686 < len(yyv3686) {
				if r.TryDecodeAsNil() {
					yyv3686[yyj3686] = LimitRangeItem{}
				} else {
					yyv3689 := &yyv3686[yyj3686]
					yyv3689.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3686.End()
	}
	if yyc3686 {
		*v = yyv3686
	}

}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3690 := range v {
		yy3691 := &yyv3690
		yy3691.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3692 := *v
	yyh3692, yyl3692 := z.DecSliceHelperStart()

	var yyrr3692, yyrl3692 int
	var yyc3692, yyrt3692 bool
	_, _, _ = yyc3692, yyrt3692, yyrl3692
	yyrr3692 = yyl3692

	if yyv3692 == nil {
		if yyrl3692, yyrt3692 = z.DecInferLen(yyl3692, z.DecBasicHandle().MaxInitLen, 216); yyrt3692 {
			yyrr3692 = yyrl3692
		}
		yyv3692 = make([]LimitRange, yyrl3692)
		yyc3692 = true
	}

	if yyl3692 == 0 {
		if len(yyv3692) != 0 {
			yyv3692 = yyv3692[:0]
			yyc3692 = true
		}
	} else if yyl3692 > 0 {

		if yyl3692 > cap(yyv3692) {
			yyrl3692, yyrt3692 = z.DecInferLen(yyl3692, z.DecBasicHandle().MaxInitLen, 216)
			yyv3692 = make([]LimitRange, yyrl3692)
			yyc3692 = true

			yyrr3692 = len(yyv3692)
		} else if yyl3692 != len(yyv3692) {
			yyv3692 = yyv3692[:yyl3692]
			yyc3692 = true
		}
		yyj3692 := 0
		for ; yyj3692 < yyrr3692; yyj3692++ {
			if r.TryDecodeAsNil() {
				yyv3692[yyj3692] = LimitRange{}
			} else {
				yyv3693 := &yyv3692[yyj3692]
				yyv3693.CodecDecodeSelf(d)
			}

		}
		if yyrt3692 {
			for ; yyj3692 < yyl3692; yyj3692++ {
				yyv3692 = append(yyv3692, LimitRange{})
				if r.TryDecodeAsNil() {
					yyv3692[yyj3692] = LimitRange{}
				} else {
					yyv3694 := &yyv3692[yyj3692]
					yyv3694.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3692 := 0; !r.CheckBreak(); yyj3692++ {
			if yyj3692 >= len(yyv3692) {
				yyv3692 = append(yyv3692, LimitRange{}) // var yyz3692 LimitRange
				yyc3692 = true
			}

			if yyj3692 < len(yyv3692) {
				if r.TryDecodeAsNil() {
					yyv3692[yyj3692] = LimitRange{}
				} else {
					yyv3695 := &yyv3692[yyj3692]
					yyv3695.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3692.End()
	}
	if yyc3692 {
		*v = yyv3692
	}

}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3696 := range v {
		yy3697 := &yyv3696
		yy3697.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3698 := *v
	yyh3698, yyl3698 := z.DecSliceHelperStart()

	var yyrr3698, yyrl3698 int
	var yyc3698, yyrt3698 bool
	_, _, _ = yyc3698, yyrt3698, yyrl3698
	yyrr3698 = yyl3698

	if yyv3698 == nil {
		if yyrl3698, yyrt3698 = z.DecInferLen(yyl3698, z.DecBasicHandle().MaxInitLen, 216); yyrt3698 {
			yyrr3698 = yyrl3698
		}
		yyv3698 = make([]ResourceQuota, yyrl3698)
		yyc3698 = true
	}

	if yyl3698 == 0 {
		if len(yyv3698) != 0 {
			yyv3698 = yyv3698[:0]
			yyc3698 = true
		}
	} else if yyl3698 > 0 {

		if yyl3698 > cap(yyv3698) {
			yyrl3698, yyrt3698 = z.DecInferLen(yyl3698, z.DecBasicHandle().MaxInitLen, 216)
			yyv3698 = make([]ResourceQuota, yyrl3698)
			yyc3698 = true

			yyrr3698 = len(yyv3698)
		} else if yyl3698 != len(yyv3698) {
			yyv3698 = yyv3698[:yyl3698]
			yyc3698 = true
		}
		yyj3698 := 0
		for ; yyj3698 < yyrr3698; yyj3698++ {
			if r.TryDecodeAsNil() {
				yyv3698[yyj3698] = ResourceQuota{}
			} else {
				yyv3699 := &yyv3698[yyj3698]
				yyv3699.CodecDecodeSelf(d)
			}

		}
		if yyrt3698 {
			for ; yyj3698 < yyl3698; yyj3698++ {
				yyv3698 = append(yyv3698, ResourceQuota{})
				if r.TryDecodeAsNil() {
					yyv3698[yyj3698] = ResourceQuota{}
				} else {
					yyv3700 := &yyv3698[yyj3698]
					yyv3700.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3698 := 0; !r.CheckBreak(); yyj3698++ {
			if yyj3698 >= len(yyv3698) {
				yyv3698 = append(yyv3698, ResourceQuota{}) // var yyz3698 ResourceQuota
				yyc3698 = true
			}

			if yyj3698 < len(yyv3698) {
				if r.TryDecodeAsNil() {
					yyv3698[yyj3698] = ResourceQuota{}
				} else {
					yyv3701 := &yyv3698[yyj3698]
					yyv3701.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3698.End()
	}
	if yyc3698 {
		*v = yyv3698
	}

}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3702, yyv3702 := range v {
		yym3703 := z.EncBinary()
		_ = yym3703
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk3702))
		}
		if yyv3702 == nil {
			r.EncodeNil()
		} else {
			yym3704 := z.EncBinary()
			_ = yym3704
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv3702))
			}
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3705 := *v
	yyl3705 := r.ReadMapStart()
	yybh3705 := z.DecBasicHandle()
	if yyv3705 == nil {
		yyrl3705, _ := z.DecInferLen(yyl3705, yybh3705.MaxInitLen, 40)
		yyv3705 = make(map[string][]uint8, yyrl3705)
		*v = yyv3705
	}
	var yymk3705 string
	var yymv3705 []uint8
	var yymg3705 bool
	if yybh3705.MapValueReset {
		yymg3705 = true
	}
	if yyl3705 > 0 {
		for yyj3705 := 0; yyj3705 < yyl3705; yyj3705++ {
			if r.TryDecodeAsNil() {
				yymk3705 = ""
			} else {
				yymk3705 = string(r.DecodeString())
			}

			if yymg3705 {
				yymv3705 = yyv3705[yymk3705]
			} else {
				yymv3705 = nil
			}
			if r.TryDecodeAsNil() {
				yymv3705 = nil
			} else {
				yyv3707 := &yymv3705
				yym3708 := z.DecBinary()
				_ = yym3708
				if false {
				} else {
					*yyv3707 = r.DecodeBytes(*(*[]byte)(yyv3707), false, false)
				}
			}

			if yyv3705 != nil {
				yyv3705[yymk3705] = yymv3705
			}
		}
	} else if yyl3705 < 0 {
		for yyj3705 := 0; !r.CheckBreak(); yyj3705++ {
			if r.TryDecodeAsNil() {
				yymk3705 = ""
			} else {
				yymk3705 = string(r.DecodeString())
			}

			if yymg3705 {
				yymv3705 = yyv3705[yymk3705]
			} else {
				yymv3705 = nil
			}
			if r.TryDecodeAsNil() {
				yymv3705 = nil
			} else {
				yyv3710 := &yymv3705
				yym3711 := z.DecBinary()
				_ = yym3711
				if false {
				} else {
					*yyv3710 = r.DecodeBytes(*(*[]byte)(yyv3710), false, false)
				}
			}

			if yyv3705 != nil {
				yyv3705[yymk3705] = yymv3705
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3712 := range v {
		yy3713 := &yyv3712
		yy3713.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3714 := *v
	yyh3714, yyl3714 := z.DecSliceHelperStart()

	var yyrr3714, yyrl3714 int
	var yyc3714, yyrt3714 bool
	_, _, _ = yyc3714, yyrt3714, yyrl3714
	yyrr3714 = yyl3714

	if yyv3714 == nil {
		if yyrl3714, yyrt3714 = z.DecInferLen(yyl3714, z.DecBasicHandle().MaxInitLen, 216); yyrt3714 {
			yyrr3714 = yyrl3714
		}
		yyv3714 = make([]Secret, yyrl3714)
		yyc3714 = true
	}

	if yyl3714 == 0 {
		if len(yyv3714) != 0 {
			yyv3714 = yyv3714[:0]
			yyc3714 = true
		}
	} else if yyl3714 > 0 {

		if yyl3714 > cap(yyv3714) {
			yyrl3714, yyrt3714 = z.DecInferLen(yyl3714, z.DecBasicHandle().MaxInitLen, 216)
			yyv3714 = make([]Secret, yyrl3714)
			yyc3714 = true

			yyrr3714 = len(yyv3714)
		} else if yyl3714 != len(yyv3714) {
			yyv3714 = yyv3714[:yyl3714]
			yyc3714 = true
		}
		yyj3714 := 0
		for ; yyj3714 < yyrr3714; yyj3714++ {
			if r.TryDecodeAsNil() {
				yyv3714[yyj3714] = Secret{}
			} else {
				yyv3715 := &yyv3714[yyj3714]
				yyv3715.CodecDecodeSelf(d)
			}

		}
		if yyrt3714 {
			for ; yyj3714 < yyl3714; yyj3714++ {
				yyv3714 = append(yyv3714, Secret{})
				if r.TryDecodeAsNil() {
					yyv3714[yyj3714] = Secret{}
				} else {
					yyv3716 := &yyv3714[yyj3714]
					yyv3716.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3714 := 0; !r.CheckBreak(); yyj3714++ {
			if yyj3714 >= len(yyv3714) {
				yyv3714 = append(yyv3714, Secret{}) // var yyz3714 Secret
				yyc3714 = true
			}

			if yyj3714 < len(yyv3714) {
				if r.TryDecodeAsNil() {
					yyv3714[yyj3714] = Secret{}
				} else {
					yyv3717 := &yyv3714[yyj3714]
					yyv3717.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3714.End()
	}
	if yyc3714 {
		*v = yyv3714
	}

}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3718 := range v {
		yy3719 := &yyv3718
		yy3719.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3720 := *v
	yyh3720, yyl3720 := z.DecSliceHelperStart()

	var yyrr3720, yyrl3720 int
	var yyc3720, yyrt3720 bool
	_, _, _ = yyc3720, yyrt3720, yyrl3720
	yyrr3720 = yyl3720

	if yyv3720 == nil {
		if yyrl3720, yyrt3720 = z.DecInferLen(yyl3720, z.DecBasicHandle().MaxInitLen, 64); yyrt3720 {
			yyrr3720 = yyrl3720
		}
		yyv3720 = make([]ComponentCondition, yyrl3720)
		yyc3720 = true
	}

	if yyl3720 == 0 {
		if len(yyv3720) != 0 {
			yyv3720 = yyv3720[:0]
			yyc3720 = true
		}
	} else if yyl3720 > 0 {

		if yyl3720 > cap(yyv3720) {
			yyrl3720, yyrt3720 = z.DecInferLen(yyl3720, z.DecBasicHandle().MaxInitLen, 64)
			yyv3720 = make([]ComponentCondition, yyrl3720)
			yyc3720 = true

			yyrr3720 = len(yyv3720)
		} else if yyl3720 != len(yyv3720) {
			yyv3720 = yyv3720[:yyl3720]
			yyc3720 = true
		}
		yyj3720 := 0
		for ; yyj3720 < yyrr3720; yyj3720++ {
			if r.TryDecodeAsNil() {
				yyv3720[yyj3720] = ComponentCondition{}
			} else {
				yyv3721 := &yyv3720[yyj3720]
				yyv3721.CodecDecodeSelf(d)
			}

		}
		if yyrt3720 {
			for ; yyj3720 < yyl3720; yyj3720++ {
				yyv3720 = append(yyv3720, ComponentCondition{})
				if r.TryDecodeAsNil() {
					yyv3720[yyj3720] = ComponentCondition{}
				} else {
					yyv3722 := &yyv3720[yyj3720]
					yyv3722.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3720 := 0; !r.CheckBreak(); yyj3720++ {
			if yyj3720 >= len(yyv3720) {
				yyv3720 = append(yyv3720, ComponentCondition{}) // var yyz3720 ComponentCondition
				yyc3720 = true
			}

			if yyj3720 < len(yyv3720) {
				if r.TryDecodeAsNil() {
					yyv3720[yyj3720] = ComponentCondition{}
				} else {
					yyv3723 := &yyv3720[yyj3720]
					yyv3723.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3720.End()
	}
	if yyc3720 {
		*v = yyv3720
	}

}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3724 := range v {
		yy3725 := &yyv3724
		yy3725.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3726 := *v
	yyh3726, yyl3726 := z.DecSliceHelperStart()

	var yyrr3726, yyrl3726 int
	var yyc3726, yyrt3726 bool
	_, _, _ = yyc3726, yyrt3726, yyrl3726
	yyrr3726 = yyl3726

	if yyv3726 == nil {
		if yyrl3726, yyrt3726 = z.DecInferLen(yyl3726, z.DecBasicHandle().MaxInitLen, 216); yyrt3726 {
			yyrr3726 = yyrl3726
		}
		yyv3726 = make([]ComponentStatus, yyrl3726)
		yyc3726 = true
	}

	if yyl3726 == 0 {
		if len(yyv3726) != 0 {
			yyv3726 = yyv3726[:0]
			yyc3726 = true
		}
	} else if yyl3726 > 0 {

		if yyl3726 > cap(yyv3726) {
			yyrl3726, yyrt3726 = z.DecInferLen(yyl3726, z.DecBasicHandle().MaxInitLen, 216)
			yyv3726 = make([]ComponentStatus, yyrl3726)
			yyc3726 = true

			yyrr3726 = len(yyv3726)
		} else if yyl3726 != len(yyv3726) {
			yyv3726 = yyv3726[:yyl3726]
			yyc3726 = true
		}
		yyj3726 := 0
		for ; yyj3726 < yyrr3726; yyj3726++ {
			if r.TryDecodeAsNil() {
				yyv3726[yyj3726] = ComponentStatus{}
			} else {
				yyv3727 := &yyv3726[yyj3726]
				yyv3727.CodecDecodeSelf(d)
			}

		}
		if yyrt3726 {
			for ; yyj3726 < yyl3726; yyj3726++ {
				yyv3726 = append(yyv3726, ComponentStatus{})
				if r.TryDecodeAsNil() {
					yyv3726[yyj3726] = ComponentStatus{}
				} else {
					yyv3728 := &yyv3726[yyj3726]
					yyv3728.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3726 := 0; !r.CheckBreak(); yyj3726++ {
			if yyj3726 >= len(yyv3726) {
				yyv3726 = append(yyv3726, ComponentStatus{}) // var yyz3726 ComponentStatus
				yyc3726 = true
			}

			if yyj3726 < len(yyv3726) {
				if r.TryDecodeAsNil() {
					yyv3726[yyj3726] = ComponentStatus{}
				} else {
					yyv3729 := &yyv3726[yyj3726]
					yyv3729.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3726.End()
	}
	if yyc3726 {
		*v = yyv3726
	}

}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3730 := range v {
		yy3731 := &yyv3730
		yy3731.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3732 := *v
	yyh3732, yyl3732 := z.DecSliceHelperStart()

	var yyrr3732, yyrl3732 int
	var yyc3732, yyrt3732 bool
	_, _, _ = yyc3732, yyrt3732, yyrl3732
	yyrr3732 = yyl3732

	if yyv3732 == nil {
		if yyrl3732, yyrt3732 = z.DecInferLen(yyl3732, z.DecBasicHandle().MaxInitLen, 48); yyrt3732 {
			yyrr3732 = yyrl3732
		}
		yyv3732 = make([]DownwardAPIVolumeFile, yyrl3732)
		yyc3732 = true
	}

	if yyl3732 == 0 {
		if len(yyv3732) != 0 {
			yyv3732 = yyv3732[:0]
			yyc3732 = true
		}
	} else if yyl3732 > 0 {

		if yyl3732 > cap(yyv3732) {
			yyrl3732, yyrt3732 = z.DecInferLen(yyl3732, z.DecBasicHandle().MaxInitLen, 48)
			yyv3732 = make([]DownwardAPIVolumeFile, yyrl3732)
			yyc3732 = true

			yyrr3732 = len(yyv3732)
		} else if yyl3732 != len(yyv3732) {
			yyv3732 = yyv3732[:yyl3732]
			yyc3732 = true
		}
		yyj3732 := 0
		for ; yyj3732 < yyrr3732; yyj3732++ {
			if r.TryDecodeAsNil() {
				yyv3732[yyj3732] = DownwardAPIVolumeFile{}
			} else {
				yyv3733 := &yyv3732[yyj3732]
				yyv3733.CodecDecodeSelf(d)
			}

		}
		if yyrt3732 {
			for ; yyj3732 < yyl3732; yyj3732++ {
				yyv3732 = append(yyv3732, DownwardAPIVolumeFile{})
				if r.TryDecodeAsNil() {
					yyv3732[yyj3732] = DownwardAPIVolumeFile{}
				} else {
					yyv3734 := &yyv3732[yyj3732]
					yyv3734.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3732 := 0; !r.CheckBreak(); yyj3732++ {
			if yyj3732 >= len(yyv3732) {
				yyv3732 = append(yyv3732, DownwardAPIVolumeFile{}) // var yyz3732 DownwardAPIVolumeFile
				yyc3732 = true
			}

			if yyj3732 < len(yyv3732) {
				if r.TryDecodeAsNil() {
					yyv3732[yyj3732] = DownwardAPIVolumeFile{}
				} else {
					yyv3735 := &yyv3732[yyj3732]
					yyv3735.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3732.End()
	}
	if yyc3732 {
		*v = yyv3732
	}

}
